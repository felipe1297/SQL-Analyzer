# Generated from antlr/PostgreSql/PostgreSqlGrammar.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,139,979,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,1,0,5,0,98,8,0,10,0,12,0,101,9,0,1,0,1,0,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,135,8,1,1,
        2,1,2,1,2,1,2,1,2,1,2,3,2,143,8,2,1,2,1,2,3,2,147,8,2,1,2,1,2,1,
        2,1,2,5,2,153,8,2,10,2,12,2,156,9,2,3,2,158,8,2,1,2,1,2,1,2,1,2,
        5,2,164,8,2,10,2,12,2,167,9,2,1,2,5,2,170,8,2,10,2,12,2,173,9,2,
        1,2,1,2,3,2,177,8,2,1,2,3,2,180,8,2,1,2,3,2,183,8,2,1,2,1,2,3,2,
        187,8,2,1,3,1,3,1,3,3,3,192,8,3,1,3,1,3,3,3,196,8,3,3,3,198,8,3,
        1,3,1,3,1,3,3,3,203,8,3,3,3,205,8,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,
        213,8,3,3,3,215,8,3,1,4,1,4,1,4,1,4,1,4,3,4,222,8,4,1,4,1,4,1,4,
        1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,273,
        8,5,1,6,1,6,1,6,1,6,1,6,5,6,280,8,6,10,6,12,6,283,9,6,1,7,1,7,1,
        8,1,8,1,8,1,8,3,8,291,8,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,299,8,8,10,
        8,12,8,302,9,8,1,8,1,8,5,8,306,8,8,10,8,12,8,309,9,8,1,8,1,8,1,9,
        1,9,1,9,5,9,316,8,9,10,9,12,9,319,9,9,1,10,1,10,1,10,1,10,1,10,1,
        10,1,10,3,10,328,8,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
        11,3,11,352,8,11,1,12,1,12,1,12,5,12,357,8,12,10,12,12,12,360,9,
        12,1,13,1,13,3,13,364,8,13,1,13,1,13,1,13,1,13,3,13,370,8,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,3,14,383,8,14,
        1,14,1,14,1,14,1,15,1,15,1,15,1,15,3,15,392,8,15,1,15,1,15,1,16,
        1,16,1,16,1,16,3,16,400,8,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,
        1,17,1,17,1,17,3,17,412,8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        1,17,1,17,3,17,423,8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,
        432,8,18,1,18,1,18,1,18,1,18,5,18,438,8,18,10,18,12,18,441,9,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,450,8,18,1,18,1,18,3,18,
        454,8,18,1,19,1,19,1,19,1,19,5,19,460,8,19,10,19,12,19,463,9,19,
        1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,5,20,473,8,20,10,20,12,20,
        476,9,20,1,20,1,20,3,20,480,8,20,1,21,1,21,1,21,1,21,1,22,1,22,1,
        22,1,22,1,22,3,22,491,8,22,1,23,1,23,1,23,1,23,3,23,497,8,23,1,24,
        1,24,1,24,1,24,5,24,503,8,24,10,24,12,24,506,9,24,1,25,1,25,1,25,
        1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
        1,26,1,26,1,26,1,26,3,26,528,8,26,1,26,3,26,531,8,26,1,27,1,27,3,
        27,535,8,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,
        30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,554,8,30,1,31,1,31,1,31,1,
        31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,570,8,
        31,1,32,1,32,3,32,574,8,32,1,32,1,32,1,32,1,32,3,32,580,8,32,3,32,
        582,8,32,1,33,1,33,1,34,1,34,1,34,3,34,589,8,34,1,35,1,35,1,35,1,
        35,1,35,5,35,596,8,35,10,35,12,35,599,9,35,1,35,1,35,3,35,603,8,
        35,1,36,1,36,1,36,1,36,1,36,1,36,3,36,611,8,36,1,37,1,37,1,37,1,
        37,1,37,5,37,618,8,37,10,37,12,37,621,9,37,1,38,1,38,3,38,625,8,
        38,1,38,1,38,1,38,1,38,3,38,631,8,38,3,38,633,8,38,1,39,1,39,1,39,
        1,39,3,39,639,8,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,1,39,1,39,1,39,3,39,707,8,39,1,40,1,40,1,40,1,40,1,40,
        1,40,1,40,1,40,1,40,1,40,1,40,3,40,720,8,40,1,40,1,40,1,40,1,40,
        1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,
        1,40,1,40,1,40,1,40,1,40,1,40,3,40,745,8,40,3,40,747,8,40,3,40,749,
        8,40,1,40,1,40,1,40,1,40,1,40,1,40,5,40,757,8,40,10,40,12,40,760,
        9,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,768,8,40,1,40,1,40,1,40,
        1,40,1,40,1,40,5,40,776,8,40,10,40,12,40,779,9,40,1,41,1,41,1,41,
        1,41,1,41,3,41,786,8,41,3,41,788,8,41,1,41,3,41,791,8,41,1,42,1,
        42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,
        42,5,42,808,8,42,10,42,12,42,811,9,42,1,43,1,43,1,43,1,43,1,43,1,
        43,3,43,819,8,43,1,44,1,44,4,44,823,8,44,11,44,12,44,824,1,44,1,
        44,1,44,3,44,830,8,44,3,44,832,8,44,1,44,1,44,1,45,1,45,1,45,1,45,
        1,45,1,46,1,46,1,46,1,46,1,46,5,46,846,8,46,10,46,12,46,849,9,46,
        3,46,851,8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,975,8,46,1,47,1,47,
        1,47,0,2,80,84,48,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
        34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
        78,80,82,84,86,88,90,92,94,0,3,4,0,51,51,77,77,84,84,92,92,1,0,33,
        34,1,0,121,126,1110,0,99,1,0,0,0,2,134,1,0,0,0,4,186,1,0,0,0,6,214,
        1,0,0,0,8,216,1,0,0,0,10,272,1,0,0,0,12,274,1,0,0,0,14,284,1,0,0,
        0,16,286,1,0,0,0,18,312,1,0,0,0,20,327,1,0,0,0,22,351,1,0,0,0,24,
        353,1,0,0,0,26,361,1,0,0,0,28,378,1,0,0,0,30,387,1,0,0,0,32,395,
        1,0,0,0,34,422,1,0,0,0,36,453,1,0,0,0,38,455,1,0,0,0,40,466,1,0,
        0,0,42,481,1,0,0,0,44,485,1,0,0,0,46,496,1,0,0,0,48,498,1,0,0,0,
        50,507,1,0,0,0,52,527,1,0,0,0,54,534,1,0,0,0,56,536,1,0,0,0,58,541,
        1,0,0,0,60,553,1,0,0,0,62,569,1,0,0,0,64,581,1,0,0,0,66,583,1,0,
        0,0,68,588,1,0,0,0,70,590,1,0,0,0,72,610,1,0,0,0,74,612,1,0,0,0,
        76,632,1,0,0,0,78,706,1,0,0,0,80,767,1,0,0,0,82,790,1,0,0,0,84,792,
        1,0,0,0,86,818,1,0,0,0,88,820,1,0,0,0,90,835,1,0,0,0,92,974,1,0,
        0,0,94,976,1,0,0,0,96,98,3,2,1,0,97,96,1,0,0,0,98,101,1,0,0,0,99,
        97,1,0,0,0,99,100,1,0,0,0,100,102,1,0,0,0,101,99,1,0,0,0,102,103,
        5,0,0,1,103,1,1,0,0,0,104,105,3,4,2,0,105,106,5,117,0,0,106,135,
        1,0,0,0,107,108,3,8,4,0,108,109,5,117,0,0,109,135,1,0,0,0,110,111,
        3,16,8,0,111,112,5,117,0,0,112,135,1,0,0,0,113,114,3,26,13,0,114,
        115,5,117,0,0,115,135,1,0,0,0,116,117,3,28,14,0,117,118,5,117,0,
        0,118,135,1,0,0,0,119,120,3,30,15,0,120,121,5,117,0,0,121,135,1,
        0,0,0,122,123,3,32,16,0,123,124,5,117,0,0,124,135,1,0,0,0,125,126,
        3,36,18,0,126,127,5,117,0,0,127,135,1,0,0,0,128,129,3,40,20,0,129,
        130,5,117,0,0,130,135,1,0,0,0,131,132,3,44,22,0,132,133,5,117,0,
        0,133,135,1,0,0,0,134,104,1,0,0,0,134,107,1,0,0,0,134,110,1,0,0,
        0,134,113,1,0,0,0,134,116,1,0,0,0,134,119,1,0,0,0,134,122,1,0,0,
        0,134,125,1,0,0,0,134,128,1,0,0,0,134,131,1,0,0,0,135,3,1,0,0,0,
        136,137,5,119,0,0,137,138,3,4,2,0,138,139,5,120,0,0,139,187,1,0,
        0,0,140,141,5,26,0,0,141,143,3,48,24,0,142,140,1,0,0,0,142,143,1,
        0,0,0,143,144,1,0,0,0,144,146,5,25,0,0,145,147,5,76,0,0,146,145,
        1,0,0,0,146,147,1,0,0,0,147,157,1,0,0,0,148,158,5,115,0,0,149,154,
        3,52,26,0,150,151,5,116,0,0,151,153,3,52,26,0,152,150,1,0,0,0,153,
        156,1,0,0,0,154,152,1,0,0,0,154,155,1,0,0,0,155,158,1,0,0,0,156,
        154,1,0,0,0,157,148,1,0,0,0,157,149,1,0,0,0,158,159,1,0,0,0,159,
        160,5,27,0,0,160,165,3,64,32,0,161,162,5,116,0,0,162,164,3,64,32,
        0,163,161,1,0,0,0,164,167,1,0,0,0,165,163,1,0,0,0,165,166,1,0,0,
        0,166,171,1,0,0,0,167,165,1,0,0,0,168,170,3,54,27,0,169,168,1,0,
        0,0,170,173,1,0,0,0,171,169,1,0,0,0,171,172,1,0,0,0,172,176,1,0,
        0,0,173,171,1,0,0,0,174,175,5,28,0,0,175,177,3,80,40,0,176,174,1,
        0,0,0,176,177,1,0,0,0,177,179,1,0,0,0,178,180,3,70,35,0,179,178,
        1,0,0,0,179,180,1,0,0,0,180,182,1,0,0,0,181,183,3,74,37,0,182,181,
        1,0,0,0,182,183,1,0,0,0,183,184,1,0,0,0,184,185,3,6,3,0,185,187,
        1,0,0,0,186,136,1,0,0,0,186,142,1,0,0,0,187,5,1,0,0,0,188,191,5,
        93,0,0,189,192,3,80,40,0,190,192,5,114,0,0,191,189,1,0,0,0,191,190,
        1,0,0,0,192,195,1,0,0,0,193,194,5,71,0,0,194,196,3,80,40,0,195,193,
        1,0,0,0,195,196,1,0,0,0,196,198,1,0,0,0,197,188,1,0,0,0,197,198,
        1,0,0,0,198,215,1,0,0,0,199,202,5,71,0,0,200,203,3,80,40,0,201,203,
        5,114,0,0,202,200,1,0,0,0,202,201,1,0,0,0,203,205,1,0,0,0,204,199,
        1,0,0,0,204,205,1,0,0,0,205,215,1,0,0,0,206,207,5,72,0,0,207,208,
        5,73,0,0,208,209,3,80,40,0,209,210,5,74,0,0,210,211,5,75,0,0,211,
        213,1,0,0,0,212,206,1,0,0,0,212,213,1,0,0,0,213,215,1,0,0,0,214,
        197,1,0,0,0,214,204,1,0,0,0,214,212,1,0,0,0,215,7,1,0,0,0,216,217,
        5,50,0,0,217,218,5,51,0,0,218,219,5,139,0,0,219,221,5,119,0,0,220,
        222,3,12,6,0,221,220,1,0,0,0,221,222,1,0,0,0,222,223,1,0,0,0,223,
        224,5,120,0,0,224,225,5,52,0,0,225,226,5,139,0,0,226,227,5,38,0,
        0,227,228,3,14,7,0,228,9,1,0,0,0,229,230,5,1,0,0,230,231,5,119,0,
        0,231,232,5,114,0,0,232,273,5,120,0,0,233,273,5,2,0,0,234,235,5,
        3,0,0,235,236,5,119,0,0,236,237,5,114,0,0,237,238,5,116,0,0,238,
        239,5,114,0,0,239,273,5,120,0,0,240,273,5,4,0,0,241,273,5,5,0,0,
        242,273,5,6,0,0,243,273,5,7,0,0,244,273,5,8,0,0,245,273,5,9,0,0,
        246,273,5,10,0,0,247,273,5,11,0,0,248,273,5,12,0,0,249,273,5,13,
        0,0,250,273,5,14,0,0,251,273,5,15,0,0,252,273,5,16,0,0,253,254,5,
        17,0,0,254,255,5,119,0,0,255,256,5,114,0,0,256,257,5,116,0,0,257,
        258,5,114,0,0,258,273,5,120,0,0,259,273,5,18,0,0,260,273,5,19,0,
        0,261,273,5,20,0,0,262,263,5,21,0,0,263,264,5,119,0,0,264,265,5,
        114,0,0,265,273,5,120,0,0,266,267,5,22,0,0,267,268,5,119,0,0,268,
        269,5,114,0,0,269,273,5,120,0,0,270,273,5,23,0,0,271,273,5,24,0,
        0,272,229,1,0,0,0,272,233,1,0,0,0,272,234,1,0,0,0,272,240,1,0,0,
        0,272,241,1,0,0,0,272,242,1,0,0,0,272,243,1,0,0,0,272,244,1,0,0,
        0,272,245,1,0,0,0,272,246,1,0,0,0,272,247,1,0,0,0,272,248,1,0,0,
        0,272,249,1,0,0,0,272,250,1,0,0,0,272,251,1,0,0,0,272,252,1,0,0,
        0,272,253,1,0,0,0,272,259,1,0,0,0,272,260,1,0,0,0,272,261,1,0,0,
        0,272,262,1,0,0,0,272,266,1,0,0,0,272,270,1,0,0,0,272,271,1,0,0,
        0,273,11,1,0,0,0,274,275,5,139,0,0,275,281,3,10,5,0,276,277,5,116,
        0,0,277,278,5,139,0,0,278,280,3,10,5,0,279,276,1,0,0,0,280,283,1,
        0,0,0,281,279,1,0,0,0,281,282,1,0,0,0,282,13,1,0,0,0,283,281,1,0,
        0,0,284,285,3,80,40,0,285,15,1,0,0,0,286,290,5,50,0,0,287,288,5,
        111,0,0,288,289,5,37,0,0,289,291,5,112,0,0,290,287,1,0,0,0,290,291,
        1,0,0,0,291,292,1,0,0,0,292,293,5,77,0,0,293,294,3,66,33,0,294,295,
        5,119,0,0,295,300,3,18,9,0,296,297,5,116,0,0,297,299,3,18,9,0,298,
        296,1,0,0,0,299,302,1,0,0,0,300,298,1,0,0,0,300,301,1,0,0,0,301,
        307,1,0,0,0,302,300,1,0,0,0,303,304,5,116,0,0,304,306,3,22,11,0,
        305,303,1,0,0,0,306,309,1,0,0,0,307,305,1,0,0,0,307,308,1,0,0,0,
        308,310,1,0,0,0,309,307,1,0,0,0,310,311,5,120,0,0,311,17,1,0,0,0,
        312,313,5,139,0,0,313,317,3,10,5,0,314,316,3,20,10,0,315,314,1,0,
        0,0,316,319,1,0,0,0,317,315,1,0,0,0,317,318,1,0,0,0,318,19,1,0,0,
        0,319,317,1,0,0,0,320,321,5,37,0,0,321,328,5,41,0,0,322,328,5,78,
        0,0,323,324,5,79,0,0,324,328,5,80,0,0,325,326,5,81,0,0,326,328,3,
        80,40,0,327,320,1,0,0,0,327,322,1,0,0,0,327,323,1,0,0,0,327,325,
        1,0,0,0,328,21,1,0,0,0,329,330,5,79,0,0,330,331,5,80,0,0,331,332,
        5,119,0,0,332,333,3,24,12,0,333,334,5,120,0,0,334,352,1,0,0,0,335,
        336,5,78,0,0,336,337,5,119,0,0,337,338,3,24,12,0,338,339,5,120,0,
        0,339,352,1,0,0,0,340,341,5,82,0,0,341,342,5,80,0,0,342,343,5,119,
        0,0,343,344,3,24,12,0,344,345,5,120,0,0,345,346,5,83,0,0,346,347,
        3,66,33,0,347,348,5,119,0,0,348,349,3,24,12,0,349,350,5,120,0,0,
        350,352,1,0,0,0,351,329,1,0,0,0,351,335,1,0,0,0,351,340,1,0,0,0,
        352,23,1,0,0,0,353,358,5,139,0,0,354,355,5,116,0,0,355,357,5,139,
        0,0,356,354,1,0,0,0,357,360,1,0,0,0,358,356,1,0,0,0,358,359,1,0,
        0,0,359,25,1,0,0,0,360,358,1,0,0,0,361,363,5,50,0,0,362,364,5,78,
        0,0,363,362,1,0,0,0,363,364,1,0,0,0,364,365,1,0,0,0,365,369,5,84,
        0,0,366,367,5,111,0,0,367,368,5,37,0,0,368,370,5,112,0,0,369,366,
        1,0,0,0,369,370,1,0,0,0,370,371,1,0,0,0,371,372,5,139,0,0,372,373,
        5,39,0,0,373,374,3,66,33,0,374,375,5,119,0,0,375,376,3,24,12,0,376,
        377,5,120,0,0,377,27,1,0,0,0,378,382,5,50,0,0,379,380,5,111,0,0,
        380,381,5,37,0,0,381,383,5,112,0,0,382,379,1,0,0,0,382,383,1,0,0,
        0,383,384,1,0,0,0,384,385,5,92,0,0,385,386,5,139,0,0,386,29,1,0,
        0,0,387,388,5,85,0,0,388,391,7,0,0,0,389,390,5,111,0,0,390,392,5,
        112,0,0,391,389,1,0,0,0,391,392,1,0,0,0,392,393,1,0,0,0,393,394,
        5,139,0,0,394,31,1,0,0,0,395,396,5,86,0,0,396,399,5,77,0,0,397,398,
        5,111,0,0,398,400,5,112,0,0,399,397,1,0,0,0,399,400,1,0,0,0,400,
        401,1,0,0,0,401,402,3,66,33,0,402,403,3,34,17,0,403,33,1,0,0,0,404,
        405,5,90,0,0,405,406,5,91,0,0,406,423,3,18,9,0,407,408,5,85,0,0,
        408,411,5,91,0,0,409,410,5,111,0,0,410,412,5,112,0,0,411,409,1,0,
        0,0,411,412,1,0,0,0,412,413,1,0,0,0,413,423,5,139,0,0,414,415,5,
        87,0,0,415,416,5,91,0,0,416,417,5,139,0,0,417,418,5,89,0,0,418,423,
        5,139,0,0,419,420,5,90,0,0,420,421,5,88,0,0,421,423,3,22,11,0,422,
        404,1,0,0,0,422,407,1,0,0,0,422,414,1,0,0,0,422,419,1,0,0,0,423,
        35,1,0,0,0,424,425,5,130,0,0,425,426,5,131,0,0,426,431,3,66,33,0,
        427,428,5,119,0,0,428,429,3,24,12,0,429,430,5,120,0,0,430,432,1,
        0,0,0,431,427,1,0,0,0,431,432,1,0,0,0,432,433,1,0,0,0,433,434,5,
        132,0,0,434,439,3,38,19,0,435,436,5,116,0,0,436,438,3,38,19,0,437,
        435,1,0,0,0,438,441,1,0,0,0,439,437,1,0,0,0,439,440,1,0,0,0,440,
        454,1,0,0,0,441,439,1,0,0,0,442,443,5,130,0,0,443,444,5,131,0,0,
        444,449,3,66,33,0,445,446,5,119,0,0,446,447,3,24,12,0,447,448,5,
        120,0,0,448,450,1,0,0,0,449,445,1,0,0,0,449,450,1,0,0,0,450,451,
        1,0,0,0,451,452,3,4,2,0,452,454,1,0,0,0,453,424,1,0,0,0,453,442,
        1,0,0,0,454,37,1,0,0,0,455,456,5,119,0,0,456,461,3,46,23,0,457,458,
        5,116,0,0,458,460,3,46,23,0,459,457,1,0,0,0,460,463,1,0,0,0,461,
        459,1,0,0,0,461,462,1,0,0,0,462,464,1,0,0,0,463,461,1,0,0,0,464,
        465,5,120,0,0,465,39,1,0,0,0,466,467,5,133,0,0,467,468,3,66,33,0,
        468,469,5,134,0,0,469,474,3,42,21,0,470,471,5,116,0,0,471,473,3,
        42,21,0,472,470,1,0,0,0,473,476,1,0,0,0,474,472,1,0,0,0,474,475,
        1,0,0,0,475,479,1,0,0,0,476,474,1,0,0,0,477,478,5,28,0,0,478,480,
        3,80,40,0,479,477,1,0,0,0,479,480,1,0,0,0,480,41,1,0,0,0,481,482,
        5,139,0,0,482,483,5,121,0,0,483,484,3,46,23,0,484,43,1,0,0,0,485,
        486,5,135,0,0,486,487,5,27,0,0,487,490,3,66,33,0,488,489,5,28,0,
        0,489,491,3,80,40,0,490,488,1,0,0,0,490,491,1,0,0,0,491,45,1,0,0,
        0,492,497,5,113,0,0,493,497,5,114,0,0,494,497,5,41,0,0,495,497,3,
        80,40,0,496,492,1,0,0,0,496,493,1,0,0,0,496,494,1,0,0,0,496,495,
        1,0,0,0,497,47,1,0,0,0,498,499,5,26,0,0,499,504,3,50,25,0,500,501,
        5,116,0,0,501,503,3,50,25,0,502,500,1,0,0,0,503,506,1,0,0,0,504,
        502,1,0,0,0,504,505,1,0,0,0,505,49,1,0,0,0,506,504,1,0,0,0,507,508,
        5,139,0,0,508,509,5,38,0,0,509,510,5,119,0,0,510,511,3,4,2,0,511,
        512,5,120,0,0,512,51,1,0,0,0,513,528,3,64,32,0,514,515,3,64,32,0,
        515,516,5,118,0,0,516,517,5,115,0,0,517,528,1,0,0,0,518,519,3,64,
        32,0,519,520,5,118,0,0,520,521,5,139,0,0,521,528,1,0,0,0,522,528,
        5,139,0,0,523,528,3,78,39,0,524,525,5,139,0,0,525,526,5,119,0,0,
        526,528,5,120,0,0,527,513,1,0,0,0,527,514,1,0,0,0,527,518,1,0,0,
        0,527,522,1,0,0,0,527,523,1,0,0,0,527,524,1,0,0,0,528,530,1,0,0,
        0,529,531,3,68,34,0,530,529,1,0,0,0,530,531,1,0,0,0,531,53,1,0,0,
        0,532,535,3,56,28,0,533,535,3,58,29,0,534,532,1,0,0,0,534,533,1,
        0,0,0,535,55,1,0,0,0,536,537,3,60,30,0,537,538,3,64,32,0,538,539,
        5,39,0,0,539,540,3,80,40,0,540,57,1,0,0,0,541,542,3,62,31,0,542,
        543,3,64,32,0,543,59,1,0,0,0,544,545,5,53,0,0,545,554,5,57,0,0,546,
        547,5,54,0,0,547,554,5,57,0,0,548,549,5,55,0,0,549,554,5,57,0,0,
        550,551,5,56,0,0,551,554,5,57,0,0,552,554,5,57,0,0,553,544,1,0,0,
        0,553,546,1,0,0,0,553,548,1,0,0,0,553,550,1,0,0,0,553,552,1,0,0,
        0,554,61,1,0,0,0,555,556,5,44,0,0,556,570,5,57,0,0,557,558,5,44,
        0,0,558,559,5,53,0,0,559,570,5,57,0,0,560,561,5,44,0,0,561,562,5,
        54,0,0,562,570,5,57,0,0,563,564,5,44,0,0,564,565,5,55,0,0,565,570,
        5,57,0,0,566,567,5,44,0,0,567,568,5,56,0,0,568,570,5,57,0,0,569,
        555,1,0,0,0,569,557,1,0,0,0,569,560,1,0,0,0,569,563,1,0,0,0,569,
        566,1,0,0,0,570,63,1,0,0,0,571,573,3,66,33,0,572,574,3,68,34,0,573,
        572,1,0,0,0,573,574,1,0,0,0,574,582,1,0,0,0,575,576,5,119,0,0,576,
        577,3,4,2,0,577,579,5,120,0,0,578,580,3,68,34,0,579,578,1,0,0,0,
        579,580,1,0,0,0,580,582,1,0,0,0,581,571,1,0,0,0,581,575,1,0,0,0,
        582,65,1,0,0,0,583,584,5,139,0,0,584,67,1,0,0,0,585,586,5,38,0,0,
        586,589,5,139,0,0,587,589,5,139,0,0,588,585,1,0,0,0,588,587,1,0,
        0,0,589,69,1,0,0,0,590,591,5,29,0,0,591,592,5,30,0,0,592,597,3,72,
        36,0,593,594,5,116,0,0,594,596,3,72,36,0,595,593,1,0,0,0,596,599,
        1,0,0,0,597,595,1,0,0,0,597,598,1,0,0,0,598,602,1,0,0,0,599,597,
        1,0,0,0,600,601,5,31,0,0,601,603,3,80,40,0,602,600,1,0,0,0,602,603,
        1,0,0,0,603,71,1,0,0,0,604,611,5,139,0,0,605,606,3,64,32,0,606,607,
        5,118,0,0,607,608,5,139,0,0,608,611,1,0,0,0,609,611,3,78,39,0,610,
        604,1,0,0,0,610,605,1,0,0,0,610,609,1,0,0,0,611,73,1,0,0,0,612,613,
        5,32,0,0,613,614,5,30,0,0,614,619,3,76,38,0,615,616,5,116,0,0,616,
        618,3,76,38,0,617,615,1,0,0,0,618,621,1,0,0,0,619,617,1,0,0,0,619,
        620,1,0,0,0,620,75,1,0,0,0,621,619,1,0,0,0,622,624,5,139,0,0,623,
        625,7,1,0,0,624,623,1,0,0,0,624,625,1,0,0,0,625,633,1,0,0,0,626,
        627,3,64,32,0,627,628,5,118,0,0,628,630,5,139,0,0,629,631,7,1,0,
        0,630,629,1,0,0,0,630,631,1,0,0,0,631,633,1,0,0,0,632,622,1,0,0,
        0,632,626,1,0,0,0,633,77,1,0,0,0,634,635,5,58,0,0,635,638,5,119,
        0,0,636,639,5,115,0,0,637,639,3,80,40,0,638,636,1,0,0,0,638,637,
        1,0,0,0,639,640,1,0,0,0,640,707,5,120,0,0,641,642,5,59,0,0,642,643,
        5,119,0,0,643,644,3,80,40,0,644,645,5,120,0,0,645,707,1,0,0,0,646,
        647,5,60,0,0,647,648,5,119,0,0,648,649,3,80,40,0,649,650,5,120,0,
        0,650,707,1,0,0,0,651,652,5,61,0,0,652,653,5,119,0,0,653,654,3,80,
        40,0,654,655,5,120,0,0,655,707,1,0,0,0,656,657,5,62,0,0,657,658,
        5,119,0,0,658,659,3,80,40,0,659,660,5,120,0,0,660,707,1,0,0,0,661,
        662,5,63,0,0,662,663,5,119,0,0,663,664,3,80,40,0,664,665,5,120,0,
        0,665,707,1,0,0,0,666,667,5,64,0,0,667,668,5,119,0,0,668,669,3,80,
        40,0,669,670,5,116,0,0,670,671,5,113,0,0,671,672,5,120,0,0,672,707,
        1,0,0,0,673,674,5,65,0,0,674,675,5,119,0,0,675,676,3,80,40,0,676,
        677,5,120,0,0,677,707,1,0,0,0,678,679,5,66,0,0,679,680,5,119,0,0,
        680,681,3,80,40,0,681,682,5,120,0,0,682,707,1,0,0,0,683,684,5,67,
        0,0,684,685,5,119,0,0,685,686,3,80,40,0,686,687,5,120,0,0,687,707,
        1,0,0,0,688,689,5,68,0,0,689,690,5,119,0,0,690,691,3,80,40,0,691,
        692,5,120,0,0,692,707,1,0,0,0,693,694,5,69,0,0,694,695,5,119,0,0,
        695,696,3,80,40,0,696,697,5,120,0,0,697,707,1,0,0,0,698,699,5,70,
        0,0,699,700,5,119,0,0,700,701,3,80,40,0,701,702,5,120,0,0,702,707,
        1,0,0,0,703,704,5,139,0,0,704,705,5,119,0,0,705,707,5,120,0,0,706,
        634,1,0,0,0,706,641,1,0,0,0,706,646,1,0,0,0,706,651,1,0,0,0,706,
        656,1,0,0,0,706,661,1,0,0,0,706,666,1,0,0,0,706,673,1,0,0,0,706,
        678,1,0,0,0,706,683,1,0,0,0,706,688,1,0,0,0,706,693,1,0,0,0,706,
        698,1,0,0,0,706,703,1,0,0,0,707,79,1,0,0,0,708,709,6,40,-1,0,709,
        710,5,37,0,0,710,768,3,80,40,11,711,768,3,84,42,0,712,713,3,82,41,
        0,713,714,7,2,0,0,714,715,3,82,41,0,715,768,1,0,0,0,716,717,5,139,
        0,0,717,719,5,40,0,0,718,720,5,37,0,0,719,718,1,0,0,0,719,720,1,
        0,0,0,720,721,1,0,0,0,721,768,5,41,0,0,722,723,5,139,0,0,723,724,
        5,42,0,0,724,768,5,113,0,0,725,726,5,139,0,0,726,727,5,43,0,0,727,
        728,3,80,40,0,728,729,5,35,0,0,729,730,3,80,40,6,730,768,1,0,0,0,
        731,732,5,119,0,0,732,733,3,4,2,0,733,734,5,120,0,0,734,768,1,0,
        0,0,735,768,3,88,44,0,736,748,3,82,41,0,737,746,7,2,0,0,738,747,
        3,80,40,0,739,747,5,113,0,0,740,747,5,114,0,0,741,744,5,139,0,0,
        742,743,5,118,0,0,743,745,5,139,0,0,744,742,1,0,0,0,744,745,1,0,
        0,0,745,747,1,0,0,0,746,738,1,0,0,0,746,739,1,0,0,0,746,740,1,0,
        0,0,746,741,1,0,0,0,747,749,1,0,0,0,748,737,1,0,0,0,748,749,1,0,
        0,0,749,768,1,0,0,0,750,751,3,82,41,0,751,752,5,94,0,0,752,753,5,
        119,0,0,753,758,3,82,41,0,754,755,5,116,0,0,755,757,3,82,41,0,756,
        754,1,0,0,0,757,760,1,0,0,0,758,756,1,0,0,0,758,759,1,0,0,0,759,
        761,1,0,0,0,760,758,1,0,0,0,761,762,5,120,0,0,762,768,1,0,0,0,763,
        764,3,82,41,0,764,765,5,42,0,0,765,766,5,113,0,0,766,768,1,0,0,0,
        767,708,1,0,0,0,767,711,1,0,0,0,767,712,1,0,0,0,767,716,1,0,0,0,
        767,722,1,0,0,0,767,725,1,0,0,0,767,731,1,0,0,0,767,735,1,0,0,0,
        767,736,1,0,0,0,767,750,1,0,0,0,767,763,1,0,0,0,768,777,1,0,0,0,
        769,770,10,13,0,0,770,771,5,35,0,0,771,776,3,80,40,14,772,773,10,
        12,0,0,773,774,5,36,0,0,774,776,3,80,40,13,775,769,1,0,0,0,775,772,
        1,0,0,0,776,779,1,0,0,0,777,775,1,0,0,0,777,778,1,0,0,0,778,81,1,
        0,0,0,779,777,1,0,0,0,780,788,5,113,0,0,781,788,5,114,0,0,782,785,
        5,139,0,0,783,784,5,118,0,0,784,786,5,139,0,0,785,783,1,0,0,0,785,
        786,1,0,0,0,786,788,1,0,0,0,787,780,1,0,0,0,787,781,1,0,0,0,787,
        782,1,0,0,0,788,791,1,0,0,0,789,791,3,92,46,0,790,787,1,0,0,0,790,
        789,1,0,0,0,791,83,1,0,0,0,792,793,6,42,-1,0,793,794,3,86,43,0,794,
        809,1,0,0,0,795,796,10,5,0,0,796,797,5,127,0,0,797,808,3,84,42,6,
        798,799,10,4,0,0,799,800,5,128,0,0,800,808,3,84,42,5,801,802,10,
        3,0,0,802,803,5,115,0,0,803,808,3,84,42,4,804,805,10,2,0,0,805,806,
        5,129,0,0,806,808,3,84,42,3,807,795,1,0,0,0,807,798,1,0,0,0,807,
        801,1,0,0,0,807,804,1,0,0,0,808,811,1,0,0,0,809,807,1,0,0,0,809,
        810,1,0,0,0,810,85,1,0,0,0,811,809,1,0,0,0,812,819,5,139,0,0,813,
        819,5,114,0,0,814,815,5,119,0,0,815,816,3,84,42,0,816,817,5,120,
        0,0,817,819,1,0,0,0,818,812,1,0,0,0,818,813,1,0,0,0,818,814,1,0,
        0,0,819,87,1,0,0,0,820,822,5,45,0,0,821,823,3,90,45,0,822,821,1,
        0,0,0,823,824,1,0,0,0,824,822,1,0,0,0,824,825,1,0,0,0,825,831,1,
        0,0,0,826,829,5,48,0,0,827,830,3,80,40,0,828,830,5,41,0,0,829,827,
        1,0,0,0,829,828,1,0,0,0,830,832,1,0,0,0,831,826,1,0,0,0,831,832,
        1,0,0,0,832,833,1,0,0,0,833,834,5,49,0,0,834,89,1,0,0,0,835,836,
        5,46,0,0,836,837,3,80,40,0,837,838,5,47,0,0,838,839,3,80,40,0,839,
        91,1,0,0,0,840,841,5,139,0,0,841,850,5,119,0,0,842,847,3,94,47,0,
        843,844,5,116,0,0,844,846,3,94,47,0,845,843,1,0,0,0,846,849,1,0,
        0,0,847,845,1,0,0,0,847,848,1,0,0,0,848,851,1,0,0,0,849,847,1,0,
        0,0,850,842,1,0,0,0,850,851,1,0,0,0,851,852,1,0,0,0,852,975,5,120,
        0,0,853,854,5,95,0,0,854,855,5,119,0,0,855,856,3,80,40,0,856,857,
        5,120,0,0,857,975,1,0,0,0,858,859,5,96,0,0,859,860,5,119,0,0,860,
        861,3,80,40,0,861,862,5,120,0,0,862,975,1,0,0,0,863,864,5,97,0,0,
        864,865,5,119,0,0,865,866,3,80,40,0,866,867,5,120,0,0,867,975,1,
        0,0,0,868,869,5,98,0,0,869,870,5,119,0,0,870,871,3,80,40,0,871,872,
        5,116,0,0,872,873,5,2,0,0,873,874,5,116,0,0,874,875,5,2,0,0,875,
        876,5,120,0,0,876,975,1,0,0,0,877,878,5,99,0,0,878,879,5,119,0,0,
        879,880,3,80,40,0,880,881,5,120,0,0,881,975,1,0,0,0,882,883,5,100,
        0,0,883,884,5,119,0,0,884,885,3,80,40,0,885,886,5,120,0,0,886,975,
        1,0,0,0,887,888,5,101,0,0,888,889,5,119,0,0,889,890,3,80,40,0,890,
        891,5,120,0,0,891,975,1,0,0,0,892,893,5,102,0,0,893,894,5,119,0,
        0,894,895,3,80,40,0,895,896,5,116,0,0,896,897,5,2,0,0,897,898,5,
        120,0,0,898,975,1,0,0,0,899,900,5,103,0,0,900,901,5,119,0,0,901,
        902,3,80,40,0,902,903,5,120,0,0,903,975,1,0,0,0,904,905,5,104,0,
        0,905,906,5,119,0,0,906,907,3,80,40,0,907,908,5,120,0,0,908,975,
        1,0,0,0,909,910,5,105,0,0,910,911,5,119,0,0,911,912,3,80,40,0,912,
        913,5,120,0,0,913,975,1,0,0,0,914,915,5,106,0,0,915,916,5,119,0,
        0,916,975,5,120,0,0,917,918,5,107,0,0,918,919,5,119,0,0,919,920,
        3,80,40,0,920,921,5,116,0,0,921,922,5,2,0,0,922,923,5,116,0,0,923,
        924,3,80,40,0,924,925,5,120,0,0,925,975,1,0,0,0,926,927,5,108,0,
        0,927,928,5,119,0,0,928,929,3,80,40,0,929,930,5,116,0,0,930,931,
        3,80,40,0,931,932,5,116,0,0,932,933,3,80,40,0,933,934,5,120,0,0,
        934,975,1,0,0,0,935,936,5,109,0,0,936,937,5,119,0,0,937,938,3,80,
        40,0,938,939,5,38,0,0,939,940,3,10,5,0,940,941,5,120,0,0,941,975,
        1,0,0,0,942,943,5,110,0,0,943,944,5,119,0,0,944,945,3,10,5,0,945,
        946,5,116,0,0,946,947,3,80,40,0,947,948,5,120,0,0,948,975,1,0,0,
        0,949,950,5,59,0,0,950,951,5,119,0,0,951,952,3,80,40,0,952,953,5,
        120,0,0,953,975,1,0,0,0,954,955,5,60,0,0,955,956,5,119,0,0,956,957,
        3,80,40,0,957,958,5,120,0,0,958,975,1,0,0,0,959,960,5,58,0,0,960,
        961,5,119,0,0,961,962,3,80,40,0,962,963,5,120,0,0,963,975,1,0,0,
        0,964,965,5,61,0,0,965,966,5,119,0,0,966,967,3,80,40,0,967,968,5,
        120,0,0,968,975,1,0,0,0,969,970,5,62,0,0,970,971,5,119,0,0,971,972,
        3,80,40,0,972,973,5,120,0,0,973,975,1,0,0,0,974,840,1,0,0,0,974,
        853,1,0,0,0,974,858,1,0,0,0,974,863,1,0,0,0,974,868,1,0,0,0,974,
        877,1,0,0,0,974,882,1,0,0,0,974,887,1,0,0,0,974,892,1,0,0,0,974,
        899,1,0,0,0,974,904,1,0,0,0,974,909,1,0,0,0,974,914,1,0,0,0,974,
        917,1,0,0,0,974,926,1,0,0,0,974,935,1,0,0,0,974,942,1,0,0,0,974,
        949,1,0,0,0,974,954,1,0,0,0,974,959,1,0,0,0,974,964,1,0,0,0,974,
        969,1,0,0,0,975,93,1,0,0,0,976,977,3,80,40,0,977,95,1,0,0,0,84,99,
        134,142,146,154,157,165,171,176,179,182,186,191,195,197,202,204,
        212,214,221,272,281,290,300,307,317,327,351,358,363,369,382,391,
        399,411,422,431,439,449,453,461,474,479,490,496,504,527,530,534,
        553,569,573,579,581,588,597,602,610,619,624,630,632,638,706,719,
        744,746,748,758,767,775,777,785,787,790,807,809,818,824,829,831,
        847,850,974
    ]

class PostgreSqlGrammarParser ( Parser ):

    grammarFileName = "PostgreSqlGrammar.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'*'", "','", 
                     "';'", "'.'", "'('", "')'", "'='", "'!='", "'<'", "'<='", 
                     "'>'", "'>='", "'+'", "'-'", "'/'" ]

    symbolicNames = [ "<INVALID>", "VARCHAR", "INT", "NUMERIC", "TEXT", 
                      "DATE", "TIMESTAMP", "BOOL", "SERIAL", "BIGSERIAL", 
                      "UUID", "JSON", "JSONB", "BYTEA", "FLOAT", "REAL", 
                      "DOUBLE", "DECIMAL", "MONEY", "SMALLINT", "BIGINT", 
                      "CHAR", "BIT", "INTERVAL", "AUTOINCREMENT", "SELECT", 
                      "WITH", "FROM", "WHERE", "GROUP", "BY", "HAVING", 
                      "ORDER", "ASC", "DESC", "AND", "OR", "NOT", "AS", 
                      "ON", "IS", "NULL", "LIKE", "BETWEEN", "NATURAL", 
                      "CASE", "WHEN", "THEN", "ELSE", "END", "CREATE", "FUNCTION", 
                      "RETURNS", "INNER", "LEFT", "RIGHT", "FULL", "JOIN", 
                      "COUNT", "SUM", "AVG", "MIN", "MAX", "ARRAY_AGG", 
                      "STRING_AGG", "BOOL_AND", "BOOL_OR", "VAR_POP", "VAR_SAMP", 
                      "STDDEV_POP", "STDDEV_SAMP", "OFFSET", "FETCH", "FIRST", 
                      "ROWS", "ONLY", "DISTINCT", "TABLE", "UNIQUE", "PRIMARY", 
                      "KEY", "DEFAULT", "FOREIGN", "REFERENCES", "INDEX", 
                      "DROP", "ALTER", "RENAME", "CONSTRAINT", "TO", "ADD", 
                      "COLUMN", "DATABASE", "LIMIT", "IN", "LEN", "UPPER", 
                      "LOWER", "SUBSTRING", "ABS", "CEILING", "FLOOR", "ROUND", 
                      "YEAR", "MONTH", "DAY", "GETDATE", "DATEADD", "DATEDIFF", 
                      "CAST", "CONVERT", "IF", "EXISTS", "STRING", "NUMBER", 
                      "STAR", "COMMA", "SEMI", "DOT", "LPAREN", "RPAREN", 
                      "EQ", "NEQ", "LT", "LTE", "GT", "GTE", "PLUS", "MINUS", 
                      "SLASH", "INSERT", "INTO", "VALUES", "UPDATE", "SET", 
                      "DELETE", "LINE_COMMENT", "BLOCK_COMMENT", "WS", "ID" ]

    RULE_initial = 0
    RULE_sql_stmt = 1
    RULE_select_stmt = 2
    RULE_limit_offset_clause = 3
    RULE_function_stmt = 4
    RULE_data_type = 5
    RULE_function_params = 6
    RULE_func_body = 7
    RULE_create_table_stmt = 8
    RULE_column_def = 9
    RULE_column_constraint = 10
    RULE_table_constraint = 11
    RULE_column_list = 12
    RULE_create_index_stmt = 13
    RULE_create_database_stmt = 14
    RULE_drop_stmt = 15
    RULE_alter_table_stmt = 16
    RULE_alter_table_action = 17
    RULE_insert_stmt = 18
    RULE_insert_values = 19
    RULE_update_stmt = 20
    RULE_update_assignment = 21
    RULE_delete_stmt = 22
    RULE_value = 23
    RULE_with_clause = 24
    RULE_cte = 25
    RULE_result_column = 26
    RULE_join_clause = 27
    RULE_standard_join = 28
    RULE_natural_join = 29
    RULE_join_type = 30
    RULE_natural_join_type = 31
    RULE_table_reference = 32
    RULE_table_name = 33
    RULE_alias = 34
    RULE_group_by_clause = 35
    RULE_group_by_item = 36
    RULE_order_by_clause = 37
    RULE_order_by_item = 38
    RULE_agg_func = 39
    RULE_expr = 40
    RULE_comparatorExpr = 41
    RULE_arith_expr = 42
    RULE_atom = 43
    RULE_case_expr = 44
    RULE_when_clause = 45
    RULE_function_call = 46
    RULE_function_arg = 47

    ruleNames =  [ "initial", "sql_stmt", "select_stmt", "limit_offset_clause", 
                   "function_stmt", "data_type", "function_params", "func_body", 
                   "create_table_stmt", "column_def", "column_constraint", 
                   "table_constraint", "column_list", "create_index_stmt", 
                   "create_database_stmt", "drop_stmt", "alter_table_stmt", 
                   "alter_table_action", "insert_stmt", "insert_values", 
                   "update_stmt", "update_assignment", "delete_stmt", "value", 
                   "with_clause", "cte", "result_column", "join_clause", 
                   "standard_join", "natural_join", "join_type", "natural_join_type", 
                   "table_reference", "table_name", "alias", "group_by_clause", 
                   "group_by_item", "order_by_clause", "order_by_item", 
                   "agg_func", "expr", "comparatorExpr", "arith_expr", "atom", 
                   "case_expr", "when_clause", "function_call", "function_arg" ]

    EOF = Token.EOF
    VARCHAR=1
    INT=2
    NUMERIC=3
    TEXT=4
    DATE=5
    TIMESTAMP=6
    BOOL=7
    SERIAL=8
    BIGSERIAL=9
    UUID=10
    JSON=11
    JSONB=12
    BYTEA=13
    FLOAT=14
    REAL=15
    DOUBLE=16
    DECIMAL=17
    MONEY=18
    SMALLINT=19
    BIGINT=20
    CHAR=21
    BIT=22
    INTERVAL=23
    AUTOINCREMENT=24
    SELECT=25
    WITH=26
    FROM=27
    WHERE=28
    GROUP=29
    BY=30
    HAVING=31
    ORDER=32
    ASC=33
    DESC=34
    AND=35
    OR=36
    NOT=37
    AS=38
    ON=39
    IS=40
    NULL=41
    LIKE=42
    BETWEEN=43
    NATURAL=44
    CASE=45
    WHEN=46
    THEN=47
    ELSE=48
    END=49
    CREATE=50
    FUNCTION=51
    RETURNS=52
    INNER=53
    LEFT=54
    RIGHT=55
    FULL=56
    JOIN=57
    COUNT=58
    SUM=59
    AVG=60
    MIN=61
    MAX=62
    ARRAY_AGG=63
    STRING_AGG=64
    BOOL_AND=65
    BOOL_OR=66
    VAR_POP=67
    VAR_SAMP=68
    STDDEV_POP=69
    STDDEV_SAMP=70
    OFFSET=71
    FETCH=72
    FIRST=73
    ROWS=74
    ONLY=75
    DISTINCT=76
    TABLE=77
    UNIQUE=78
    PRIMARY=79
    KEY=80
    DEFAULT=81
    FOREIGN=82
    REFERENCES=83
    INDEX=84
    DROP=85
    ALTER=86
    RENAME=87
    CONSTRAINT=88
    TO=89
    ADD=90
    COLUMN=91
    DATABASE=92
    LIMIT=93
    IN=94
    LEN=95
    UPPER=96
    LOWER=97
    SUBSTRING=98
    ABS=99
    CEILING=100
    FLOOR=101
    ROUND=102
    YEAR=103
    MONTH=104
    DAY=105
    GETDATE=106
    DATEADD=107
    DATEDIFF=108
    CAST=109
    CONVERT=110
    IF=111
    EXISTS=112
    STRING=113
    NUMBER=114
    STAR=115
    COMMA=116
    SEMI=117
    DOT=118
    LPAREN=119
    RPAREN=120
    EQ=121
    NEQ=122
    LT=123
    LTE=124
    GT=125
    GTE=126
    PLUS=127
    MINUS=128
    SLASH=129
    INSERT=130
    INTO=131
    VALUES=132
    UPDATE=133
    SET=134
    DELETE=135
    LINE_COMMENT=136
    BLOCK_COMMENT=137
    WS=138
    ID=139

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class InitialContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(PostgreSqlGrammarParser.EOF, 0)

        def sql_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Sql_stmtContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Sql_stmtContext,i)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_initial

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitial" ):
                listener.enterInitial(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitial" ):
                listener.exitInitial(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitial" ):
                return visitor.visitInitial(self)
            else:
                return visitor.visitChildren(self)




    def initial(self):

        localctx = PostgreSqlGrammarParser.InitialContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_initial)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 99
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1125900007505920) != 0) or ((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & 1442576435511299) != 0):
                self.state = 96
                self.sql_stmt()
                self.state = 101
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 102
            self.match(PostgreSqlGrammarParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Select_stmtContext,0)


        def SEMI(self):
            return self.getToken(PostgreSqlGrammarParser.SEMI, 0)

        def function_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Function_stmtContext,0)


        def create_table_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Create_table_stmtContext,0)


        def create_index_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Create_index_stmtContext,0)


        def create_database_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Create_database_stmtContext,0)


        def drop_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Drop_stmtContext,0)


        def alter_table_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Alter_table_stmtContext,0)


        def insert_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Insert_stmtContext,0)


        def update_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Update_stmtContext,0)


        def delete_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Delete_stmtContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_sql_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_stmt" ):
                listener.enterSql_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_stmt" ):
                listener.exitSql_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql_stmt" ):
                return visitor.visitSql_stmt(self)
            else:
                return visitor.visitChildren(self)




    def sql_stmt(self):

        localctx = PostgreSqlGrammarParser.Sql_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_sql_stmt)
        try:
            self.state = 134
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 104
                self.select_stmt()
                self.state = 105
                self.match(PostgreSqlGrammarParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 107
                self.function_stmt()
                self.state = 108
                self.match(PostgreSqlGrammarParser.SEMI)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 110
                self.create_table_stmt()
                self.state = 111
                self.match(PostgreSqlGrammarParser.SEMI)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 113
                self.create_index_stmt()
                self.state = 114
                self.match(PostgreSqlGrammarParser.SEMI)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 116
                self.create_database_stmt()
                self.state = 117
                self.match(PostgreSqlGrammarParser.SEMI)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 119
                self.drop_stmt()
                self.state = 120
                self.match(PostgreSqlGrammarParser.SEMI)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 122
                self.alter_table_stmt()
                self.state = 123
                self.match(PostgreSqlGrammarParser.SEMI)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 125
                self.insert_stmt()
                self.state = 126
                self.match(PostgreSqlGrammarParser.SEMI)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 128
                self.update_stmt()
                self.state = 129
                self.match(PostgreSqlGrammarParser.SEMI)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 131
                self.delete_stmt()
                self.state = 132
                self.match(PostgreSqlGrammarParser.SEMI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.LPAREN, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Select_stmtContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.RPAREN, 0)

        def SELECT(self):
            return self.getToken(PostgreSqlGrammarParser.SELECT, 0)

        def FROM(self):
            return self.getToken(PostgreSqlGrammarParser.FROM, 0)

        def table_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Table_referenceContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_referenceContext,i)


        def limit_offset_clause(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Limit_offset_clauseContext,0)


        def STAR(self):
            return self.getToken(PostgreSqlGrammarParser.STAR, 0)

        def WITH(self):
            return self.getToken(PostgreSqlGrammarParser.WITH, 0)

        def with_clause(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.With_clauseContext,0)


        def DISTINCT(self):
            return self.getToken(PostgreSqlGrammarParser.DISTINCT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.COMMA)
            else:
                return self.getToken(PostgreSqlGrammarParser.COMMA, i)

        def join_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Join_clauseContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Join_clauseContext,i)


        def WHERE(self):
            return self.getToken(PostgreSqlGrammarParser.WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,0)


        def group_by_clause(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Group_by_clauseContext,0)


        def order_by_clause(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Order_by_clauseContext,0)


        def result_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Result_columnContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Result_columnContext,i)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_stmt" ):
                listener.enterSelect_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_stmt" ):
                listener.exitSelect_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_stmt" ):
                return visitor.visitSelect_stmt(self)
            else:
                return visitor.visitChildren(self)




    def select_stmt(self):

        localctx = PostgreSqlGrammarParser.Select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_select_stmt)
        self._la = 0 # Token type
        try:
            self.state = 186
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [119]:
                self.enterOuterAlt(localctx, 1)
                self.state = 136
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 137
                self.select_stmt()
                self.state = 138
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [25, 26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 142
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==26:
                    self.state = 140
                    self.match(PostgreSqlGrammarParser.WITH)
                    self.state = 141
                    self.with_clause()


                self.state = 144
                self.match(PostgreSqlGrammarParser.SELECT)
                self.state = 146
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==76:
                    self.state = 145
                    self.match(PostgreSqlGrammarParser.DISTINCT)


                self.state = 157
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [115]:
                    self.state = 148
                    self.match(PostgreSqlGrammarParser.STAR)
                    pass
                elif token in [58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 119, 139]:
                    self.state = 149
                    self.result_column()
                    self.state = 154
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==116:
                        self.state = 150
                        self.match(PostgreSqlGrammarParser.COMMA)
                        self.state = 151
                        self.result_column()
                        self.state = 156
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 159
                self.match(PostgreSqlGrammarParser.FROM)
                self.state = 160
                self.table_reference()
                self.state = 165
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==116:
                    self.state = 161
                    self.match(PostgreSqlGrammarParser.COMMA)
                    self.state = 162
                    self.table_reference()
                    self.state = 167
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 171
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 279240769083015168) != 0):
                    self.state = 168
                    self.join_clause()
                    self.state = 173
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 176
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==28:
                    self.state = 174
                    self.match(PostgreSqlGrammarParser.WHERE)
                    self.state = 175
                    self.expr(0)


                self.state = 179
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==29:
                    self.state = 178
                    self.group_by_clause()


                self.state = 182
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==32:
                    self.state = 181
                    self.order_by_clause()


                self.state = 184
                self.limit_offset_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Limit_offset_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(PostgreSqlGrammarParser.LIMIT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.ExprContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,i)


        def NUMBER(self):
            return self.getToken(PostgreSqlGrammarParser.NUMBER, 0)

        def OFFSET(self):
            return self.getToken(PostgreSqlGrammarParser.OFFSET, 0)

        def FETCH(self):
            return self.getToken(PostgreSqlGrammarParser.FETCH, 0)

        def FIRST(self):
            return self.getToken(PostgreSqlGrammarParser.FIRST, 0)

        def ROWS(self):
            return self.getToken(PostgreSqlGrammarParser.ROWS, 0)

        def ONLY(self):
            return self.getToken(PostgreSqlGrammarParser.ONLY, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_limit_offset_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit_offset_clause" ):
                listener.enterLimit_offset_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit_offset_clause" ):
                listener.exitLimit_offset_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimit_offset_clause" ):
                return visitor.visitLimit_offset_clause(self)
            else:
                return visitor.visitChildren(self)




    def limit_offset_clause(self):

        localctx = PostgreSqlGrammarParser.Limit_offset_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_limit_offset_clause)
        self._la = 0 # Token type
        try:
            self.state = 214
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 197
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==93:
                    self.state = 188
                    self.match(PostgreSqlGrammarParser.LIMIT)
                    self.state = 191
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                    if la_ == 1:
                        self.state = 189
                        self.expr(0)
                        pass

                    elif la_ == 2:
                        self.state = 190
                        self.match(PostgreSqlGrammarParser.NUMBER)
                        pass


                    self.state = 195
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==71:
                        self.state = 193
                        self.match(PostgreSqlGrammarParser.OFFSET)
                        self.state = 194
                        self.expr(0)




                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 204
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==71:
                    self.state = 199
                    self.match(PostgreSqlGrammarParser.OFFSET)
                    self.state = 202
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                    if la_ == 1:
                        self.state = 200
                        self.expr(0)
                        pass

                    elif la_ == 2:
                        self.state = 201
                        self.match(PostgreSqlGrammarParser.NUMBER)
                        pass




                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 212
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==72:
                    self.state = 206
                    self.match(PostgreSqlGrammarParser.FETCH)
                    self.state = 207
                    self.match(PostgreSqlGrammarParser.FIRST)
                    self.state = 208
                    self.expr(0)
                    self.state = 209
                    self.match(PostgreSqlGrammarParser.ROWS)
                    self.state = 210
                    self.match(PostgreSqlGrammarParser.ONLY)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSqlGrammarParser.CREATE, 0)

        def FUNCTION(self):
            return self.getToken(PostgreSqlGrammarParser.FUNCTION, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.ID)
            else:
                return self.getToken(PostgreSqlGrammarParser.ID, i)

        def LPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.RPAREN, 0)

        def RETURNS(self):
            return self.getToken(PostgreSqlGrammarParser.RETURNS, 0)

        def AS(self):
            return self.getToken(PostgreSqlGrammarParser.AS, 0)

        def func_body(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Func_bodyContext,0)


        def function_params(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Function_paramsContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_function_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_stmt" ):
                listener.enterFunction_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_stmt" ):
                listener.exitFunction_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_stmt" ):
                return visitor.visitFunction_stmt(self)
            else:
                return visitor.visitChildren(self)




    def function_stmt(self):

        localctx = PostgreSqlGrammarParser.Function_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_function_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 216
            self.match(PostgreSqlGrammarParser.CREATE)
            self.state = 217
            self.match(PostgreSqlGrammarParser.FUNCTION)
            self.state = 218
            self.match(PostgreSqlGrammarParser.ID)
            self.state = 219
            self.match(PostgreSqlGrammarParser.LPAREN)
            self.state = 221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==139:
                self.state = 220
                self.function_params()


            self.state = 223
            self.match(PostgreSqlGrammarParser.RPAREN)
            self.state = 224
            self.match(PostgreSqlGrammarParser.RETURNS)
            self.state = 225
            self.match(PostgreSqlGrammarParser.ID)
            self.state = 226
            self.match(PostgreSqlGrammarParser.AS)
            self.state = 227
            self.func_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARCHAR(self):
            return self.getToken(PostgreSqlGrammarParser.VARCHAR, 0)

        def LPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.LPAREN, 0)

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.NUMBER)
            else:
                return self.getToken(PostgreSqlGrammarParser.NUMBER, i)

        def RPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.RPAREN, 0)

        def INT(self):
            return self.getToken(PostgreSqlGrammarParser.INT, 0)

        def NUMERIC(self):
            return self.getToken(PostgreSqlGrammarParser.NUMERIC, 0)

        def COMMA(self):
            return self.getToken(PostgreSqlGrammarParser.COMMA, 0)

        def TEXT(self):
            return self.getToken(PostgreSqlGrammarParser.TEXT, 0)

        def DATE(self):
            return self.getToken(PostgreSqlGrammarParser.DATE, 0)

        def TIMESTAMP(self):
            return self.getToken(PostgreSqlGrammarParser.TIMESTAMP, 0)

        def BOOL(self):
            return self.getToken(PostgreSqlGrammarParser.BOOL, 0)

        def SERIAL(self):
            return self.getToken(PostgreSqlGrammarParser.SERIAL, 0)

        def BIGSERIAL(self):
            return self.getToken(PostgreSqlGrammarParser.BIGSERIAL, 0)

        def UUID(self):
            return self.getToken(PostgreSqlGrammarParser.UUID, 0)

        def JSON(self):
            return self.getToken(PostgreSqlGrammarParser.JSON, 0)

        def JSONB(self):
            return self.getToken(PostgreSqlGrammarParser.JSONB, 0)

        def BYTEA(self):
            return self.getToken(PostgreSqlGrammarParser.BYTEA, 0)

        def FLOAT(self):
            return self.getToken(PostgreSqlGrammarParser.FLOAT, 0)

        def REAL(self):
            return self.getToken(PostgreSqlGrammarParser.REAL, 0)

        def DOUBLE(self):
            return self.getToken(PostgreSqlGrammarParser.DOUBLE, 0)

        def DECIMAL(self):
            return self.getToken(PostgreSqlGrammarParser.DECIMAL, 0)

        def MONEY(self):
            return self.getToken(PostgreSqlGrammarParser.MONEY, 0)

        def SMALLINT(self):
            return self.getToken(PostgreSqlGrammarParser.SMALLINT, 0)

        def BIGINT(self):
            return self.getToken(PostgreSqlGrammarParser.BIGINT, 0)

        def CHAR(self):
            return self.getToken(PostgreSqlGrammarParser.CHAR, 0)

        def BIT(self):
            return self.getToken(PostgreSqlGrammarParser.BIT, 0)

        def INTERVAL(self):
            return self.getToken(PostgreSqlGrammarParser.INTERVAL, 0)

        def AUTOINCREMENT(self):
            return self.getToken(PostgreSqlGrammarParser.AUTOINCREMENT, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_type" ):
                listener.enterData_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_type" ):
                listener.exitData_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitData_type" ):
                return visitor.visitData_type(self)
            else:
                return visitor.visitChildren(self)




    def data_type(self):

        localctx = PostgreSqlGrammarParser.Data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_data_type)
        try:
            self.state = 272
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1]:
                self.enterOuterAlt(localctx, 1)
                self.state = 229
                self.match(PostgreSqlGrammarParser.VARCHAR)
                self.state = 230
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 231
                self.match(PostgreSqlGrammarParser.NUMBER)
                self.state = 232
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 233
                self.match(PostgreSqlGrammarParser.INT)
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 3)
                self.state = 234
                self.match(PostgreSqlGrammarParser.NUMERIC)
                self.state = 235
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 236
                self.match(PostgreSqlGrammarParser.NUMBER)
                self.state = 237
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 238
                self.match(PostgreSqlGrammarParser.NUMBER)
                self.state = 239
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [4]:
                self.enterOuterAlt(localctx, 4)
                self.state = 240
                self.match(PostgreSqlGrammarParser.TEXT)
                pass
            elif token in [5]:
                self.enterOuterAlt(localctx, 5)
                self.state = 241
                self.match(PostgreSqlGrammarParser.DATE)
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 6)
                self.state = 242
                self.match(PostgreSqlGrammarParser.TIMESTAMP)
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 7)
                self.state = 243
                self.match(PostgreSqlGrammarParser.BOOL)
                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 8)
                self.state = 244
                self.match(PostgreSqlGrammarParser.SERIAL)
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 9)
                self.state = 245
                self.match(PostgreSqlGrammarParser.BIGSERIAL)
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 10)
                self.state = 246
                self.match(PostgreSqlGrammarParser.UUID)
                pass
            elif token in [11]:
                self.enterOuterAlt(localctx, 11)
                self.state = 247
                self.match(PostgreSqlGrammarParser.JSON)
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 12)
                self.state = 248
                self.match(PostgreSqlGrammarParser.JSONB)
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 13)
                self.state = 249
                self.match(PostgreSqlGrammarParser.BYTEA)
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 14)
                self.state = 250
                self.match(PostgreSqlGrammarParser.FLOAT)
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 15)
                self.state = 251
                self.match(PostgreSqlGrammarParser.REAL)
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 16)
                self.state = 252
                self.match(PostgreSqlGrammarParser.DOUBLE)
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 17)
                self.state = 253
                self.match(PostgreSqlGrammarParser.DECIMAL)
                self.state = 254
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 255
                self.match(PostgreSqlGrammarParser.NUMBER)
                self.state = 256
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 257
                self.match(PostgreSqlGrammarParser.NUMBER)
                self.state = 258
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 18)
                self.state = 259
                self.match(PostgreSqlGrammarParser.MONEY)
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 19)
                self.state = 260
                self.match(PostgreSqlGrammarParser.SMALLINT)
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 20)
                self.state = 261
                self.match(PostgreSqlGrammarParser.BIGINT)
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 21)
                self.state = 262
                self.match(PostgreSqlGrammarParser.CHAR)
                self.state = 263
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 264
                self.match(PostgreSqlGrammarParser.NUMBER)
                self.state = 265
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 22)
                self.state = 266
                self.match(PostgreSqlGrammarParser.BIT)
                self.state = 267
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 268
                self.match(PostgreSqlGrammarParser.NUMBER)
                self.state = 269
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 23)
                self.state = 270
                self.match(PostgreSqlGrammarParser.INTERVAL)
                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 24)
                self.state = 271
                self.match(PostgreSqlGrammarParser.AUTOINCREMENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_paramsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.ID)
            else:
                return self.getToken(PostgreSqlGrammarParser.ID, i)

        def data_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Data_typeContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Data_typeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.COMMA)
            else:
                return self.getToken(PostgreSqlGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_function_params

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_params" ):
                listener.enterFunction_params(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_params" ):
                listener.exitFunction_params(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_params" ):
                return visitor.visitFunction_params(self)
            else:
                return visitor.visitChildren(self)




    def function_params(self):

        localctx = PostgreSqlGrammarParser.Function_paramsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_function_params)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 274
            self.match(PostgreSqlGrammarParser.ID)
            self.state = 275
            self.data_type()
            self.state = 281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==116:
                self.state = 276
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 277
                self.match(PostgreSqlGrammarParser.ID)
                self.state = 278
                self.data_type()
                self.state = 283
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_func_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_body" ):
                listener.enterFunc_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_body" ):
                listener.exitFunc_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_body" ):
                return visitor.visitFunc_body(self)
            else:
                return visitor.visitChildren(self)




    def func_body(self):

        localctx = PostgreSqlGrammarParser.Func_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_func_body)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 284
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_table_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSqlGrammarParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(PostgreSqlGrammarParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_nameContext,0)


        def LPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.LPAREN, 0)

        def column_def(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Column_defContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Column_defContext,i)


        def RPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.RPAREN, 0)

        def IF(self):
            return self.getToken(PostgreSqlGrammarParser.IF, 0)

        def NOT(self):
            return self.getToken(PostgreSqlGrammarParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(PostgreSqlGrammarParser.EXISTS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.COMMA)
            else:
                return self.getToken(PostgreSqlGrammarParser.COMMA, i)

        def table_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Table_constraintContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_constraintContext,i)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_create_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table_stmt" ):
                listener.enterCreate_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table_stmt" ):
                listener.exitCreate_table_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_table_stmt" ):
                return visitor.visitCreate_table_stmt(self)
            else:
                return visitor.visitChildren(self)




    def create_table_stmt(self):

        localctx = PostgreSqlGrammarParser.Create_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_create_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 286
            self.match(PostgreSqlGrammarParser.CREATE)
            self.state = 290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 287
                self.match(PostgreSqlGrammarParser.IF)
                self.state = 288
                self.match(PostgreSqlGrammarParser.NOT)
                self.state = 289
                self.match(PostgreSqlGrammarParser.EXISTS)


            self.state = 292
            self.match(PostgreSqlGrammarParser.TABLE)
            self.state = 293
            self.table_name()
            self.state = 294
            self.match(PostgreSqlGrammarParser.LPAREN)
            self.state = 295
            self.column_def()
            self.state = 300
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 296
                    self.match(PostgreSqlGrammarParser.COMMA)
                    self.state = 297
                    self.column_def() 
                self.state = 302
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

            self.state = 307
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==116:
                self.state = 303
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 304
                self.table_constraint()
                self.state = 309
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 310
            self.match(PostgreSqlGrammarParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def data_type(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Data_typeContext,0)


        def column_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Column_constraintContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Column_constraintContext,i)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_column_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_def" ):
                listener.enterColumn_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_def" ):
                listener.exitColumn_def(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_def" ):
                return visitor.visitColumn_def(self)
            else:
                return visitor.visitChildren(self)




    def column_def(self):

        localctx = PostgreSqlGrammarParser.Column_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_column_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 312
            self.match(PostgreSqlGrammarParser.ID)
            self.state = 313
            self.data_type()
            self.state = 317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & 24189255811073) != 0):
                self.state = 314
                self.column_constraint()
                self.state = 319
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(PostgreSqlGrammarParser.NOT, 0)

        def NULL(self):
            return self.getToken(PostgreSqlGrammarParser.NULL, 0)

        def UNIQUE(self):
            return self.getToken(PostgreSqlGrammarParser.UNIQUE, 0)

        def PRIMARY(self):
            return self.getToken(PostgreSqlGrammarParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(PostgreSqlGrammarParser.KEY, 0)

        def DEFAULT(self):
            return self.getToken(PostgreSqlGrammarParser.DEFAULT, 0)

        def expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_column_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_constraint" ):
                listener.enterColumn_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_constraint" ):
                listener.exitColumn_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_constraint" ):
                return visitor.visitColumn_constraint(self)
            else:
                return visitor.visitChildren(self)




    def column_constraint(self):

        localctx = PostgreSqlGrammarParser.Column_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_column_constraint)
        try:
            self.state = 327
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [37]:
                self.enterOuterAlt(localctx, 1)
                self.state = 320
                self.match(PostgreSqlGrammarParser.NOT)
                self.state = 321
                self.match(PostgreSqlGrammarParser.NULL)
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 2)
                self.state = 322
                self.match(PostgreSqlGrammarParser.UNIQUE)
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 3)
                self.state = 323
                self.match(PostgreSqlGrammarParser.PRIMARY)
                self.state = 324
                self.match(PostgreSqlGrammarParser.KEY)
                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 4)
                self.state = 325
                self.match(PostgreSqlGrammarParser.DEFAULT)
                self.state = 326
                self.expr(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIMARY(self):
            return self.getToken(PostgreSqlGrammarParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(PostgreSqlGrammarParser.KEY, 0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.LPAREN)
            else:
                return self.getToken(PostgreSqlGrammarParser.LPAREN, i)

        def column_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Column_listContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Column_listContext,i)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.RPAREN)
            else:
                return self.getToken(PostgreSqlGrammarParser.RPAREN, i)

        def UNIQUE(self):
            return self.getToken(PostgreSqlGrammarParser.UNIQUE, 0)

        def FOREIGN(self):
            return self.getToken(PostgreSqlGrammarParser.FOREIGN, 0)

        def REFERENCES(self):
            return self.getToken(PostgreSqlGrammarParser.REFERENCES, 0)

        def table_name(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_nameContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_table_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_constraint" ):
                listener.enterTable_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_constraint" ):
                listener.exitTable_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_constraint" ):
                return visitor.visitTable_constraint(self)
            else:
                return visitor.visitChildren(self)




    def table_constraint(self):

        localctx = PostgreSqlGrammarParser.Table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_table_constraint)
        try:
            self.state = 351
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [79]:
                self.enterOuterAlt(localctx, 1)
                self.state = 329
                self.match(PostgreSqlGrammarParser.PRIMARY)
                self.state = 330
                self.match(PostgreSqlGrammarParser.KEY)
                self.state = 331
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 332
                self.column_list()
                self.state = 333
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 2)
                self.state = 335
                self.match(PostgreSqlGrammarParser.UNIQUE)
                self.state = 336
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 337
                self.column_list()
                self.state = 338
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 3)
                self.state = 340
                self.match(PostgreSqlGrammarParser.FOREIGN)
                self.state = 341
                self.match(PostgreSqlGrammarParser.KEY)
                self.state = 342
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 343
                self.column_list()
                self.state = 344
                self.match(PostgreSqlGrammarParser.RPAREN)
                self.state = 345
                self.match(PostgreSqlGrammarParser.REFERENCES)
                self.state = 346
                self.table_name()
                self.state = 347
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 348
                self.column_list()
                self.state = 349
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.ID)
            else:
                return self.getToken(PostgreSqlGrammarParser.ID, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.COMMA)
            else:
                return self.getToken(PostgreSqlGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_list" ):
                listener.enterColumn_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_list" ):
                listener.exitColumn_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_list" ):
                return visitor.visitColumn_list(self)
            else:
                return visitor.visitChildren(self)




    def column_list(self):

        localctx = PostgreSqlGrammarParser.Column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_column_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 353
            self.match(PostgreSqlGrammarParser.ID)
            self.state = 358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==116:
                self.state = 354
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 355
                self.match(PostgreSqlGrammarParser.ID)
                self.state = 360
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_index_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSqlGrammarParser.CREATE, 0)

        def INDEX(self):
            return self.getToken(PostgreSqlGrammarParser.INDEX, 0)

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def ON(self):
            return self.getToken(PostgreSqlGrammarParser.ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_nameContext,0)


        def LPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.LPAREN, 0)

        def column_list(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Column_listContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.RPAREN, 0)

        def UNIQUE(self):
            return self.getToken(PostgreSqlGrammarParser.UNIQUE, 0)

        def IF(self):
            return self.getToken(PostgreSqlGrammarParser.IF, 0)

        def NOT(self):
            return self.getToken(PostgreSqlGrammarParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(PostgreSqlGrammarParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_create_index_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_index_stmt" ):
                listener.enterCreate_index_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_index_stmt" ):
                listener.exitCreate_index_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_index_stmt" ):
                return visitor.visitCreate_index_stmt(self)
            else:
                return visitor.visitChildren(self)




    def create_index_stmt(self):

        localctx = PostgreSqlGrammarParser.Create_index_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_create_index_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 361
            self.match(PostgreSqlGrammarParser.CREATE)
            self.state = 363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 362
                self.match(PostgreSqlGrammarParser.UNIQUE)


            self.state = 365
            self.match(PostgreSqlGrammarParser.INDEX)
            self.state = 369
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 366
                self.match(PostgreSqlGrammarParser.IF)
                self.state = 367
                self.match(PostgreSqlGrammarParser.NOT)
                self.state = 368
                self.match(PostgreSqlGrammarParser.EXISTS)


            self.state = 371
            self.match(PostgreSqlGrammarParser.ID)
            self.state = 372
            self.match(PostgreSqlGrammarParser.ON)
            self.state = 373
            self.table_name()
            self.state = 374
            self.match(PostgreSqlGrammarParser.LPAREN)
            self.state = 375
            self.column_list()
            self.state = 376
            self.match(PostgreSqlGrammarParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_database_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSqlGrammarParser.CREATE, 0)

        def DATABASE(self):
            return self.getToken(PostgreSqlGrammarParser.DATABASE, 0)

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def IF(self):
            return self.getToken(PostgreSqlGrammarParser.IF, 0)

        def NOT(self):
            return self.getToken(PostgreSqlGrammarParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(PostgreSqlGrammarParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_create_database_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_database_stmt" ):
                listener.enterCreate_database_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_database_stmt" ):
                listener.exitCreate_database_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_database_stmt" ):
                return visitor.visitCreate_database_stmt(self)
            else:
                return visitor.visitChildren(self)




    def create_database_stmt(self):

        localctx = PostgreSqlGrammarParser.Create_database_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_create_database_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 378
            self.match(PostgreSqlGrammarParser.CREATE)
            self.state = 382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 379
                self.match(PostgreSqlGrammarParser.IF)
                self.state = 380
                self.match(PostgreSqlGrammarParser.NOT)
                self.state = 381
                self.match(PostgreSqlGrammarParser.EXISTS)


            self.state = 384
            self.match(PostgreSqlGrammarParser.DATABASE)
            self.state = 385
            self.match(PostgreSqlGrammarParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PostgreSqlGrammarParser.DROP, 0)

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def TABLE(self):
            return self.getToken(PostgreSqlGrammarParser.TABLE, 0)

        def INDEX(self):
            return self.getToken(PostgreSqlGrammarParser.INDEX, 0)

        def DATABASE(self):
            return self.getToken(PostgreSqlGrammarParser.DATABASE, 0)

        def FUNCTION(self):
            return self.getToken(PostgreSqlGrammarParser.FUNCTION, 0)

        def IF(self):
            return self.getToken(PostgreSqlGrammarParser.IF, 0)

        def EXISTS(self):
            return self.getToken(PostgreSqlGrammarParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_drop_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_stmt" ):
                listener.enterDrop_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_stmt" ):
                listener.exitDrop_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_stmt" ):
                return visitor.visitDrop_stmt(self)
            else:
                return visitor.visitChildren(self)




    def drop_stmt(self):

        localctx = PostgreSqlGrammarParser.Drop_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_drop_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 387
            self.match(PostgreSqlGrammarParser.DROP)
            self.state = 388
            _la = self._input.LA(1)
            if not(((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 2207680299009) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 389
                self.match(PostgreSqlGrammarParser.IF)
                self.state = 390
                self.match(PostgreSqlGrammarParser.EXISTS)


            self.state = 393
            self.match(PostgreSqlGrammarParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSqlGrammarParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(PostgreSqlGrammarParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_nameContext,0)


        def alter_table_action(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Alter_table_actionContext,0)


        def IF(self):
            return self.getToken(PostgreSqlGrammarParser.IF, 0)

        def EXISTS(self):
            return self.getToken(PostgreSqlGrammarParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_alter_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_stmt" ):
                listener.enterAlter_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_stmt" ):
                listener.exitAlter_table_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_table_stmt" ):
                return visitor.visitAlter_table_stmt(self)
            else:
                return visitor.visitChildren(self)




    def alter_table_stmt(self):

        localctx = PostgreSqlGrammarParser.Alter_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_alter_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 395
            self.match(PostgreSqlGrammarParser.ALTER)
            self.state = 396
            self.match(PostgreSqlGrammarParser.TABLE)
            self.state = 399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 397
                self.match(PostgreSqlGrammarParser.IF)
                self.state = 398
                self.match(PostgreSqlGrammarParser.EXISTS)


            self.state = 401
            self.table_name()
            self.state = 402
            self.alter_table_action()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(PostgreSqlGrammarParser.ADD, 0)

        def COLUMN(self):
            return self.getToken(PostgreSqlGrammarParser.COLUMN, 0)

        def column_def(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Column_defContext,0)


        def DROP(self):
            return self.getToken(PostgreSqlGrammarParser.DROP, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.ID)
            else:
                return self.getToken(PostgreSqlGrammarParser.ID, i)

        def IF(self):
            return self.getToken(PostgreSqlGrammarParser.IF, 0)

        def EXISTS(self):
            return self.getToken(PostgreSqlGrammarParser.EXISTS, 0)

        def RENAME(self):
            return self.getToken(PostgreSqlGrammarParser.RENAME, 0)

        def TO(self):
            return self.getToken(PostgreSqlGrammarParser.TO, 0)

        def CONSTRAINT(self):
            return self.getToken(PostgreSqlGrammarParser.CONSTRAINT, 0)

        def table_constraint(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_constraintContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_alter_table_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_action" ):
                listener.enterAlter_table_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_action" ):
                listener.exitAlter_table_action(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_table_action" ):
                return visitor.visitAlter_table_action(self)
            else:
                return visitor.visitChildren(self)




    def alter_table_action(self):

        localctx = PostgreSqlGrammarParser.Alter_table_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_alter_table_action)
        self._la = 0 # Token type
        try:
            self.state = 422
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 404
                self.match(PostgreSqlGrammarParser.ADD)
                self.state = 405
                self.match(PostgreSqlGrammarParser.COLUMN)
                self.state = 406
                self.column_def()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 407
                self.match(PostgreSqlGrammarParser.DROP)
                self.state = 408
                self.match(PostgreSqlGrammarParser.COLUMN)
                self.state = 411
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==111:
                    self.state = 409
                    self.match(PostgreSqlGrammarParser.IF)
                    self.state = 410
                    self.match(PostgreSqlGrammarParser.EXISTS)


                self.state = 413
                self.match(PostgreSqlGrammarParser.ID)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 414
                self.match(PostgreSqlGrammarParser.RENAME)
                self.state = 415
                self.match(PostgreSqlGrammarParser.COLUMN)
                self.state = 416
                self.match(PostgreSqlGrammarParser.ID)
                self.state = 417
                self.match(PostgreSqlGrammarParser.TO)
                self.state = 418
                self.match(PostgreSqlGrammarParser.ID)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 419
                self.match(PostgreSqlGrammarParser.ADD)
                self.state = 420
                self.match(PostgreSqlGrammarParser.CONSTRAINT)
                self.state = 421
                self.table_constraint()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(PostgreSqlGrammarParser.INSERT, 0)

        def INTO(self):
            return self.getToken(PostgreSqlGrammarParser.INTO, 0)

        def table_name(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_nameContext,0)


        def VALUES(self):
            return self.getToken(PostgreSqlGrammarParser.VALUES, 0)

        def insert_values(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Insert_valuesContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Insert_valuesContext,i)


        def LPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.LPAREN, 0)

        def column_list(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Column_listContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.COMMA)
            else:
                return self.getToken(PostgreSqlGrammarParser.COMMA, i)

        def select_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_insert_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_stmt" ):
                listener.enterInsert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_stmt" ):
                listener.exitInsert_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_stmt" ):
                return visitor.visitInsert_stmt(self)
            else:
                return visitor.visitChildren(self)




    def insert_stmt(self):

        localctx = PostgreSqlGrammarParser.Insert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_insert_stmt)
        self._la = 0 # Token type
        try:
            self.state = 453
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 424
                self.match(PostgreSqlGrammarParser.INSERT)
                self.state = 425
                self.match(PostgreSqlGrammarParser.INTO)
                self.state = 426
                self.table_name()
                self.state = 431
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 427
                    self.match(PostgreSqlGrammarParser.LPAREN)
                    self.state = 428
                    self.column_list()
                    self.state = 429
                    self.match(PostgreSqlGrammarParser.RPAREN)


                self.state = 433
                self.match(PostgreSqlGrammarParser.VALUES)
                self.state = 434
                self.insert_values()
                self.state = 439
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==116:
                    self.state = 435
                    self.match(PostgreSqlGrammarParser.COMMA)
                    self.state = 436
                    self.insert_values()
                    self.state = 441
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 442
                self.match(PostgreSqlGrammarParser.INSERT)
                self.state = 443
                self.match(PostgreSqlGrammarParser.INTO)
                self.state = 444
                self.table_name()
                self.state = 449
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                if la_ == 1:
                    self.state = 445
                    self.match(PostgreSqlGrammarParser.LPAREN)
                    self.state = 446
                    self.column_list()
                    self.state = 447
                    self.match(PostgreSqlGrammarParser.RPAREN)


                self.state = 451
                self.select_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_valuesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.LPAREN, 0)

        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.ValueContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.ValueContext,i)


        def RPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.COMMA)
            else:
                return self.getToken(PostgreSqlGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_insert_values

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_values" ):
                listener.enterInsert_values(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_values" ):
                listener.exitInsert_values(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_values" ):
                return visitor.visitInsert_values(self)
            else:
                return visitor.visitChildren(self)




    def insert_values(self):

        localctx = PostgreSqlGrammarParser.Insert_valuesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_insert_values)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 455
            self.match(PostgreSqlGrammarParser.LPAREN)
            self.state = 456
            self.value()
            self.state = 461
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==116:
                self.state = 457
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 458
                self.value()
                self.state = 463
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 464
            self.match(PostgreSqlGrammarParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(PostgreSqlGrammarParser.UPDATE, 0)

        def table_name(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_nameContext,0)


        def SET(self):
            return self.getToken(PostgreSqlGrammarParser.SET, 0)

        def update_assignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Update_assignmentContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Update_assignmentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.COMMA)
            else:
                return self.getToken(PostgreSqlGrammarParser.COMMA, i)

        def WHERE(self):
            return self.getToken(PostgreSqlGrammarParser.WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_update_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_stmt" ):
                listener.enterUpdate_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_stmt" ):
                listener.exitUpdate_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_stmt" ):
                return visitor.visitUpdate_stmt(self)
            else:
                return visitor.visitChildren(self)




    def update_stmt(self):

        localctx = PostgreSqlGrammarParser.Update_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_update_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466
            self.match(PostgreSqlGrammarParser.UPDATE)
            self.state = 467
            self.table_name()
            self.state = 468
            self.match(PostgreSqlGrammarParser.SET)
            self.state = 469
            self.update_assignment()
            self.state = 474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==116:
                self.state = 470
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 471
                self.update_assignment()
                self.state = 476
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28:
                self.state = 477
                self.match(PostgreSqlGrammarParser.WHERE)
                self.state = 478
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_assignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def EQ(self):
            return self.getToken(PostgreSqlGrammarParser.EQ, 0)

        def value(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.ValueContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_update_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_assignment" ):
                listener.enterUpdate_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_assignment" ):
                listener.exitUpdate_assignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_assignment" ):
                return visitor.visitUpdate_assignment(self)
            else:
                return visitor.visitChildren(self)




    def update_assignment(self):

        localctx = PostgreSqlGrammarParser.Update_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_update_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 481
            self.match(PostgreSqlGrammarParser.ID)
            self.state = 482
            self.match(PostgreSqlGrammarParser.EQ)
            self.state = 483
            self.value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(PostgreSqlGrammarParser.DELETE, 0)

        def FROM(self):
            return self.getToken(PostgreSqlGrammarParser.FROM, 0)

        def table_name(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_nameContext,0)


        def WHERE(self):
            return self.getToken(PostgreSqlGrammarParser.WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_delete_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_stmt" ):
                listener.enterDelete_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_stmt" ):
                listener.exitDelete_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelete_stmt" ):
                return visitor.visitDelete_stmt(self)
            else:
                return visitor.visitChildren(self)




    def delete_stmt(self):

        localctx = PostgreSqlGrammarParser.Delete_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_delete_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 485
            self.match(PostgreSqlGrammarParser.DELETE)
            self.state = 486
            self.match(PostgreSqlGrammarParser.FROM)
            self.state = 487
            self.table_name()
            self.state = 490
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28:
                self.state = 488
                self.match(PostgreSqlGrammarParser.WHERE)
                self.state = 489
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(PostgreSqlGrammarParser.STRING, 0)

        def NUMBER(self):
            return self.getToken(PostgreSqlGrammarParser.NUMBER, 0)

        def NULL(self):
            return self.getToken(PostgreSqlGrammarParser.NULL, 0)

        def expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue" ):
                listener.enterValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue" ):
                listener.exitValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValue" ):
                return visitor.visitValue(self)
            else:
                return visitor.visitChildren(self)




    def value(self):

        localctx = PostgreSqlGrammarParser.ValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_value)
        try:
            self.state = 496
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 492
                self.match(PostgreSqlGrammarParser.STRING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 493
                self.match(PostgreSqlGrammarParser.NUMBER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 494
                self.match(PostgreSqlGrammarParser.NULL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 495
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PostgreSqlGrammarParser.WITH, 0)

        def cte(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.CteContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.CteContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.COMMA)
            else:
                return self.getToken(PostgreSqlGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_with_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause" ):
                listener.enterWith_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause" ):
                listener.exitWith_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_clause" ):
                return visitor.visitWith_clause(self)
            else:
                return visitor.visitChildren(self)




    def with_clause(self):

        localctx = PostgreSqlGrammarParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_with_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 498
            self.match(PostgreSqlGrammarParser.WITH)
            self.state = 499
            self.cte()
            self.state = 504
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==116:
                self.state = 500
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 501
                self.cte()
                self.state = 506
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def AS(self):
            return self.getToken(PostgreSqlGrammarParser.AS, 0)

        def LPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.LPAREN, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Select_stmtContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_cte

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCte" ):
                listener.enterCte(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCte" ):
                listener.exitCte(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCte" ):
                return visitor.visitCte(self)
            else:
                return visitor.visitChildren(self)




    def cte(self):

        localctx = PostgreSqlGrammarParser.CteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_cte)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 507
            self.match(PostgreSqlGrammarParser.ID)
            self.state = 508
            self.match(PostgreSqlGrammarParser.AS)
            self.state = 509
            self.match(PostgreSqlGrammarParser.LPAREN)
            self.state = 510
            self.select_stmt()
            self.state = 511
            self.match(PostgreSqlGrammarParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Result_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_reference(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_referenceContext,0)


        def DOT(self):
            return self.getToken(PostgreSqlGrammarParser.DOT, 0)

        def STAR(self):
            return self.getToken(PostgreSqlGrammarParser.STAR, 0)

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def agg_func(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Agg_funcContext,0)


        def LPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.RPAREN, 0)

        def alias(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.AliasContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_result_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResult_column" ):
                listener.enterResult_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResult_column" ):
                listener.exitResult_column(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResult_column" ):
                return visitor.visitResult_column(self)
            else:
                return visitor.visitChildren(self)




    def result_column(self):

        localctx = PostgreSqlGrammarParser.Result_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_result_column)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 527
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.state = 513
                self.table_reference()
                pass

            elif la_ == 2:
                self.state = 514
                self.table_reference()
                self.state = 515
                self.match(PostgreSqlGrammarParser.DOT)
                self.state = 516
                self.match(PostgreSqlGrammarParser.STAR)
                pass

            elif la_ == 3:
                self.state = 518
                self.table_reference()
                self.state = 519
                self.match(PostgreSqlGrammarParser.DOT)
                self.state = 520
                self.match(PostgreSqlGrammarParser.ID)
                pass

            elif la_ == 4:
                self.state = 522
                self.match(PostgreSqlGrammarParser.ID)
                pass

            elif la_ == 5:
                self.state = 523
                self.agg_func()
                pass

            elif la_ == 6:
                self.state = 524
                self.match(PostgreSqlGrammarParser.ID)
                self.state = 525
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 526
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass


            self.state = 530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==38 or _la==139:
                self.state = 529
                self.alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def standard_join(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Standard_joinContext,0)


        def natural_join(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Natural_joinContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_clause" ):
                listener.enterJoin_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_clause" ):
                listener.exitJoin_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_clause" ):
                return visitor.visitJoin_clause(self)
            else:
                return visitor.visitChildren(self)




    def join_clause(self):

        localctx = PostgreSqlGrammarParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_join_clause)
        try:
            self.state = 534
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53, 54, 55, 56, 57]:
                self.enterOuterAlt(localctx, 1)
                self.state = 532
                self.standard_join()
                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 2)
                self.state = 533
                self.natural_join()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Standard_joinContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def join_type(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Join_typeContext,0)


        def table_reference(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_referenceContext,0)


        def ON(self):
            return self.getToken(PostgreSqlGrammarParser.ON, 0)

        def expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_standard_join

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandard_join" ):
                listener.enterStandard_join(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandard_join" ):
                listener.exitStandard_join(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandard_join" ):
                return visitor.visitStandard_join(self)
            else:
                return visitor.visitChildren(self)




    def standard_join(self):

        localctx = PostgreSqlGrammarParser.Standard_joinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_standard_join)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536
            self.join_type()
            self.state = 537
            self.table_reference()
            self.state = 538
            self.match(PostgreSqlGrammarParser.ON)
            self.state = 539
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Natural_joinContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def natural_join_type(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Natural_join_typeContext,0)


        def table_reference(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_referenceContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_natural_join

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNatural_join" ):
                listener.enterNatural_join(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNatural_join" ):
                listener.exitNatural_join(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNatural_join" ):
                return visitor.visitNatural_join(self)
            else:
                return visitor.visitChildren(self)




    def natural_join(self):

        localctx = PostgreSqlGrammarParser.Natural_joinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_natural_join)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self.natural_join_type()
            self.state = 542
            self.table_reference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INNER(self):
            return self.getToken(PostgreSqlGrammarParser.INNER, 0)

        def JOIN(self):
            return self.getToken(PostgreSqlGrammarParser.JOIN, 0)

        def LEFT(self):
            return self.getToken(PostgreSqlGrammarParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(PostgreSqlGrammarParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(PostgreSqlGrammarParser.FULL, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_join_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_type" ):
                listener.enterJoin_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_type" ):
                listener.exitJoin_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_type" ):
                return visitor.visitJoin_type(self)
            else:
                return visitor.visitChildren(self)




    def join_type(self):

        localctx = PostgreSqlGrammarParser.Join_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_join_type)
        try:
            self.state = 553
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.enterOuterAlt(localctx, 1)
                self.state = 544
                self.match(PostgreSqlGrammarParser.INNER)
                self.state = 545
                self.match(PostgreSqlGrammarParser.JOIN)
                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 2)
                self.state = 546
                self.match(PostgreSqlGrammarParser.LEFT)
                self.state = 547
                self.match(PostgreSqlGrammarParser.JOIN)
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 3)
                self.state = 548
                self.match(PostgreSqlGrammarParser.RIGHT)
                self.state = 549
                self.match(PostgreSqlGrammarParser.JOIN)
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 4)
                self.state = 550
                self.match(PostgreSqlGrammarParser.FULL)
                self.state = 551
                self.match(PostgreSqlGrammarParser.JOIN)
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 5)
                self.state = 552
                self.match(PostgreSqlGrammarParser.JOIN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Natural_join_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NATURAL(self):
            return self.getToken(PostgreSqlGrammarParser.NATURAL, 0)

        def JOIN(self):
            return self.getToken(PostgreSqlGrammarParser.JOIN, 0)

        def INNER(self):
            return self.getToken(PostgreSqlGrammarParser.INNER, 0)

        def LEFT(self):
            return self.getToken(PostgreSqlGrammarParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(PostgreSqlGrammarParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(PostgreSqlGrammarParser.FULL, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_natural_join_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNatural_join_type" ):
                listener.enterNatural_join_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNatural_join_type" ):
                listener.exitNatural_join_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNatural_join_type" ):
                return visitor.visitNatural_join_type(self)
            else:
                return visitor.visitChildren(self)




    def natural_join_type(self):

        localctx = PostgreSqlGrammarParser.Natural_join_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_natural_join_type)
        try:
            self.state = 569
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 555
                self.match(PostgreSqlGrammarParser.NATURAL)
                self.state = 556
                self.match(PostgreSqlGrammarParser.JOIN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 557
                self.match(PostgreSqlGrammarParser.NATURAL)
                self.state = 558
                self.match(PostgreSqlGrammarParser.INNER)
                self.state = 559
                self.match(PostgreSqlGrammarParser.JOIN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 560
                self.match(PostgreSqlGrammarParser.NATURAL)
                self.state = 561
                self.match(PostgreSqlGrammarParser.LEFT)
                self.state = 562
                self.match(PostgreSqlGrammarParser.JOIN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 563
                self.match(PostgreSqlGrammarParser.NATURAL)
                self.state = 564
                self.match(PostgreSqlGrammarParser.RIGHT)
                self.state = 565
                self.match(PostgreSqlGrammarParser.JOIN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 566
                self.match(PostgreSqlGrammarParser.NATURAL)
                self.state = 567
                self.match(PostgreSqlGrammarParser.FULL)
                self.state = 568
                self.match(PostgreSqlGrammarParser.JOIN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_nameContext,0)


        def alias(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.AliasContext,0)


        def LPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.LPAREN, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Select_stmtContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_table_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_reference" ):
                listener.enterTable_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_reference" ):
                listener.exitTable_reference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_reference" ):
                return visitor.visitTable_reference(self)
            else:
                return visitor.visitChildren(self)




    def table_reference(self):

        localctx = PostgreSqlGrammarParser.Table_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_table_reference)
        try:
            self.state = 581
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [139]:
                self.enterOuterAlt(localctx, 1)
                self.state = 571
                self.table_name()
                self.state = 573
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 572
                    self.alias()


                pass
            elif token in [119]:
                self.enterOuterAlt(localctx, 2)
                self.state = 575
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 576
                self.select_stmt()
                self.state = 577
                self.match(PostgreSqlGrammarParser.RPAREN)
                self.state = 579
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                if la_ == 1:
                    self.state = 578
                    self.alias()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_name" ):
                return visitor.visitTable_name(self)
            else:
                return visitor.visitChildren(self)




    def table_name(self):

        localctx = PostgreSqlGrammarParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 583
            self.match(PostgreSqlGrammarParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(PostgreSqlGrammarParser.AS, 0)

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias" ):
                listener.enterAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias" ):
                listener.exitAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlias" ):
                return visitor.visitAlias(self)
            else:
                return visitor.visitChildren(self)




    def alias(self):

        localctx = PostgreSqlGrammarParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_alias)
        try:
            self.state = 588
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38]:
                self.enterOuterAlt(localctx, 1)
                self.state = 585
                self.match(PostgreSqlGrammarParser.AS)
                self.state = 586
                self.match(PostgreSqlGrammarParser.ID)
                pass
            elif token in [139]:
                self.enterOuterAlt(localctx, 2)
                self.state = 587
                self.match(PostgreSqlGrammarParser.ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(PostgreSqlGrammarParser.GROUP, 0)

        def BY(self):
            return self.getToken(PostgreSqlGrammarParser.BY, 0)

        def group_by_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Group_by_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Group_by_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.COMMA)
            else:
                return self.getToken(PostgreSqlGrammarParser.COMMA, i)

        def HAVING(self):
            return self.getToken(PostgreSqlGrammarParser.HAVING, 0)

        def expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_group_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_clause" ):
                listener.enterGroup_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_clause" ):
                listener.exitGroup_by_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_by_clause" ):
                return visitor.visitGroup_by_clause(self)
            else:
                return visitor.visitChildren(self)




    def group_by_clause(self):

        localctx = PostgreSqlGrammarParser.Group_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_group_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 590
            self.match(PostgreSqlGrammarParser.GROUP)
            self.state = 591
            self.match(PostgreSqlGrammarParser.BY)
            self.state = 592
            self.group_by_item()
            self.state = 597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==116:
                self.state = 593
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 594
                self.group_by_item()
                self.state = 599
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==31:
                self.state = 600
                self.match(PostgreSqlGrammarParser.HAVING)
                self.state = 601
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def table_reference(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_referenceContext,0)


        def DOT(self):
            return self.getToken(PostgreSqlGrammarParser.DOT, 0)

        def agg_func(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Agg_funcContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_group_by_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_item" ):
                listener.enterGroup_by_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_item" ):
                listener.exitGroup_by_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_by_item" ):
                return visitor.visitGroup_by_item(self)
            else:
                return visitor.visitChildren(self)




    def group_by_item(self):

        localctx = PostgreSqlGrammarParser.Group_by_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_group_by_item)
        try:
            self.state = 610
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 604
                self.match(PostgreSqlGrammarParser.ID)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 605
                self.table_reference()
                self.state = 606
                self.match(PostgreSqlGrammarParser.DOT)
                self.state = 607
                self.match(PostgreSqlGrammarParser.ID)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 609
                self.agg_func()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(PostgreSqlGrammarParser.ORDER, 0)

        def BY(self):
            return self.getToken(PostgreSqlGrammarParser.BY, 0)

        def order_by_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Order_by_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Order_by_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.COMMA)
            else:
                return self.getToken(PostgreSqlGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_order_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_clause" ):
                listener.enterOrder_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_clause" ):
                listener.exitOrder_by_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrder_by_clause" ):
                return visitor.visitOrder_by_clause(self)
            else:
                return visitor.visitChildren(self)




    def order_by_clause(self):

        localctx = PostgreSqlGrammarParser.Order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_order_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 612
            self.match(PostgreSqlGrammarParser.ORDER)
            self.state = 613
            self.match(PostgreSqlGrammarParser.BY)
            self.state = 614
            self.order_by_item()
            self.state = 619
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==116:
                self.state = 615
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 616
                self.order_by_item()
                self.state = 621
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def ASC(self):
            return self.getToken(PostgreSqlGrammarParser.ASC, 0)

        def DESC(self):
            return self.getToken(PostgreSqlGrammarParser.DESC, 0)

        def table_reference(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_referenceContext,0)


        def DOT(self):
            return self.getToken(PostgreSqlGrammarParser.DOT, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_order_by_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_item" ):
                listener.enterOrder_by_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_item" ):
                listener.exitOrder_by_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrder_by_item" ):
                return visitor.visitOrder_by_item(self)
            else:
                return visitor.visitChildren(self)




    def order_by_item(self):

        localctx = PostgreSqlGrammarParser.Order_by_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_order_by_item)
        self._la = 0 # Token type
        try:
            self.state = 632
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 622
                self.match(PostgreSqlGrammarParser.ID)
                self.state = 624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==33 or _la==34:
                    self.state = 623
                    _la = self._input.LA(1)
                    if not(_la==33 or _la==34):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 626
                self.table_reference()
                self.state = 627
                self.match(PostgreSqlGrammarParser.DOT)
                self.state = 628
                self.match(PostgreSqlGrammarParser.ID)
                self.state = 630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==33 or _la==34:
                    self.state = 629
                    _la = self._input.LA(1)
                    if not(_la==33 or _la==34):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Agg_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COUNT(self):
            return self.getToken(PostgreSqlGrammarParser.COUNT, 0)

        def LPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.RPAREN, 0)

        def STAR(self):
            return self.getToken(PostgreSqlGrammarParser.STAR, 0)

        def expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,0)


        def SUM(self):
            return self.getToken(PostgreSqlGrammarParser.SUM, 0)

        def AVG(self):
            return self.getToken(PostgreSqlGrammarParser.AVG, 0)

        def MIN(self):
            return self.getToken(PostgreSqlGrammarParser.MIN, 0)

        def MAX(self):
            return self.getToken(PostgreSqlGrammarParser.MAX, 0)

        def ARRAY_AGG(self):
            return self.getToken(PostgreSqlGrammarParser.ARRAY_AGG, 0)

        def STRING_AGG(self):
            return self.getToken(PostgreSqlGrammarParser.STRING_AGG, 0)

        def COMMA(self):
            return self.getToken(PostgreSqlGrammarParser.COMMA, 0)

        def STRING(self):
            return self.getToken(PostgreSqlGrammarParser.STRING, 0)

        def BOOL_AND(self):
            return self.getToken(PostgreSqlGrammarParser.BOOL_AND, 0)

        def BOOL_OR(self):
            return self.getToken(PostgreSqlGrammarParser.BOOL_OR, 0)

        def VAR_POP(self):
            return self.getToken(PostgreSqlGrammarParser.VAR_POP, 0)

        def VAR_SAMP(self):
            return self.getToken(PostgreSqlGrammarParser.VAR_SAMP, 0)

        def STDDEV_POP(self):
            return self.getToken(PostgreSqlGrammarParser.STDDEV_POP, 0)

        def STDDEV_SAMP(self):
            return self.getToken(PostgreSqlGrammarParser.STDDEV_SAMP, 0)

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_agg_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAgg_func" ):
                listener.enterAgg_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAgg_func" ):
                listener.exitAgg_func(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAgg_func" ):
                return visitor.visitAgg_func(self)
            else:
                return visitor.visitChildren(self)




    def agg_func(self):

        localctx = PostgreSqlGrammarParser.Agg_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_agg_func)
        try:
            self.state = 706
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [58]:
                self.enterOuterAlt(localctx, 1)
                self.state = 634
                self.match(PostgreSqlGrammarParser.COUNT)
                self.state = 635
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 638
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [115]:
                    self.state = 636
                    self.match(PostgreSqlGrammarParser.STAR)
                    pass
                elif token in [37, 45, 58, 59, 60, 61, 62, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 119, 139]:
                    self.state = 637
                    self.expr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 640
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [59]:
                self.enterOuterAlt(localctx, 2)
                self.state = 641
                self.match(PostgreSqlGrammarParser.SUM)
                self.state = 642
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 643
                self.expr(0)
                self.state = 644
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 3)
                self.state = 646
                self.match(PostgreSqlGrammarParser.AVG)
                self.state = 647
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 648
                self.expr(0)
                self.state = 649
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 4)
                self.state = 651
                self.match(PostgreSqlGrammarParser.MIN)
                self.state = 652
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 653
                self.expr(0)
                self.state = 654
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 5)
                self.state = 656
                self.match(PostgreSqlGrammarParser.MAX)
                self.state = 657
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 658
                self.expr(0)
                self.state = 659
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 6)
                self.state = 661
                self.match(PostgreSqlGrammarParser.ARRAY_AGG)
                self.state = 662
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 663
                self.expr(0)
                self.state = 664
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 7)
                self.state = 666
                self.match(PostgreSqlGrammarParser.STRING_AGG)
                self.state = 667
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 668
                self.expr(0)
                self.state = 669
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 670
                self.match(PostgreSqlGrammarParser.STRING)
                self.state = 671
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 8)
                self.state = 673
                self.match(PostgreSqlGrammarParser.BOOL_AND)
                self.state = 674
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 675
                self.expr(0)
                self.state = 676
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 9)
                self.state = 678
                self.match(PostgreSqlGrammarParser.BOOL_OR)
                self.state = 679
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 680
                self.expr(0)
                self.state = 681
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 10)
                self.state = 683
                self.match(PostgreSqlGrammarParser.VAR_POP)
                self.state = 684
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 685
                self.expr(0)
                self.state = 686
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 11)
                self.state = 688
                self.match(PostgreSqlGrammarParser.VAR_SAMP)
                self.state = 689
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 690
                self.expr(0)
                self.state = 691
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 12)
                self.state = 693
                self.match(PostgreSqlGrammarParser.STDDEV_POP)
                self.state = 694
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 695
                self.expr(0)
                self.state = 696
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 13)
                self.state = 698
                self.match(PostgreSqlGrammarParser.STDDEV_SAMP)
                self.state = 699
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 700
                self.expr(0)
                self.state = 701
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [139]:
                self.enterOuterAlt(localctx, 14)
                self.state = 703
                self.match(PostgreSqlGrammarParser.ID)
                self.state = 704
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 705
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(PostgreSqlGrammarParser.NOT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.ExprContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,i)


        def arith_expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Arith_exprContext,0)


        def comparatorExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.ComparatorExprContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.ComparatorExprContext,i)


        def EQ(self):
            return self.getToken(PostgreSqlGrammarParser.EQ, 0)

        def NEQ(self):
            return self.getToken(PostgreSqlGrammarParser.NEQ, 0)

        def LT(self):
            return self.getToken(PostgreSqlGrammarParser.LT, 0)

        def LTE(self):
            return self.getToken(PostgreSqlGrammarParser.LTE, 0)

        def GT(self):
            return self.getToken(PostgreSqlGrammarParser.GT, 0)

        def GTE(self):
            return self.getToken(PostgreSqlGrammarParser.GTE, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.ID)
            else:
                return self.getToken(PostgreSqlGrammarParser.ID, i)

        def IS(self):
            return self.getToken(PostgreSqlGrammarParser.IS, 0)

        def NULL(self):
            return self.getToken(PostgreSqlGrammarParser.NULL, 0)

        def LIKE(self):
            return self.getToken(PostgreSqlGrammarParser.LIKE, 0)

        def STRING(self):
            return self.getToken(PostgreSqlGrammarParser.STRING, 0)

        def BETWEEN(self):
            return self.getToken(PostgreSqlGrammarParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(PostgreSqlGrammarParser.AND, 0)

        def LPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.LPAREN, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Select_stmtContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.RPAREN, 0)

        def case_expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Case_exprContext,0)


        def NUMBER(self):
            return self.getToken(PostgreSqlGrammarParser.NUMBER, 0)

        def DOT(self):
            return self.getToken(PostgreSqlGrammarParser.DOT, 0)

        def IN(self):
            return self.getToken(PostgreSqlGrammarParser.IN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.COMMA)
            else:
                return self.getToken(PostgreSqlGrammarParser.COMMA, i)

        def OR(self):
            return self.getToken(PostgreSqlGrammarParser.OR, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PostgreSqlGrammarParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 80
        self.enterRecursionRule(localctx, 80, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 767
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 709
                self.match(PostgreSqlGrammarParser.NOT)
                self.state = 710
                self.expr(11)
                pass

            elif la_ == 2:
                self.state = 711
                self.arith_expr(0)
                pass

            elif la_ == 3:
                self.state = 712
                self.comparatorExpr()
                self.state = 713
                _la = self._input.LA(1)
                if not(((((_la - 121)) & ~0x3f) == 0 and ((1 << (_la - 121)) & 63) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 714
                self.comparatorExpr()
                pass

            elif la_ == 4:
                self.state = 716
                self.match(PostgreSqlGrammarParser.ID)
                self.state = 717
                self.match(PostgreSqlGrammarParser.IS)
                self.state = 719
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==37:
                    self.state = 718
                    self.match(PostgreSqlGrammarParser.NOT)


                self.state = 721
                self.match(PostgreSqlGrammarParser.NULL)
                pass

            elif la_ == 5:
                self.state = 722
                self.match(PostgreSqlGrammarParser.ID)
                self.state = 723
                self.match(PostgreSqlGrammarParser.LIKE)
                self.state = 724
                self.match(PostgreSqlGrammarParser.STRING)
                pass

            elif la_ == 6:
                self.state = 725
                self.match(PostgreSqlGrammarParser.ID)
                self.state = 726
                self.match(PostgreSqlGrammarParser.BETWEEN)
                self.state = 727
                self.expr(0)
                self.state = 728
                self.match(PostgreSqlGrammarParser.AND)
                self.state = 729
                self.expr(6)
                pass

            elif la_ == 7:
                self.state = 731
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 732
                self.select_stmt()
                self.state = 733
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass

            elif la_ == 8:
                self.state = 735
                self.case_expr()
                pass

            elif la_ == 9:
                self.state = 736
                self.comparatorExpr()
                self.state = 748
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
                if la_ == 1:
                    self.state = 737
                    _la = self._input.LA(1)
                    if not(((((_la - 121)) & ~0x3f) == 0 and ((1 << (_la - 121)) & 63) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 746
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                    if la_ == 1:
                        self.state = 738
                        self.expr(0)
                        pass

                    elif la_ == 2:
                        self.state = 739
                        self.match(PostgreSqlGrammarParser.STRING)
                        pass

                    elif la_ == 3:
                        self.state = 740
                        self.match(PostgreSqlGrammarParser.NUMBER)
                        pass

                    elif la_ == 4:
                        self.state = 741
                        self.match(PostgreSqlGrammarParser.ID)
                        self.state = 744
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                        if la_ == 1:
                            self.state = 742
                            self.match(PostgreSqlGrammarParser.DOT)
                            self.state = 743
                            self.match(PostgreSqlGrammarParser.ID)


                        pass




                pass

            elif la_ == 10:
                self.state = 750
                self.comparatorExpr()
                self.state = 751
                self.match(PostgreSqlGrammarParser.IN)

                self.state = 752
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 753
                self.comparatorExpr()
                self.state = 758
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==116:
                    self.state = 754
                    self.match(PostgreSqlGrammarParser.COMMA)
                    self.state = 755
                    self.comparatorExpr()
                    self.state = 760
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 761
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass

            elif la_ == 11:
                self.state = 763
                self.comparatorExpr()
                self.state = 764
                self.match(PostgreSqlGrammarParser.LIKE)
                self.state = 765
                self.match(PostgreSqlGrammarParser.STRING)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 777
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 775
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
                    if la_ == 1:
                        localctx = PostgreSqlGrammarParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 769
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 770
                        self.match(PostgreSqlGrammarParser.AND)
                        self.state = 771
                        self.expr(14)
                        pass

                    elif la_ == 2:
                        localctx = PostgreSqlGrammarParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 772
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 773
                        self.match(PostgreSqlGrammarParser.OR)
                        self.state = 774
                        self.expr(13)
                        pass

             
                self.state = 779
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ComparatorExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(PostgreSqlGrammarParser.STRING, 0)

        def NUMBER(self):
            return self.getToken(PostgreSqlGrammarParser.NUMBER, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.ID)
            else:
                return self.getToken(PostgreSqlGrammarParser.ID, i)

        def DOT(self):
            return self.getToken(PostgreSqlGrammarParser.DOT, 0)

        def function_call(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Function_callContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_comparatorExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparatorExpr" ):
                listener.enterComparatorExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparatorExpr" ):
                listener.exitComparatorExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparatorExpr" ):
                return visitor.visitComparatorExpr(self)
            else:
                return visitor.visitChildren(self)




    def comparatorExpr(self):

        localctx = PostgreSqlGrammarParser.ComparatorExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_comparatorExpr)
        try:
            self.state = 790
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 787
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [113]:
                    self.state = 780
                    self.match(PostgreSqlGrammarParser.STRING)
                    pass
                elif token in [114]:
                    self.state = 781
                    self.match(PostgreSqlGrammarParser.NUMBER)
                    pass
                elif token in [139]:
                    self.state = 782
                    self.match(PostgreSqlGrammarParser.ID)
                    self.state = 785
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
                    if la_ == 1:
                        self.state = 783
                        self.match(PostgreSqlGrammarParser.DOT)
                        self.state = 784
                        self.match(PostgreSqlGrammarParser.ID)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 789
                self.function_call()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arith_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.AtomContext,0)


        def arith_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Arith_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Arith_exprContext,i)


        def PLUS(self):
            return self.getToken(PostgreSqlGrammarParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(PostgreSqlGrammarParser.MINUS, 0)

        def STAR(self):
            return self.getToken(PostgreSqlGrammarParser.STAR, 0)

        def SLASH(self):
            return self.getToken(PostgreSqlGrammarParser.SLASH, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_arith_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArith_expr" ):
                listener.enterArith_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArith_expr" ):
                listener.exitArith_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArith_expr" ):
                return visitor.visitArith_expr(self)
            else:
                return visitor.visitChildren(self)



    def arith_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PostgreSqlGrammarParser.Arith_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 84
        self.enterRecursionRule(localctx, 84, self.RULE_arith_expr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793
            self.atom()
            self._ctx.stop = self._input.LT(-1)
            self.state = 809
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 807
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                    if la_ == 1:
                        localctx = PostgreSqlGrammarParser.Arith_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_arith_expr)
                        self.state = 795
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 796
                        self.match(PostgreSqlGrammarParser.PLUS)
                        self.state = 797
                        self.arith_expr(6)
                        pass

                    elif la_ == 2:
                        localctx = PostgreSqlGrammarParser.Arith_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_arith_expr)
                        self.state = 798
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 799
                        self.match(PostgreSqlGrammarParser.MINUS)
                        self.state = 800
                        self.arith_expr(5)
                        pass

                    elif la_ == 3:
                        localctx = PostgreSqlGrammarParser.Arith_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_arith_expr)
                        self.state = 801
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 802
                        self.match(PostgreSqlGrammarParser.STAR)
                        self.state = 803
                        self.arith_expr(4)
                        pass

                    elif la_ == 4:
                        localctx = PostgreSqlGrammarParser.Arith_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_arith_expr)
                        self.state = 804
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 805
                        self.match(PostgreSqlGrammarParser.SLASH)
                        self.state = 806
                        self.arith_expr(3)
                        pass

             
                self.state = 811
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def NUMBER(self):
            return self.getToken(PostgreSqlGrammarParser.NUMBER, 0)

        def LPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.LPAREN, 0)

        def arith_expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Arith_exprContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom" ):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = PostgreSqlGrammarParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_atom)
        try:
            self.state = 818
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [139]:
                self.enterOuterAlt(localctx, 1)
                self.state = 812
                self.match(PostgreSqlGrammarParser.ID)
                pass
            elif token in [114]:
                self.enterOuterAlt(localctx, 2)
                self.state = 813
                self.match(PostgreSqlGrammarParser.NUMBER)
                pass
            elif token in [119]:
                self.enterOuterAlt(localctx, 3)
                self.state = 814
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 815
                self.arith_expr(0)
                self.state = 816
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(PostgreSqlGrammarParser.CASE, 0)

        def END(self):
            return self.getToken(PostgreSqlGrammarParser.END, 0)

        def when_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.When_clauseContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.When_clauseContext,i)


        def ELSE(self):
            return self.getToken(PostgreSqlGrammarParser.ELSE, 0)

        def expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,0)


        def NULL(self):
            return self.getToken(PostgreSqlGrammarParser.NULL, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_case_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_expr" ):
                listener.enterCase_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_expr" ):
                listener.exitCase_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase_expr" ):
                return visitor.visitCase_expr(self)
            else:
                return visitor.visitChildren(self)




    def case_expr(self):

        localctx = PostgreSqlGrammarParser.Case_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_case_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 820
            self.match(PostgreSqlGrammarParser.CASE)
            self.state = 822 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 821
                self.when_clause()
                self.state = 824 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==46):
                    break

            self.state = 831
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 826
                self.match(PostgreSqlGrammarParser.ELSE)
                self.state = 829
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [37, 45, 58, 59, 60, 61, 62, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 119, 139]:
                    self.state = 827
                    self.expr(0)
                    pass
                elif token in [41]:
                    self.state = 828
                    self.match(PostgreSqlGrammarParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 833
            self.match(PostgreSqlGrammarParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class When_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(PostgreSqlGrammarParser.WHEN, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.ExprContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,i)


        def THEN(self):
            return self.getToken(PostgreSqlGrammarParser.THEN, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_when_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhen_clause" ):
                listener.enterWhen_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhen_clause" ):
                listener.exitWhen_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhen_clause" ):
                return visitor.visitWhen_clause(self)
            else:
                return visitor.visitChildren(self)




    def when_clause(self):

        localctx = PostgreSqlGrammarParser.When_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_when_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 835
            self.match(PostgreSqlGrammarParser.WHEN)
            self.state = 836
            self.expr(0)
            self.state = 837
            self.match(PostgreSqlGrammarParser.THEN)
            self.state = 838
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def LPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.RPAREN, 0)

        def function_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Function_argContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Function_argContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.COMMA)
            else:
                return self.getToken(PostgreSqlGrammarParser.COMMA, i)

        def LEN(self):
            return self.getToken(PostgreSqlGrammarParser.LEN, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.ExprContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,i)


        def UPPER(self):
            return self.getToken(PostgreSqlGrammarParser.UPPER, 0)

        def LOWER(self):
            return self.getToken(PostgreSqlGrammarParser.LOWER, 0)

        def SUBSTRING(self):
            return self.getToken(PostgreSqlGrammarParser.SUBSTRING, 0)

        def INT(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.INT)
            else:
                return self.getToken(PostgreSqlGrammarParser.INT, i)

        def ABS(self):
            return self.getToken(PostgreSqlGrammarParser.ABS, 0)

        def CEILING(self):
            return self.getToken(PostgreSqlGrammarParser.CEILING, 0)

        def FLOOR(self):
            return self.getToken(PostgreSqlGrammarParser.FLOOR, 0)

        def ROUND(self):
            return self.getToken(PostgreSqlGrammarParser.ROUND, 0)

        def YEAR(self):
            return self.getToken(PostgreSqlGrammarParser.YEAR, 0)

        def MONTH(self):
            return self.getToken(PostgreSqlGrammarParser.MONTH, 0)

        def DAY(self):
            return self.getToken(PostgreSqlGrammarParser.DAY, 0)

        def GETDATE(self):
            return self.getToken(PostgreSqlGrammarParser.GETDATE, 0)

        def DATEADD(self):
            return self.getToken(PostgreSqlGrammarParser.DATEADD, 0)

        def DATEDIFF(self):
            return self.getToken(PostgreSqlGrammarParser.DATEDIFF, 0)

        def CAST(self):
            return self.getToken(PostgreSqlGrammarParser.CAST, 0)

        def AS(self):
            return self.getToken(PostgreSqlGrammarParser.AS, 0)

        def data_type(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Data_typeContext,0)


        def CONVERT(self):
            return self.getToken(PostgreSqlGrammarParser.CONVERT, 0)

        def SUM(self):
            return self.getToken(PostgreSqlGrammarParser.SUM, 0)

        def AVG(self):
            return self.getToken(PostgreSqlGrammarParser.AVG, 0)

        def COUNT(self):
            return self.getToken(PostgreSqlGrammarParser.COUNT, 0)

        def MIN(self):
            return self.getToken(PostgreSqlGrammarParser.MIN, 0)

        def MAX(self):
            return self.getToken(PostgreSqlGrammarParser.MAX, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_function_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call" ):
                listener.enterFunction_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call" ):
                listener.exitFunction_call(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_call" ):
                return visitor.visitFunction_call(self)
            else:
                return visitor.visitChildren(self)




    def function_call(self):

        localctx = PostgreSqlGrammarParser.Function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_function_call)
        self._la = 0 # Token type
        try:
            self.state = 974
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [139]:
                self.enterOuterAlt(localctx, 1)
                self.state = 840
                self.match(PostgreSqlGrammarParser.ID)
                self.state = 841
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 850
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8935176982514106368) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 17592203673599) != 0):
                    self.state = 842
                    self.function_arg()
                    self.state = 847
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==116:
                        self.state = 843
                        self.match(PostgreSqlGrammarParser.COMMA)
                        self.state = 844
                        self.function_arg()
                        self.state = 849
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 852
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [95]:
                self.enterOuterAlt(localctx, 2)
                self.state = 853
                self.match(PostgreSqlGrammarParser.LEN)
                self.state = 854
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 855
                self.expr(0)
                self.state = 856
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [96]:
                self.enterOuterAlt(localctx, 3)
                self.state = 858
                self.match(PostgreSqlGrammarParser.UPPER)
                self.state = 859
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 860
                self.expr(0)
                self.state = 861
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [97]:
                self.enterOuterAlt(localctx, 4)
                self.state = 863
                self.match(PostgreSqlGrammarParser.LOWER)
                self.state = 864
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 865
                self.expr(0)
                self.state = 866
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [98]:
                self.enterOuterAlt(localctx, 5)
                self.state = 868
                self.match(PostgreSqlGrammarParser.SUBSTRING)
                self.state = 869
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 870
                self.expr(0)
                self.state = 871
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 872
                self.match(PostgreSqlGrammarParser.INT)
                self.state = 873
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 874
                self.match(PostgreSqlGrammarParser.INT)
                self.state = 875
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 6)
                self.state = 877
                self.match(PostgreSqlGrammarParser.ABS)
                self.state = 878
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 879
                self.expr(0)
                self.state = 880
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 7)
                self.state = 882
                self.match(PostgreSqlGrammarParser.CEILING)
                self.state = 883
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 884
                self.expr(0)
                self.state = 885
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 8)
                self.state = 887
                self.match(PostgreSqlGrammarParser.FLOOR)
                self.state = 888
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 889
                self.expr(0)
                self.state = 890
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 9)
                self.state = 892
                self.match(PostgreSqlGrammarParser.ROUND)
                self.state = 893
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 894
                self.expr(0)
                self.state = 895
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 896
                self.match(PostgreSqlGrammarParser.INT)
                self.state = 897
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [103]:
                self.enterOuterAlt(localctx, 10)
                self.state = 899
                self.match(PostgreSqlGrammarParser.YEAR)
                self.state = 900
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 901
                self.expr(0)
                self.state = 902
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [104]:
                self.enterOuterAlt(localctx, 11)
                self.state = 904
                self.match(PostgreSqlGrammarParser.MONTH)
                self.state = 905
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 906
                self.expr(0)
                self.state = 907
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [105]:
                self.enterOuterAlt(localctx, 12)
                self.state = 909
                self.match(PostgreSqlGrammarParser.DAY)
                self.state = 910
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 911
                self.expr(0)
                self.state = 912
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 13)
                self.state = 914
                self.match(PostgreSqlGrammarParser.GETDATE)
                self.state = 915
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 916
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [107]:
                self.enterOuterAlt(localctx, 14)
                self.state = 917
                self.match(PostgreSqlGrammarParser.DATEADD)
                self.state = 918
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 919
                self.expr(0)
                self.state = 920
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 921
                self.match(PostgreSqlGrammarParser.INT)
                self.state = 922
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 923
                self.expr(0)
                self.state = 924
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [108]:
                self.enterOuterAlt(localctx, 15)
                self.state = 926
                self.match(PostgreSqlGrammarParser.DATEDIFF)
                self.state = 927
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 928
                self.expr(0)
                self.state = 929
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 930
                self.expr(0)
                self.state = 931
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 932
                self.expr(0)
                self.state = 933
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [109]:
                self.enterOuterAlt(localctx, 16)
                self.state = 935
                self.match(PostgreSqlGrammarParser.CAST)
                self.state = 936
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 937
                self.expr(0)
                self.state = 938
                self.match(PostgreSqlGrammarParser.AS)
                self.state = 939
                self.data_type()
                self.state = 940
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [110]:
                self.enterOuterAlt(localctx, 17)
                self.state = 942
                self.match(PostgreSqlGrammarParser.CONVERT)
                self.state = 943
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 944
                self.data_type()
                self.state = 945
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 946
                self.expr(0)
                self.state = 947
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [59]:
                self.enterOuterAlt(localctx, 18)
                self.state = 949
                self.match(PostgreSqlGrammarParser.SUM)
                self.state = 950
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 951
                self.expr(0)
                self.state = 952
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 19)
                self.state = 954
                self.match(PostgreSqlGrammarParser.AVG)
                self.state = 955
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 956
                self.expr(0)
                self.state = 957
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [58]:
                self.enterOuterAlt(localctx, 20)
                self.state = 959
                self.match(PostgreSqlGrammarParser.COUNT)
                self.state = 960
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 961
                self.expr(0)
                self.state = 962
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 21)
                self.state = 964
                self.match(PostgreSqlGrammarParser.MIN)
                self.state = 965
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 966
                self.expr(0)
                self.state = 967
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 22)
                self.state = 969
                self.match(PostgreSqlGrammarParser.MAX)
                self.state = 970
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 971
                self.expr(0)
                self.state = 972
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_function_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_arg" ):
                listener.enterFunction_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_arg" ):
                listener.exitFunction_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_arg" ):
                return visitor.visitFunction_arg(self)
            else:
                return visitor.visitChildren(self)




    def function_arg(self):

        localctx = PostgreSqlGrammarParser.Function_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_function_arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 976
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[40] = self.expr_sempred
        self._predicates[42] = self.arith_expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 12)
         

    def arith_expr_sempred(self, localctx:Arith_exprContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 2)
         




