# Generated from antlr/PostgreSql/PostgreSqlGrammar.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,121,802,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,1,0,1,0,5,0,97,8,0,10,0,12,0,100,9,0,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,132,8,1,1,2,1,2,3,2,136,
        8,2,1,2,1,2,3,2,140,8,2,1,2,1,2,1,2,1,2,5,2,146,8,2,10,2,12,2,149,
        9,2,3,2,151,8,2,1,2,1,2,1,2,1,2,5,2,157,8,2,10,2,12,2,160,9,2,1,
        2,5,2,163,8,2,10,2,12,2,166,9,2,1,2,1,2,3,2,170,8,2,1,2,3,2,173,
        8,2,1,2,3,2,176,8,2,1,3,1,3,1,3,1,3,1,3,3,3,183,8,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,234,
        8,4,1,5,1,5,1,5,1,5,1,5,5,5,241,8,5,10,5,12,5,244,9,5,1,6,1,6,1,
        7,1,7,1,7,1,7,3,7,252,8,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,260,8,7,10,
        7,12,7,263,9,7,1,7,1,7,5,7,267,8,7,10,7,12,7,270,9,7,1,7,1,7,1,8,
        1,8,1,8,5,8,277,8,8,10,8,12,8,280,9,8,1,9,1,9,1,9,1,9,1,9,1,9,1,
        9,3,9,289,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,
        313,8,10,1,11,1,11,1,11,5,11,318,8,11,10,11,12,11,321,9,11,1,12,
        1,12,3,12,325,8,12,1,12,1,12,1,12,1,12,3,12,331,8,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,3,13,344,8,13,1,13,1,
        13,1,13,1,14,1,14,1,14,1,14,3,14,353,8,14,1,14,1,14,1,15,1,15,1,
        15,1,15,3,15,361,8,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,
        16,1,16,3,16,373,8,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
        16,3,16,384,8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,393,8,17,
        1,17,1,17,1,17,1,17,5,17,399,8,17,10,17,12,17,402,9,17,1,17,1,17,
        1,17,1,17,1,17,1,17,1,17,3,17,411,8,17,1,17,1,17,3,17,415,8,17,1,
        18,1,18,1,18,1,18,5,18,421,8,18,10,18,12,18,424,9,18,1,18,1,18,1,
        19,1,19,1,19,1,19,1,19,1,19,5,19,434,8,19,10,19,12,19,437,9,19,1,
        19,1,19,3,19,441,8,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,
        21,3,21,452,8,21,1,22,1,22,1,22,1,22,3,22,458,8,22,1,23,1,23,1,23,
        1,23,3,23,464,8,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,472,8,23,1,
        24,1,24,1,24,1,24,5,24,478,8,24,10,24,12,24,481,9,24,1,25,1,25,1,
        25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
        26,1,26,1,26,1,26,1,26,3,26,503,8,26,1,27,1,27,3,27,507,8,27,1,28,
        1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,
        1,30,1,30,1,30,3,30,526,8,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
        1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,542,8,31,1,32,1,32,3,32,
        546,8,32,1,32,1,32,1,32,1,32,3,32,552,8,32,3,32,554,8,32,1,33,1,
        33,1,34,1,34,1,34,3,34,561,8,34,1,35,1,35,1,35,1,35,1,35,5,35,568,
        8,35,10,35,12,35,571,9,35,1,35,1,35,3,35,575,8,35,1,36,1,36,1,36,
        1,36,1,36,1,36,3,36,583,8,36,1,37,1,37,1,37,1,37,1,37,5,37,590,8,
        37,10,37,12,37,593,9,37,1,38,1,38,3,38,597,8,38,1,38,1,38,1,38,1,
        38,3,38,603,8,38,3,38,605,8,38,1,39,1,39,1,39,1,39,3,39,611,8,39,
        1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        1,39,3,39,679,8,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,
        3,40,690,8,40,3,40,692,8,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,700,
        8,40,3,40,702,8,40,1,40,1,40,1,40,3,40,707,8,40,1,40,1,40,1,40,1,
        40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,
        40,725,8,40,1,40,1,40,1,40,1,40,1,40,1,40,5,40,733,8,40,10,40,12,
        40,736,9,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,
        41,1,41,1,41,1,41,1,41,5,41,753,8,41,10,41,12,41,756,9,41,1,42,1,
        42,1,42,1,42,1,42,1,42,3,42,764,8,42,1,43,1,43,4,43,768,8,43,11,
        43,12,43,769,1,43,1,43,1,43,3,43,775,8,43,3,43,777,8,43,1,43,1,43,
        1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,5,45,791,8,45,
        10,45,12,45,794,9,45,3,45,796,8,45,1,45,1,45,1,46,1,46,1,46,0,2,
        80,82,47,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
        40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,
        84,86,88,90,92,0,3,4,0,51,51,77,77,84,84,92,92,1,0,33,34,1,0,103,
        108,899,0,94,1,0,0,0,2,131,1,0,0,0,4,135,1,0,0,0,6,177,1,0,0,0,8,
        233,1,0,0,0,10,235,1,0,0,0,12,245,1,0,0,0,14,247,1,0,0,0,16,273,
        1,0,0,0,18,288,1,0,0,0,20,312,1,0,0,0,22,314,1,0,0,0,24,322,1,0,
        0,0,26,339,1,0,0,0,28,348,1,0,0,0,30,356,1,0,0,0,32,383,1,0,0,0,
        34,414,1,0,0,0,36,416,1,0,0,0,38,427,1,0,0,0,40,442,1,0,0,0,42,446,
        1,0,0,0,44,457,1,0,0,0,46,463,1,0,0,0,48,473,1,0,0,0,50,482,1,0,
        0,0,52,502,1,0,0,0,54,506,1,0,0,0,56,508,1,0,0,0,58,513,1,0,0,0,
        60,525,1,0,0,0,62,541,1,0,0,0,64,553,1,0,0,0,66,555,1,0,0,0,68,560,
        1,0,0,0,70,562,1,0,0,0,72,582,1,0,0,0,74,584,1,0,0,0,76,604,1,0,
        0,0,78,678,1,0,0,0,80,724,1,0,0,0,82,737,1,0,0,0,84,763,1,0,0,0,
        86,765,1,0,0,0,88,780,1,0,0,0,90,785,1,0,0,0,92,799,1,0,0,0,94,98,
        3,2,1,0,95,97,3,2,1,0,96,95,1,0,0,0,97,100,1,0,0,0,98,96,1,0,0,0,
        98,99,1,0,0,0,99,1,1,0,0,0,100,98,1,0,0,0,101,102,3,4,2,0,102,103,
        5,99,0,0,103,132,1,0,0,0,104,105,3,6,3,0,105,106,5,99,0,0,106,132,
        1,0,0,0,107,108,3,14,7,0,108,109,5,99,0,0,109,132,1,0,0,0,110,111,
        3,24,12,0,111,112,5,99,0,0,112,132,1,0,0,0,113,114,3,26,13,0,114,
        115,5,99,0,0,115,132,1,0,0,0,116,117,3,28,14,0,117,118,5,99,0,0,
        118,132,1,0,0,0,119,120,3,30,15,0,120,121,5,99,0,0,121,132,1,0,0,
        0,122,123,3,34,17,0,123,124,5,99,0,0,124,132,1,0,0,0,125,126,3,38,
        19,0,126,127,5,99,0,0,127,132,1,0,0,0,128,129,3,42,21,0,129,130,
        5,99,0,0,130,132,1,0,0,0,131,101,1,0,0,0,131,104,1,0,0,0,131,107,
        1,0,0,0,131,110,1,0,0,0,131,113,1,0,0,0,131,116,1,0,0,0,131,119,
        1,0,0,0,131,122,1,0,0,0,131,125,1,0,0,0,131,128,1,0,0,0,132,3,1,
        0,0,0,133,134,5,26,0,0,134,136,3,48,24,0,135,133,1,0,0,0,135,136,
        1,0,0,0,136,137,1,0,0,0,137,139,5,25,0,0,138,140,5,76,0,0,139,138,
        1,0,0,0,139,140,1,0,0,0,140,150,1,0,0,0,141,151,5,97,0,0,142,147,
        3,52,26,0,143,144,5,98,0,0,144,146,3,52,26,0,145,143,1,0,0,0,146,
        149,1,0,0,0,147,145,1,0,0,0,147,148,1,0,0,0,148,151,1,0,0,0,149,
        147,1,0,0,0,150,141,1,0,0,0,150,142,1,0,0,0,151,152,1,0,0,0,152,
        153,5,27,0,0,153,158,3,64,32,0,154,155,5,98,0,0,155,157,3,64,32,
        0,156,154,1,0,0,0,157,160,1,0,0,0,158,156,1,0,0,0,158,159,1,0,0,
        0,159,164,1,0,0,0,160,158,1,0,0,0,161,163,3,54,27,0,162,161,1,0,
        0,0,163,166,1,0,0,0,164,162,1,0,0,0,164,165,1,0,0,0,165,169,1,0,
        0,0,166,164,1,0,0,0,167,168,5,28,0,0,168,170,3,80,40,0,169,167,1,
        0,0,0,169,170,1,0,0,0,170,172,1,0,0,0,171,173,3,70,35,0,172,171,
        1,0,0,0,172,173,1,0,0,0,173,175,1,0,0,0,174,176,3,74,37,0,175,174,
        1,0,0,0,175,176,1,0,0,0,176,5,1,0,0,0,177,178,5,50,0,0,178,179,5,
        51,0,0,179,180,5,121,0,0,180,182,5,101,0,0,181,183,3,10,5,0,182,
        181,1,0,0,0,182,183,1,0,0,0,183,184,1,0,0,0,184,185,5,102,0,0,185,
        186,5,52,0,0,186,187,5,121,0,0,187,188,5,38,0,0,188,189,3,12,6,0,
        189,7,1,0,0,0,190,191,5,1,0,0,191,192,5,101,0,0,192,193,5,96,0,0,
        193,234,5,102,0,0,194,234,5,2,0,0,195,196,5,3,0,0,196,197,5,101,
        0,0,197,198,5,96,0,0,198,199,5,98,0,0,199,200,5,96,0,0,200,234,5,
        102,0,0,201,234,5,4,0,0,202,234,5,5,0,0,203,234,5,6,0,0,204,234,
        5,7,0,0,205,234,5,8,0,0,206,234,5,9,0,0,207,234,5,10,0,0,208,234,
        5,11,0,0,209,234,5,12,0,0,210,234,5,13,0,0,211,234,5,14,0,0,212,
        234,5,15,0,0,213,234,5,16,0,0,214,215,5,17,0,0,215,216,5,101,0,0,
        216,217,5,96,0,0,217,218,5,98,0,0,218,219,5,96,0,0,219,234,5,102,
        0,0,220,234,5,18,0,0,221,234,5,19,0,0,222,234,5,20,0,0,223,224,5,
        21,0,0,224,225,5,101,0,0,225,226,5,96,0,0,226,234,5,102,0,0,227,
        228,5,22,0,0,228,229,5,101,0,0,229,230,5,96,0,0,230,234,5,102,0,
        0,231,234,5,23,0,0,232,234,5,24,0,0,233,190,1,0,0,0,233,194,1,0,
        0,0,233,195,1,0,0,0,233,201,1,0,0,0,233,202,1,0,0,0,233,203,1,0,
        0,0,233,204,1,0,0,0,233,205,1,0,0,0,233,206,1,0,0,0,233,207,1,0,
        0,0,233,208,1,0,0,0,233,209,1,0,0,0,233,210,1,0,0,0,233,211,1,0,
        0,0,233,212,1,0,0,0,233,213,1,0,0,0,233,214,1,0,0,0,233,220,1,0,
        0,0,233,221,1,0,0,0,233,222,1,0,0,0,233,223,1,0,0,0,233,227,1,0,
        0,0,233,231,1,0,0,0,233,232,1,0,0,0,234,9,1,0,0,0,235,236,5,121,
        0,0,236,242,3,8,4,0,237,238,5,98,0,0,238,239,5,121,0,0,239,241,3,
        8,4,0,240,237,1,0,0,0,241,244,1,0,0,0,242,240,1,0,0,0,242,243,1,
        0,0,0,243,11,1,0,0,0,244,242,1,0,0,0,245,246,3,80,40,0,246,13,1,
        0,0,0,247,251,5,50,0,0,248,249,5,93,0,0,249,250,5,37,0,0,250,252,
        5,94,0,0,251,248,1,0,0,0,251,252,1,0,0,0,252,253,1,0,0,0,253,254,
        5,77,0,0,254,255,3,66,33,0,255,256,5,101,0,0,256,261,3,16,8,0,257,
        258,5,98,0,0,258,260,3,16,8,0,259,257,1,0,0,0,260,263,1,0,0,0,261,
        259,1,0,0,0,261,262,1,0,0,0,262,268,1,0,0,0,263,261,1,0,0,0,264,
        265,5,98,0,0,265,267,3,20,10,0,266,264,1,0,0,0,267,270,1,0,0,0,268,
        266,1,0,0,0,268,269,1,0,0,0,269,271,1,0,0,0,270,268,1,0,0,0,271,
        272,5,102,0,0,272,15,1,0,0,0,273,274,5,121,0,0,274,278,3,8,4,0,275,
        277,3,18,9,0,276,275,1,0,0,0,277,280,1,0,0,0,278,276,1,0,0,0,278,
        279,1,0,0,0,279,17,1,0,0,0,280,278,1,0,0,0,281,282,5,37,0,0,282,
        289,5,41,0,0,283,289,5,78,0,0,284,285,5,79,0,0,285,289,5,80,0,0,
        286,287,5,81,0,0,287,289,3,80,40,0,288,281,1,0,0,0,288,283,1,0,0,
        0,288,284,1,0,0,0,288,286,1,0,0,0,289,19,1,0,0,0,290,291,5,79,0,
        0,291,292,5,80,0,0,292,293,5,101,0,0,293,294,3,22,11,0,294,295,5,
        102,0,0,295,313,1,0,0,0,296,297,5,78,0,0,297,298,5,101,0,0,298,299,
        3,22,11,0,299,300,5,102,0,0,300,313,1,0,0,0,301,302,5,82,0,0,302,
        303,5,80,0,0,303,304,5,101,0,0,304,305,3,22,11,0,305,306,5,102,0,
        0,306,307,5,83,0,0,307,308,3,66,33,0,308,309,5,101,0,0,309,310,3,
        22,11,0,310,311,5,102,0,0,311,313,1,0,0,0,312,290,1,0,0,0,312,296,
        1,0,0,0,312,301,1,0,0,0,313,21,1,0,0,0,314,319,5,121,0,0,315,316,
        5,98,0,0,316,318,5,121,0,0,317,315,1,0,0,0,318,321,1,0,0,0,319,317,
        1,0,0,0,319,320,1,0,0,0,320,23,1,0,0,0,321,319,1,0,0,0,322,324,5,
        50,0,0,323,325,5,78,0,0,324,323,1,0,0,0,324,325,1,0,0,0,325,326,
        1,0,0,0,326,330,5,84,0,0,327,328,5,93,0,0,328,329,5,37,0,0,329,331,
        5,94,0,0,330,327,1,0,0,0,330,331,1,0,0,0,331,332,1,0,0,0,332,333,
        5,121,0,0,333,334,5,39,0,0,334,335,3,66,33,0,335,336,5,101,0,0,336,
        337,3,22,11,0,337,338,5,102,0,0,338,25,1,0,0,0,339,343,5,50,0,0,
        340,341,5,93,0,0,341,342,5,37,0,0,342,344,5,94,0,0,343,340,1,0,0,
        0,343,344,1,0,0,0,344,345,1,0,0,0,345,346,5,92,0,0,346,347,5,121,
        0,0,347,27,1,0,0,0,348,349,5,85,0,0,349,352,7,0,0,0,350,351,5,93,
        0,0,351,353,5,94,0,0,352,350,1,0,0,0,352,353,1,0,0,0,353,354,1,0,
        0,0,354,355,5,121,0,0,355,29,1,0,0,0,356,357,5,86,0,0,357,360,5,
        77,0,0,358,359,5,93,0,0,359,361,5,94,0,0,360,358,1,0,0,0,360,361,
        1,0,0,0,361,362,1,0,0,0,362,363,3,66,33,0,363,364,3,32,16,0,364,
        31,1,0,0,0,365,366,5,90,0,0,366,367,5,91,0,0,367,384,3,16,8,0,368,
        369,5,85,0,0,369,372,5,91,0,0,370,371,5,93,0,0,371,373,5,94,0,0,
        372,370,1,0,0,0,372,373,1,0,0,0,373,374,1,0,0,0,374,384,5,121,0,
        0,375,376,5,87,0,0,376,377,5,91,0,0,377,378,5,121,0,0,378,379,5,
        89,0,0,379,384,5,121,0,0,380,381,5,90,0,0,381,382,5,88,0,0,382,384,
        3,20,10,0,383,365,1,0,0,0,383,368,1,0,0,0,383,375,1,0,0,0,383,380,
        1,0,0,0,384,33,1,0,0,0,385,386,5,112,0,0,386,387,5,113,0,0,387,392,
        3,66,33,0,388,389,5,101,0,0,389,390,3,22,11,0,390,391,5,102,0,0,
        391,393,1,0,0,0,392,388,1,0,0,0,392,393,1,0,0,0,393,394,1,0,0,0,
        394,395,5,114,0,0,395,400,3,36,18,0,396,397,5,98,0,0,397,399,3,36,
        18,0,398,396,1,0,0,0,399,402,1,0,0,0,400,398,1,0,0,0,400,401,1,0,
        0,0,401,415,1,0,0,0,402,400,1,0,0,0,403,404,5,112,0,0,404,405,5,
        113,0,0,405,410,3,66,33,0,406,407,5,101,0,0,407,408,3,22,11,0,408,
        409,5,102,0,0,409,411,1,0,0,0,410,406,1,0,0,0,410,411,1,0,0,0,411,
        412,1,0,0,0,412,413,3,4,2,0,413,415,1,0,0,0,414,385,1,0,0,0,414,
        403,1,0,0,0,415,35,1,0,0,0,416,417,5,101,0,0,417,422,3,44,22,0,418,
        419,5,98,0,0,419,421,3,44,22,0,420,418,1,0,0,0,421,424,1,0,0,0,422,
        420,1,0,0,0,422,423,1,0,0,0,423,425,1,0,0,0,424,422,1,0,0,0,425,
        426,5,102,0,0,426,37,1,0,0,0,427,428,5,115,0,0,428,429,3,66,33,0,
        429,430,5,116,0,0,430,435,3,40,20,0,431,432,5,98,0,0,432,434,3,40,
        20,0,433,431,1,0,0,0,434,437,1,0,0,0,435,433,1,0,0,0,435,436,1,0,
        0,0,436,440,1,0,0,0,437,435,1,0,0,0,438,439,5,28,0,0,439,441,3,80,
        40,0,440,438,1,0,0,0,440,441,1,0,0,0,441,39,1,0,0,0,442,443,5,121,
        0,0,443,444,5,103,0,0,444,445,3,44,22,0,445,41,1,0,0,0,446,447,5,
        117,0,0,447,448,5,27,0,0,448,451,3,66,33,0,449,450,5,28,0,0,450,
        452,3,80,40,0,451,449,1,0,0,0,451,452,1,0,0,0,452,43,1,0,0,0,453,
        458,5,95,0,0,454,458,5,96,0,0,455,458,5,41,0,0,456,458,3,80,40,0,
        457,453,1,0,0,0,457,454,1,0,0,0,457,455,1,0,0,0,457,456,1,0,0,0,
        458,45,1,0,0,0,459,460,5,71,0,0,460,461,3,80,40,0,461,462,5,74,0,
        0,462,464,1,0,0,0,463,459,1,0,0,0,463,464,1,0,0,0,464,471,1,0,0,
        0,465,466,5,72,0,0,466,467,5,73,0,0,467,468,3,80,40,0,468,469,5,
        74,0,0,469,470,5,75,0,0,470,472,1,0,0,0,471,465,1,0,0,0,471,472,
        1,0,0,0,472,47,1,0,0,0,473,474,5,26,0,0,474,479,3,50,25,0,475,476,
        5,98,0,0,476,478,3,50,25,0,477,475,1,0,0,0,478,481,1,0,0,0,479,477,
        1,0,0,0,479,480,1,0,0,0,480,49,1,0,0,0,481,479,1,0,0,0,482,483,5,
        121,0,0,483,484,5,38,0,0,484,485,5,101,0,0,485,486,3,4,2,0,486,487,
        5,102,0,0,487,51,1,0,0,0,488,503,3,64,32,0,489,490,3,64,32,0,490,
        491,5,100,0,0,491,492,5,97,0,0,492,503,1,0,0,0,493,494,3,64,32,0,
        494,495,5,100,0,0,495,496,5,121,0,0,496,503,1,0,0,0,497,503,5,121,
        0,0,498,503,3,78,39,0,499,500,5,121,0,0,500,501,5,101,0,0,501,503,
        5,102,0,0,502,488,1,0,0,0,502,489,1,0,0,0,502,493,1,0,0,0,502,497,
        1,0,0,0,502,498,1,0,0,0,502,499,1,0,0,0,503,53,1,0,0,0,504,507,3,
        56,28,0,505,507,3,58,29,0,506,504,1,0,0,0,506,505,1,0,0,0,507,55,
        1,0,0,0,508,509,3,60,30,0,509,510,3,64,32,0,510,511,5,39,0,0,511,
        512,3,80,40,0,512,57,1,0,0,0,513,514,3,62,31,0,514,515,3,64,32,0,
        515,59,1,0,0,0,516,517,5,53,0,0,517,526,5,57,0,0,518,519,5,54,0,
        0,519,526,5,57,0,0,520,521,5,55,0,0,521,526,5,57,0,0,522,523,5,56,
        0,0,523,526,5,57,0,0,524,526,5,57,0,0,525,516,1,0,0,0,525,518,1,
        0,0,0,525,520,1,0,0,0,525,522,1,0,0,0,525,524,1,0,0,0,526,61,1,0,
        0,0,527,528,5,44,0,0,528,542,5,57,0,0,529,530,5,44,0,0,530,531,5,
        53,0,0,531,542,5,57,0,0,532,533,5,44,0,0,533,534,5,54,0,0,534,542,
        5,57,0,0,535,536,5,44,0,0,536,537,5,55,0,0,537,542,5,57,0,0,538,
        539,5,44,0,0,539,540,5,56,0,0,540,542,5,57,0,0,541,527,1,0,0,0,541,
        529,1,0,0,0,541,532,1,0,0,0,541,535,1,0,0,0,541,538,1,0,0,0,542,
        63,1,0,0,0,543,545,3,66,33,0,544,546,3,68,34,0,545,544,1,0,0,0,545,
        546,1,0,0,0,546,554,1,0,0,0,547,548,5,101,0,0,548,549,3,4,2,0,549,
        551,5,102,0,0,550,552,3,68,34,0,551,550,1,0,0,0,551,552,1,0,0,0,
        552,554,1,0,0,0,553,543,1,0,0,0,553,547,1,0,0,0,554,65,1,0,0,0,555,
        556,5,121,0,0,556,67,1,0,0,0,557,558,5,38,0,0,558,561,5,121,0,0,
        559,561,5,121,0,0,560,557,1,0,0,0,560,559,1,0,0,0,561,69,1,0,0,0,
        562,563,5,29,0,0,563,564,5,30,0,0,564,569,3,72,36,0,565,566,5,98,
        0,0,566,568,3,72,36,0,567,565,1,0,0,0,568,571,1,0,0,0,569,567,1,
        0,0,0,569,570,1,0,0,0,570,574,1,0,0,0,571,569,1,0,0,0,572,573,5,
        31,0,0,573,575,3,80,40,0,574,572,1,0,0,0,574,575,1,0,0,0,575,71,
        1,0,0,0,576,583,5,121,0,0,577,578,3,64,32,0,578,579,5,100,0,0,579,
        580,5,121,0,0,580,583,1,0,0,0,581,583,3,78,39,0,582,576,1,0,0,0,
        582,577,1,0,0,0,582,581,1,0,0,0,583,73,1,0,0,0,584,585,5,32,0,0,
        585,586,5,30,0,0,586,591,3,76,38,0,587,588,5,98,0,0,588,590,3,76,
        38,0,589,587,1,0,0,0,590,593,1,0,0,0,591,589,1,0,0,0,591,592,1,0,
        0,0,592,75,1,0,0,0,593,591,1,0,0,0,594,596,5,121,0,0,595,597,7,1,
        0,0,596,595,1,0,0,0,596,597,1,0,0,0,597,605,1,0,0,0,598,599,3,64,
        32,0,599,600,5,100,0,0,600,602,5,121,0,0,601,603,7,1,0,0,602,601,
        1,0,0,0,602,603,1,0,0,0,603,605,1,0,0,0,604,594,1,0,0,0,604,598,
        1,0,0,0,605,77,1,0,0,0,606,607,5,58,0,0,607,610,5,101,0,0,608,611,
        5,97,0,0,609,611,3,80,40,0,610,608,1,0,0,0,610,609,1,0,0,0,611,612,
        1,0,0,0,612,679,5,102,0,0,613,614,5,59,0,0,614,615,5,101,0,0,615,
        616,3,80,40,0,616,617,5,102,0,0,617,679,1,0,0,0,618,619,5,60,0,0,
        619,620,5,101,0,0,620,621,3,80,40,0,621,622,5,102,0,0,622,679,1,
        0,0,0,623,624,5,61,0,0,624,625,5,101,0,0,625,626,3,80,40,0,626,627,
        5,102,0,0,627,679,1,0,0,0,628,629,5,62,0,0,629,630,5,101,0,0,630,
        631,3,80,40,0,631,632,5,102,0,0,632,679,1,0,0,0,633,634,5,63,0,0,
        634,635,5,101,0,0,635,636,3,80,40,0,636,637,5,102,0,0,637,679,1,
        0,0,0,638,639,5,64,0,0,639,640,5,101,0,0,640,641,3,80,40,0,641,642,
        5,98,0,0,642,643,5,95,0,0,643,644,5,102,0,0,644,679,1,0,0,0,645,
        646,5,65,0,0,646,647,5,101,0,0,647,648,3,80,40,0,648,649,5,102,0,
        0,649,679,1,0,0,0,650,651,5,66,0,0,651,652,5,101,0,0,652,653,3,80,
        40,0,653,654,5,102,0,0,654,679,1,0,0,0,655,656,5,67,0,0,656,657,
        5,101,0,0,657,658,3,80,40,0,658,659,5,102,0,0,659,679,1,0,0,0,660,
        661,5,68,0,0,661,662,5,101,0,0,662,663,3,80,40,0,663,664,5,102,0,
        0,664,679,1,0,0,0,665,666,5,69,0,0,666,667,5,101,0,0,667,668,3,80,
        40,0,668,669,5,102,0,0,669,679,1,0,0,0,670,671,5,70,0,0,671,672,
        5,101,0,0,672,673,3,80,40,0,673,674,5,102,0,0,674,679,1,0,0,0,675,
        676,5,121,0,0,676,677,5,101,0,0,677,679,5,102,0,0,678,606,1,0,0,
        0,678,613,1,0,0,0,678,618,1,0,0,0,678,623,1,0,0,0,678,628,1,0,0,
        0,678,633,1,0,0,0,678,638,1,0,0,0,678,645,1,0,0,0,678,650,1,0,0,
        0,678,655,1,0,0,0,678,660,1,0,0,0,678,665,1,0,0,0,678,670,1,0,0,
        0,678,675,1,0,0,0,679,79,1,0,0,0,680,681,6,40,-1,0,681,682,5,37,
        0,0,682,725,3,80,40,9,683,725,3,82,41,0,684,692,5,95,0,0,685,692,
        5,96,0,0,686,689,5,121,0,0,687,688,5,100,0,0,688,690,5,121,0,0,689,
        687,1,0,0,0,689,690,1,0,0,0,690,692,1,0,0,0,691,684,1,0,0,0,691,
        685,1,0,0,0,691,686,1,0,0,0,692,693,1,0,0,0,693,701,7,2,0,0,694,
        702,5,95,0,0,695,702,5,96,0,0,696,699,5,121,0,0,697,698,5,100,0,
        0,698,700,5,121,0,0,699,697,1,0,0,0,699,700,1,0,0,0,700,702,1,0,
        0,0,701,694,1,0,0,0,701,695,1,0,0,0,701,696,1,0,0,0,702,725,1,0,
        0,0,703,704,5,121,0,0,704,706,5,40,0,0,705,707,5,37,0,0,706,705,
        1,0,0,0,706,707,1,0,0,0,707,708,1,0,0,0,708,725,5,41,0,0,709,710,
        5,121,0,0,710,711,5,42,0,0,711,725,5,95,0,0,712,713,5,121,0,0,713,
        714,5,43,0,0,714,715,3,80,40,0,715,716,5,35,0,0,716,717,3,80,40,
        4,717,725,1,0,0,0,718,719,5,101,0,0,719,720,3,4,2,0,720,721,5,102,
        0,0,721,725,1,0,0,0,722,725,3,86,43,0,723,725,3,90,45,0,724,680,
        1,0,0,0,724,683,1,0,0,0,724,691,1,0,0,0,724,703,1,0,0,0,724,709,
        1,0,0,0,724,712,1,0,0,0,724,718,1,0,0,0,724,722,1,0,0,0,724,723,
        1,0,0,0,725,734,1,0,0,0,726,727,10,11,0,0,727,728,5,35,0,0,728,733,
        3,80,40,12,729,730,10,10,0,0,730,731,5,36,0,0,731,733,3,80,40,11,
        732,726,1,0,0,0,732,729,1,0,0,0,733,736,1,0,0,0,734,732,1,0,0,0,
        734,735,1,0,0,0,735,81,1,0,0,0,736,734,1,0,0,0,737,738,6,41,-1,0,
        738,739,3,84,42,0,739,754,1,0,0,0,740,741,10,5,0,0,741,742,5,109,
        0,0,742,753,3,82,41,6,743,744,10,4,0,0,744,745,5,110,0,0,745,753,
        3,82,41,5,746,747,10,3,0,0,747,748,5,97,0,0,748,753,3,82,41,4,749,
        750,10,2,0,0,750,751,5,111,0,0,751,753,3,82,41,3,752,740,1,0,0,0,
        752,743,1,0,0,0,752,746,1,0,0,0,752,749,1,0,0,0,753,756,1,0,0,0,
        754,752,1,0,0,0,754,755,1,0,0,0,755,83,1,0,0,0,756,754,1,0,0,0,757,
        764,5,121,0,0,758,764,5,96,0,0,759,760,5,101,0,0,760,761,3,82,41,
        0,761,762,5,102,0,0,762,764,1,0,0,0,763,757,1,0,0,0,763,758,1,0,
        0,0,763,759,1,0,0,0,764,85,1,0,0,0,765,767,5,45,0,0,766,768,3,88,
        44,0,767,766,1,0,0,0,768,769,1,0,0,0,769,767,1,0,0,0,769,770,1,0,
        0,0,770,776,1,0,0,0,771,774,5,48,0,0,772,775,3,80,40,0,773,775,5,
        41,0,0,774,772,1,0,0,0,774,773,1,0,0,0,775,777,1,0,0,0,776,771,1,
        0,0,0,776,777,1,0,0,0,777,778,1,0,0,0,778,779,5,49,0,0,779,87,1,
        0,0,0,780,781,5,46,0,0,781,782,3,80,40,0,782,783,5,47,0,0,783,784,
        3,80,40,0,784,89,1,0,0,0,785,786,5,121,0,0,786,795,5,101,0,0,787,
        792,3,92,46,0,788,789,5,98,0,0,789,791,3,92,46,0,790,788,1,0,0,0,
        791,794,1,0,0,0,792,790,1,0,0,0,792,793,1,0,0,0,793,796,1,0,0,0,
        794,792,1,0,0,0,795,787,1,0,0,0,795,796,1,0,0,0,796,797,1,0,0,0,
        797,798,5,102,0,0,798,91,1,0,0,0,799,800,3,80,40,0,800,93,1,0,0,
        0,73,98,131,135,139,147,150,158,164,169,172,175,182,233,242,251,
        261,268,278,288,312,319,324,330,343,352,360,372,383,392,400,410,
        414,422,435,440,451,457,463,471,479,502,506,525,541,545,551,553,
        560,569,574,582,591,596,602,604,610,678,689,691,699,701,706,724,
        732,734,752,754,763,769,774,776,792,795
    ]

class PostgreSqlGrammarParser ( Parser ):

    grammarFileName = "PostgreSqlGrammar.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'*'", "','", "';'", "'.'", "'('", "')'", 
                     "'='", "'!='", "'<'", "'<='", "'>'", "'>='", "'+'", 
                     "'-'", "'/'" ]

    symbolicNames = [ "<INVALID>", "VARCHAR", "INT", "NUMERIC", "TEXT", 
                      "DATE", "TIMESTAMP", "BOOL", "SERIAL", "BIGSERIAL", 
                      "UUID", "JSON", "JSONB", "BYTEA", "FLOAT", "REAL", 
                      "DOUBLE", "DECIMAL", "MONEY", "SMALLINT", "BIGINT", 
                      "CHAR", "BIT", "INTERVAL", "AUTOINCREMENT", "SELECT", 
                      "WITH", "FROM", "WHERE", "GROUP", "BY", "HAVING", 
                      "ORDER", "ASC", "DESC", "AND", "OR", "NOT", "AS", 
                      "ON", "IS", "NULL", "LIKE", "BETWEEN", "NATURAL", 
                      "CASE", "WHEN", "THEN", "ELSE", "END", "CREATE", "FUNCTION", 
                      "RETURNS", "INNER", "LEFT", "RIGHT", "FULL", "JOIN", 
                      "COUNT", "SUM", "AVG", "MIN", "MAX", "ARRAY_AGG", 
                      "STRING_AGG", "BOOL_AND", "BOOL_OR", "VAR_POP", "VAR_SAMP", 
                      "STDDEV_POP", "STDDEV_SAMP", "OFFSET", "FETCH", "FIRST", 
                      "ROWS", "ONLY", "DISTINCT", "TABLE", "UNIQUE", "PRIMARY", 
                      "KEY", "DEFAULT", "FOREIGN", "REFERENCES", "INDEX", 
                      "DROP", "ALTER", "RENAME", "CONSTRAINT", "TO", "ADD", 
                      "COLUMN", "DATABASE", "IF", "EXISTS", "STRING", "NUMBER", 
                      "STAR", "COMMA", "SEMI", "DOT", "LPAREN", "RPAREN", 
                      "EQ", "NEQ", "LT", "LTE", "GT", "GTE", "PLUS", "MINUS", 
                      "SLASH", "INSERT", "INTO", "VALUES", "UPDATE", "SET", 
                      "DELETE", "LINE_COMMENT", "BLOCK_COMMENT", "WS", "ID" ]

    RULE_initial = 0
    RULE_sql_stmt = 1
    RULE_select_stmt = 2
    RULE_function_stmt = 3
    RULE_data_type = 4
    RULE_function_params = 5
    RULE_func_body = 6
    RULE_create_table_stmt = 7
    RULE_column_def = 8
    RULE_column_constraint = 9
    RULE_table_constraint = 10
    RULE_column_list = 11
    RULE_create_index_stmt = 12
    RULE_create_database_stmt = 13
    RULE_drop_stmt = 14
    RULE_alter_table_stmt = 15
    RULE_alter_table_action = 16
    RULE_insert_stmt = 17
    RULE_insert_values = 18
    RULE_update_stmt = 19
    RULE_update_assignment = 20
    RULE_delete_stmt = 21
    RULE_value = 22
    RULE_limit_offset_clause = 23
    RULE_with_clause = 24
    RULE_cte = 25
    RULE_result_column = 26
    RULE_join_clause = 27
    RULE_standard_join = 28
    RULE_natural_join = 29
    RULE_join_type = 30
    RULE_natural_join_type = 31
    RULE_table_reference = 32
    RULE_table_name = 33
    RULE_alias = 34
    RULE_group_by_clause = 35
    RULE_group_by_item = 36
    RULE_order_by_clause = 37
    RULE_order_by_item = 38
    RULE_agg_func = 39
    RULE_expr = 40
    RULE_arith_expr = 41
    RULE_atom = 42
    RULE_case_expr = 43
    RULE_when_clause = 44
    RULE_function_call = 45
    RULE_function_arg = 46

    ruleNames =  [ "initial", "sql_stmt", "select_stmt", "function_stmt", 
                   "data_type", "function_params", "func_body", "create_table_stmt", 
                   "column_def", "column_constraint", "table_constraint", 
                   "column_list", "create_index_stmt", "create_database_stmt", 
                   "drop_stmt", "alter_table_stmt", "alter_table_action", 
                   "insert_stmt", "insert_values", "update_stmt", "update_assignment", 
                   "delete_stmt", "value", "limit_offset_clause", "with_clause", 
                   "cte", "result_column", "join_clause", "standard_join", 
                   "natural_join", "join_type", "natural_join_type", "table_reference", 
                   "table_name", "alias", "group_by_clause", "group_by_item", 
                   "order_by_clause", "order_by_item", "agg_func", "expr", 
                   "arith_expr", "atom", "case_expr", "when_clause", "function_call", 
                   "function_arg" ]

    EOF = Token.EOF
    VARCHAR=1
    INT=2
    NUMERIC=3
    TEXT=4
    DATE=5
    TIMESTAMP=6
    BOOL=7
    SERIAL=8
    BIGSERIAL=9
    UUID=10
    JSON=11
    JSONB=12
    BYTEA=13
    FLOAT=14
    REAL=15
    DOUBLE=16
    DECIMAL=17
    MONEY=18
    SMALLINT=19
    BIGINT=20
    CHAR=21
    BIT=22
    INTERVAL=23
    AUTOINCREMENT=24
    SELECT=25
    WITH=26
    FROM=27
    WHERE=28
    GROUP=29
    BY=30
    HAVING=31
    ORDER=32
    ASC=33
    DESC=34
    AND=35
    OR=36
    NOT=37
    AS=38
    ON=39
    IS=40
    NULL=41
    LIKE=42
    BETWEEN=43
    NATURAL=44
    CASE=45
    WHEN=46
    THEN=47
    ELSE=48
    END=49
    CREATE=50
    FUNCTION=51
    RETURNS=52
    INNER=53
    LEFT=54
    RIGHT=55
    FULL=56
    JOIN=57
    COUNT=58
    SUM=59
    AVG=60
    MIN=61
    MAX=62
    ARRAY_AGG=63
    STRING_AGG=64
    BOOL_AND=65
    BOOL_OR=66
    VAR_POP=67
    VAR_SAMP=68
    STDDEV_POP=69
    STDDEV_SAMP=70
    OFFSET=71
    FETCH=72
    FIRST=73
    ROWS=74
    ONLY=75
    DISTINCT=76
    TABLE=77
    UNIQUE=78
    PRIMARY=79
    KEY=80
    DEFAULT=81
    FOREIGN=82
    REFERENCES=83
    INDEX=84
    DROP=85
    ALTER=86
    RENAME=87
    CONSTRAINT=88
    TO=89
    ADD=90
    COLUMN=91
    DATABASE=92
    IF=93
    EXISTS=94
    STRING=95
    NUMBER=96
    STAR=97
    COMMA=98
    SEMI=99
    DOT=100
    LPAREN=101
    RPAREN=102
    EQ=103
    NEQ=104
    LT=105
    LTE=106
    GT=107
    GTE=108
    PLUS=109
    MINUS=110
    SLASH=111
    INSERT=112
    INTO=113
    VALUES=114
    UPDATE=115
    SET=116
    DELETE=117
    LINE_COMMENT=118
    BLOCK_COMMENT=119
    WS=120
    ID=121

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class InitialContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Sql_stmtContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Sql_stmtContext,i)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_initial

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitial" ):
                listener.enterInitial(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitial" ):
                listener.exitInitial(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitial" ):
                return visitor.visitInitial(self)
            else:
                return visitor.visitChildren(self)




    def initial(self):

        localctx = PostgreSqlGrammarParser.InitialContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_initial)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 94
            self.sql_stmt()
            self.state = 98
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1125900007505920) != 0) or ((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & 5502926851) != 0):
                self.state = 95
                self.sql_stmt()
                self.state = 100
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Select_stmtContext,0)


        def SEMI(self):
            return self.getToken(PostgreSqlGrammarParser.SEMI, 0)

        def function_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Function_stmtContext,0)


        def create_table_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Create_table_stmtContext,0)


        def create_index_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Create_index_stmtContext,0)


        def create_database_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Create_database_stmtContext,0)


        def drop_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Drop_stmtContext,0)


        def alter_table_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Alter_table_stmtContext,0)


        def insert_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Insert_stmtContext,0)


        def update_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Update_stmtContext,0)


        def delete_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Delete_stmtContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_sql_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_stmt" ):
                listener.enterSql_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_stmt" ):
                listener.exitSql_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql_stmt" ):
                return visitor.visitSql_stmt(self)
            else:
                return visitor.visitChildren(self)




    def sql_stmt(self):

        localctx = PostgreSqlGrammarParser.Sql_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_sql_stmt)
        try:
            self.state = 131
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 101
                self.select_stmt()
                self.state = 102
                self.match(PostgreSqlGrammarParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 104
                self.function_stmt()
                self.state = 105
                self.match(PostgreSqlGrammarParser.SEMI)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 107
                self.create_table_stmt()
                self.state = 108
                self.match(PostgreSqlGrammarParser.SEMI)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 110
                self.create_index_stmt()
                self.state = 111
                self.match(PostgreSqlGrammarParser.SEMI)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 113
                self.create_database_stmt()
                self.state = 114
                self.match(PostgreSqlGrammarParser.SEMI)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 116
                self.drop_stmt()
                self.state = 117
                self.match(PostgreSqlGrammarParser.SEMI)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 119
                self.alter_table_stmt()
                self.state = 120
                self.match(PostgreSqlGrammarParser.SEMI)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 122
                self.insert_stmt()
                self.state = 123
                self.match(PostgreSqlGrammarParser.SEMI)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 125
                self.update_stmt()
                self.state = 126
                self.match(PostgreSqlGrammarParser.SEMI)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 128
                self.delete_stmt()
                self.state = 129
                self.match(PostgreSqlGrammarParser.SEMI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(PostgreSqlGrammarParser.SELECT, 0)

        def FROM(self):
            return self.getToken(PostgreSqlGrammarParser.FROM, 0)

        def table_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Table_referenceContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_referenceContext,i)


        def STAR(self):
            return self.getToken(PostgreSqlGrammarParser.STAR, 0)

        def WITH(self):
            return self.getToken(PostgreSqlGrammarParser.WITH, 0)

        def with_clause(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.With_clauseContext,0)


        def DISTINCT(self):
            return self.getToken(PostgreSqlGrammarParser.DISTINCT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.COMMA)
            else:
                return self.getToken(PostgreSqlGrammarParser.COMMA, i)

        def join_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Join_clauseContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Join_clauseContext,i)


        def WHERE(self):
            return self.getToken(PostgreSqlGrammarParser.WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,0)


        def group_by_clause(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Group_by_clauseContext,0)


        def order_by_clause(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Order_by_clauseContext,0)


        def result_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Result_columnContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Result_columnContext,i)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_stmt" ):
                listener.enterSelect_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_stmt" ):
                listener.exitSelect_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_stmt" ):
                return visitor.visitSelect_stmt(self)
            else:
                return visitor.visitChildren(self)




    def select_stmt(self):

        localctx = PostgreSqlGrammarParser.Select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 135
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 133
                self.match(PostgreSqlGrammarParser.WITH)
                self.state = 134
                self.with_clause()


            self.state = 137
            self.match(PostgreSqlGrammarParser.SELECT)
            self.state = 139
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 138
                self.match(PostgreSqlGrammarParser.DISTINCT)


            self.state = 150
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [97]:
                self.state = 141
                self.match(PostgreSqlGrammarParser.STAR)
                pass
            elif token in [58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 101, 121]:
                self.state = 142
                self.result_column()
                self.state = 147
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==98:
                    self.state = 143
                    self.match(PostgreSqlGrammarParser.COMMA)
                    self.state = 144
                    self.result_column()
                    self.state = 149
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 152
            self.match(PostgreSqlGrammarParser.FROM)
            self.state = 153
            self.table_reference()
            self.state = 158
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==98:
                self.state = 154
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 155
                self.table_reference()
                self.state = 160
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 164
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 279240769083015168) != 0):
                self.state = 161
                self.join_clause()
                self.state = 166
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 169
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28:
                self.state = 167
                self.match(PostgreSqlGrammarParser.WHERE)
                self.state = 168
                self.expr(0)


            self.state = 172
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 171
                self.group_by_clause()


            self.state = 175
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 174
                self.order_by_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSqlGrammarParser.CREATE, 0)

        def FUNCTION(self):
            return self.getToken(PostgreSqlGrammarParser.FUNCTION, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.ID)
            else:
                return self.getToken(PostgreSqlGrammarParser.ID, i)

        def LPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.RPAREN, 0)

        def RETURNS(self):
            return self.getToken(PostgreSqlGrammarParser.RETURNS, 0)

        def AS(self):
            return self.getToken(PostgreSqlGrammarParser.AS, 0)

        def func_body(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Func_bodyContext,0)


        def function_params(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Function_paramsContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_function_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_stmt" ):
                listener.enterFunction_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_stmt" ):
                listener.exitFunction_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_stmt" ):
                return visitor.visitFunction_stmt(self)
            else:
                return visitor.visitChildren(self)




    def function_stmt(self):

        localctx = PostgreSqlGrammarParser.Function_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_function_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 177
            self.match(PostgreSqlGrammarParser.CREATE)
            self.state = 178
            self.match(PostgreSqlGrammarParser.FUNCTION)
            self.state = 179
            self.match(PostgreSqlGrammarParser.ID)
            self.state = 180
            self.match(PostgreSqlGrammarParser.LPAREN)
            self.state = 182
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==121:
                self.state = 181
                self.function_params()


            self.state = 184
            self.match(PostgreSqlGrammarParser.RPAREN)
            self.state = 185
            self.match(PostgreSqlGrammarParser.RETURNS)
            self.state = 186
            self.match(PostgreSqlGrammarParser.ID)
            self.state = 187
            self.match(PostgreSqlGrammarParser.AS)
            self.state = 188
            self.func_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARCHAR(self):
            return self.getToken(PostgreSqlGrammarParser.VARCHAR, 0)

        def LPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.LPAREN, 0)

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.NUMBER)
            else:
                return self.getToken(PostgreSqlGrammarParser.NUMBER, i)

        def RPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.RPAREN, 0)

        def INT(self):
            return self.getToken(PostgreSqlGrammarParser.INT, 0)

        def NUMERIC(self):
            return self.getToken(PostgreSqlGrammarParser.NUMERIC, 0)

        def COMMA(self):
            return self.getToken(PostgreSqlGrammarParser.COMMA, 0)

        def TEXT(self):
            return self.getToken(PostgreSqlGrammarParser.TEXT, 0)

        def DATE(self):
            return self.getToken(PostgreSqlGrammarParser.DATE, 0)

        def TIMESTAMP(self):
            return self.getToken(PostgreSqlGrammarParser.TIMESTAMP, 0)

        def BOOL(self):
            return self.getToken(PostgreSqlGrammarParser.BOOL, 0)

        def SERIAL(self):
            return self.getToken(PostgreSqlGrammarParser.SERIAL, 0)

        def BIGSERIAL(self):
            return self.getToken(PostgreSqlGrammarParser.BIGSERIAL, 0)

        def UUID(self):
            return self.getToken(PostgreSqlGrammarParser.UUID, 0)

        def JSON(self):
            return self.getToken(PostgreSqlGrammarParser.JSON, 0)

        def JSONB(self):
            return self.getToken(PostgreSqlGrammarParser.JSONB, 0)

        def BYTEA(self):
            return self.getToken(PostgreSqlGrammarParser.BYTEA, 0)

        def FLOAT(self):
            return self.getToken(PostgreSqlGrammarParser.FLOAT, 0)

        def REAL(self):
            return self.getToken(PostgreSqlGrammarParser.REAL, 0)

        def DOUBLE(self):
            return self.getToken(PostgreSqlGrammarParser.DOUBLE, 0)

        def DECIMAL(self):
            return self.getToken(PostgreSqlGrammarParser.DECIMAL, 0)

        def MONEY(self):
            return self.getToken(PostgreSqlGrammarParser.MONEY, 0)

        def SMALLINT(self):
            return self.getToken(PostgreSqlGrammarParser.SMALLINT, 0)

        def BIGINT(self):
            return self.getToken(PostgreSqlGrammarParser.BIGINT, 0)

        def CHAR(self):
            return self.getToken(PostgreSqlGrammarParser.CHAR, 0)

        def BIT(self):
            return self.getToken(PostgreSqlGrammarParser.BIT, 0)

        def INTERVAL(self):
            return self.getToken(PostgreSqlGrammarParser.INTERVAL, 0)

        def AUTOINCREMENT(self):
            return self.getToken(PostgreSqlGrammarParser.AUTOINCREMENT, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_type" ):
                listener.enterData_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_type" ):
                listener.exitData_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitData_type" ):
                return visitor.visitData_type(self)
            else:
                return visitor.visitChildren(self)




    def data_type(self):

        localctx = PostgreSqlGrammarParser.Data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_data_type)
        try:
            self.state = 233
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1]:
                self.enterOuterAlt(localctx, 1)
                self.state = 190
                self.match(PostgreSqlGrammarParser.VARCHAR)
                self.state = 191
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 192
                self.match(PostgreSqlGrammarParser.NUMBER)
                self.state = 193
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 194
                self.match(PostgreSqlGrammarParser.INT)
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 3)
                self.state = 195
                self.match(PostgreSqlGrammarParser.NUMERIC)
                self.state = 196
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 197
                self.match(PostgreSqlGrammarParser.NUMBER)
                self.state = 198
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 199
                self.match(PostgreSqlGrammarParser.NUMBER)
                self.state = 200
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [4]:
                self.enterOuterAlt(localctx, 4)
                self.state = 201
                self.match(PostgreSqlGrammarParser.TEXT)
                pass
            elif token in [5]:
                self.enterOuterAlt(localctx, 5)
                self.state = 202
                self.match(PostgreSqlGrammarParser.DATE)
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 6)
                self.state = 203
                self.match(PostgreSqlGrammarParser.TIMESTAMP)
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 7)
                self.state = 204
                self.match(PostgreSqlGrammarParser.BOOL)
                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 8)
                self.state = 205
                self.match(PostgreSqlGrammarParser.SERIAL)
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 9)
                self.state = 206
                self.match(PostgreSqlGrammarParser.BIGSERIAL)
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 10)
                self.state = 207
                self.match(PostgreSqlGrammarParser.UUID)
                pass
            elif token in [11]:
                self.enterOuterAlt(localctx, 11)
                self.state = 208
                self.match(PostgreSqlGrammarParser.JSON)
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 12)
                self.state = 209
                self.match(PostgreSqlGrammarParser.JSONB)
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 13)
                self.state = 210
                self.match(PostgreSqlGrammarParser.BYTEA)
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 14)
                self.state = 211
                self.match(PostgreSqlGrammarParser.FLOAT)
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 15)
                self.state = 212
                self.match(PostgreSqlGrammarParser.REAL)
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 16)
                self.state = 213
                self.match(PostgreSqlGrammarParser.DOUBLE)
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 17)
                self.state = 214
                self.match(PostgreSqlGrammarParser.DECIMAL)
                self.state = 215
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 216
                self.match(PostgreSqlGrammarParser.NUMBER)
                self.state = 217
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 218
                self.match(PostgreSqlGrammarParser.NUMBER)
                self.state = 219
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 18)
                self.state = 220
                self.match(PostgreSqlGrammarParser.MONEY)
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 19)
                self.state = 221
                self.match(PostgreSqlGrammarParser.SMALLINT)
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 20)
                self.state = 222
                self.match(PostgreSqlGrammarParser.BIGINT)
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 21)
                self.state = 223
                self.match(PostgreSqlGrammarParser.CHAR)
                self.state = 224
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 225
                self.match(PostgreSqlGrammarParser.NUMBER)
                self.state = 226
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 22)
                self.state = 227
                self.match(PostgreSqlGrammarParser.BIT)
                self.state = 228
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 229
                self.match(PostgreSqlGrammarParser.NUMBER)
                self.state = 230
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 23)
                self.state = 231
                self.match(PostgreSqlGrammarParser.INTERVAL)
                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 24)
                self.state = 232
                self.match(PostgreSqlGrammarParser.AUTOINCREMENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_paramsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.ID)
            else:
                return self.getToken(PostgreSqlGrammarParser.ID, i)

        def data_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Data_typeContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Data_typeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.COMMA)
            else:
                return self.getToken(PostgreSqlGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_function_params

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_params" ):
                listener.enterFunction_params(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_params" ):
                listener.exitFunction_params(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_params" ):
                return visitor.visitFunction_params(self)
            else:
                return visitor.visitChildren(self)




    def function_params(self):

        localctx = PostgreSqlGrammarParser.Function_paramsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_function_params)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 235
            self.match(PostgreSqlGrammarParser.ID)
            self.state = 236
            self.data_type()
            self.state = 242
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==98:
                self.state = 237
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 238
                self.match(PostgreSqlGrammarParser.ID)
                self.state = 239
                self.data_type()
                self.state = 244
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_func_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_body" ):
                listener.enterFunc_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_body" ):
                listener.exitFunc_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_body" ):
                return visitor.visitFunc_body(self)
            else:
                return visitor.visitChildren(self)




    def func_body(self):

        localctx = PostgreSqlGrammarParser.Func_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_func_body)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 245
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_table_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSqlGrammarParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(PostgreSqlGrammarParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_nameContext,0)


        def LPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.LPAREN, 0)

        def column_def(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Column_defContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Column_defContext,i)


        def RPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.RPAREN, 0)

        def IF(self):
            return self.getToken(PostgreSqlGrammarParser.IF, 0)

        def NOT(self):
            return self.getToken(PostgreSqlGrammarParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(PostgreSqlGrammarParser.EXISTS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.COMMA)
            else:
                return self.getToken(PostgreSqlGrammarParser.COMMA, i)

        def table_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Table_constraintContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_constraintContext,i)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_create_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table_stmt" ):
                listener.enterCreate_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table_stmt" ):
                listener.exitCreate_table_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_table_stmt" ):
                return visitor.visitCreate_table_stmt(self)
            else:
                return visitor.visitChildren(self)




    def create_table_stmt(self):

        localctx = PostgreSqlGrammarParser.Create_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_create_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 247
            self.match(PostgreSqlGrammarParser.CREATE)
            self.state = 251
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93:
                self.state = 248
                self.match(PostgreSqlGrammarParser.IF)
                self.state = 249
                self.match(PostgreSqlGrammarParser.NOT)
                self.state = 250
                self.match(PostgreSqlGrammarParser.EXISTS)


            self.state = 253
            self.match(PostgreSqlGrammarParser.TABLE)
            self.state = 254
            self.table_name()
            self.state = 255
            self.match(PostgreSqlGrammarParser.LPAREN)
            self.state = 256
            self.column_def()
            self.state = 261
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 257
                    self.match(PostgreSqlGrammarParser.COMMA)
                    self.state = 258
                    self.column_def() 
                self.state = 263
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

            self.state = 268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==98:
                self.state = 264
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 265
                self.table_constraint()
                self.state = 270
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 271
            self.match(PostgreSqlGrammarParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def data_type(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Data_typeContext,0)


        def column_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Column_constraintContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Column_constraintContext,i)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_column_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_def" ):
                listener.enterColumn_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_def" ):
                listener.exitColumn_def(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_def" ):
                return visitor.visitColumn_def(self)
            else:
                return visitor.visitChildren(self)




    def column_def(self):

        localctx = PostgreSqlGrammarParser.Column_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_column_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 273
            self.match(PostgreSqlGrammarParser.ID)
            self.state = 274
            self.data_type()
            self.state = 278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & 24189255811073) != 0):
                self.state = 275
                self.column_constraint()
                self.state = 280
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(PostgreSqlGrammarParser.NOT, 0)

        def NULL(self):
            return self.getToken(PostgreSqlGrammarParser.NULL, 0)

        def UNIQUE(self):
            return self.getToken(PostgreSqlGrammarParser.UNIQUE, 0)

        def PRIMARY(self):
            return self.getToken(PostgreSqlGrammarParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(PostgreSqlGrammarParser.KEY, 0)

        def DEFAULT(self):
            return self.getToken(PostgreSqlGrammarParser.DEFAULT, 0)

        def expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_column_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_constraint" ):
                listener.enterColumn_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_constraint" ):
                listener.exitColumn_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_constraint" ):
                return visitor.visitColumn_constraint(self)
            else:
                return visitor.visitChildren(self)




    def column_constraint(self):

        localctx = PostgreSqlGrammarParser.Column_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_column_constraint)
        try:
            self.state = 288
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [37]:
                self.enterOuterAlt(localctx, 1)
                self.state = 281
                self.match(PostgreSqlGrammarParser.NOT)
                self.state = 282
                self.match(PostgreSqlGrammarParser.NULL)
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 2)
                self.state = 283
                self.match(PostgreSqlGrammarParser.UNIQUE)
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 3)
                self.state = 284
                self.match(PostgreSqlGrammarParser.PRIMARY)
                self.state = 285
                self.match(PostgreSqlGrammarParser.KEY)
                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 4)
                self.state = 286
                self.match(PostgreSqlGrammarParser.DEFAULT)
                self.state = 287
                self.expr(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIMARY(self):
            return self.getToken(PostgreSqlGrammarParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(PostgreSqlGrammarParser.KEY, 0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.LPAREN)
            else:
                return self.getToken(PostgreSqlGrammarParser.LPAREN, i)

        def column_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Column_listContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Column_listContext,i)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.RPAREN)
            else:
                return self.getToken(PostgreSqlGrammarParser.RPAREN, i)

        def UNIQUE(self):
            return self.getToken(PostgreSqlGrammarParser.UNIQUE, 0)

        def FOREIGN(self):
            return self.getToken(PostgreSqlGrammarParser.FOREIGN, 0)

        def REFERENCES(self):
            return self.getToken(PostgreSqlGrammarParser.REFERENCES, 0)

        def table_name(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_nameContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_table_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_constraint" ):
                listener.enterTable_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_constraint" ):
                listener.exitTable_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_constraint" ):
                return visitor.visitTable_constraint(self)
            else:
                return visitor.visitChildren(self)




    def table_constraint(self):

        localctx = PostgreSqlGrammarParser.Table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_table_constraint)
        try:
            self.state = 312
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [79]:
                self.enterOuterAlt(localctx, 1)
                self.state = 290
                self.match(PostgreSqlGrammarParser.PRIMARY)
                self.state = 291
                self.match(PostgreSqlGrammarParser.KEY)
                self.state = 292
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 293
                self.column_list()
                self.state = 294
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 2)
                self.state = 296
                self.match(PostgreSqlGrammarParser.UNIQUE)
                self.state = 297
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 298
                self.column_list()
                self.state = 299
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 3)
                self.state = 301
                self.match(PostgreSqlGrammarParser.FOREIGN)
                self.state = 302
                self.match(PostgreSqlGrammarParser.KEY)
                self.state = 303
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 304
                self.column_list()
                self.state = 305
                self.match(PostgreSqlGrammarParser.RPAREN)
                self.state = 306
                self.match(PostgreSqlGrammarParser.REFERENCES)
                self.state = 307
                self.table_name()
                self.state = 308
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 309
                self.column_list()
                self.state = 310
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.ID)
            else:
                return self.getToken(PostgreSqlGrammarParser.ID, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.COMMA)
            else:
                return self.getToken(PostgreSqlGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_list" ):
                listener.enterColumn_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_list" ):
                listener.exitColumn_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_list" ):
                return visitor.visitColumn_list(self)
            else:
                return visitor.visitChildren(self)




    def column_list(self):

        localctx = PostgreSqlGrammarParser.Column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_column_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            self.match(PostgreSqlGrammarParser.ID)
            self.state = 319
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==98:
                self.state = 315
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 316
                self.match(PostgreSqlGrammarParser.ID)
                self.state = 321
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_index_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSqlGrammarParser.CREATE, 0)

        def INDEX(self):
            return self.getToken(PostgreSqlGrammarParser.INDEX, 0)

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def ON(self):
            return self.getToken(PostgreSqlGrammarParser.ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_nameContext,0)


        def LPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.LPAREN, 0)

        def column_list(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Column_listContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.RPAREN, 0)

        def UNIQUE(self):
            return self.getToken(PostgreSqlGrammarParser.UNIQUE, 0)

        def IF(self):
            return self.getToken(PostgreSqlGrammarParser.IF, 0)

        def NOT(self):
            return self.getToken(PostgreSqlGrammarParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(PostgreSqlGrammarParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_create_index_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_index_stmt" ):
                listener.enterCreate_index_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_index_stmt" ):
                listener.exitCreate_index_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_index_stmt" ):
                return visitor.visitCreate_index_stmt(self)
            else:
                return visitor.visitChildren(self)




    def create_index_stmt(self):

        localctx = PostgreSqlGrammarParser.Create_index_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_create_index_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 322
            self.match(PostgreSqlGrammarParser.CREATE)
            self.state = 324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 323
                self.match(PostgreSqlGrammarParser.UNIQUE)


            self.state = 326
            self.match(PostgreSqlGrammarParser.INDEX)
            self.state = 330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93:
                self.state = 327
                self.match(PostgreSqlGrammarParser.IF)
                self.state = 328
                self.match(PostgreSqlGrammarParser.NOT)
                self.state = 329
                self.match(PostgreSqlGrammarParser.EXISTS)


            self.state = 332
            self.match(PostgreSqlGrammarParser.ID)
            self.state = 333
            self.match(PostgreSqlGrammarParser.ON)
            self.state = 334
            self.table_name()
            self.state = 335
            self.match(PostgreSqlGrammarParser.LPAREN)
            self.state = 336
            self.column_list()
            self.state = 337
            self.match(PostgreSqlGrammarParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_database_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSqlGrammarParser.CREATE, 0)

        def DATABASE(self):
            return self.getToken(PostgreSqlGrammarParser.DATABASE, 0)

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def IF(self):
            return self.getToken(PostgreSqlGrammarParser.IF, 0)

        def NOT(self):
            return self.getToken(PostgreSqlGrammarParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(PostgreSqlGrammarParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_create_database_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_database_stmt" ):
                listener.enterCreate_database_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_database_stmt" ):
                listener.exitCreate_database_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_database_stmt" ):
                return visitor.visitCreate_database_stmt(self)
            else:
                return visitor.visitChildren(self)




    def create_database_stmt(self):

        localctx = PostgreSqlGrammarParser.Create_database_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_create_database_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 339
            self.match(PostgreSqlGrammarParser.CREATE)
            self.state = 343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93:
                self.state = 340
                self.match(PostgreSqlGrammarParser.IF)
                self.state = 341
                self.match(PostgreSqlGrammarParser.NOT)
                self.state = 342
                self.match(PostgreSqlGrammarParser.EXISTS)


            self.state = 345
            self.match(PostgreSqlGrammarParser.DATABASE)
            self.state = 346
            self.match(PostgreSqlGrammarParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PostgreSqlGrammarParser.DROP, 0)

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def TABLE(self):
            return self.getToken(PostgreSqlGrammarParser.TABLE, 0)

        def INDEX(self):
            return self.getToken(PostgreSqlGrammarParser.INDEX, 0)

        def DATABASE(self):
            return self.getToken(PostgreSqlGrammarParser.DATABASE, 0)

        def FUNCTION(self):
            return self.getToken(PostgreSqlGrammarParser.FUNCTION, 0)

        def IF(self):
            return self.getToken(PostgreSqlGrammarParser.IF, 0)

        def EXISTS(self):
            return self.getToken(PostgreSqlGrammarParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_drop_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_stmt" ):
                listener.enterDrop_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_stmt" ):
                listener.exitDrop_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_stmt" ):
                return visitor.visitDrop_stmt(self)
            else:
                return visitor.visitChildren(self)




    def drop_stmt(self):

        localctx = PostgreSqlGrammarParser.Drop_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_drop_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 348
            self.match(PostgreSqlGrammarParser.DROP)
            self.state = 349
            _la = self._input.LA(1)
            if not(((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 2207680299009) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93:
                self.state = 350
                self.match(PostgreSqlGrammarParser.IF)
                self.state = 351
                self.match(PostgreSqlGrammarParser.EXISTS)


            self.state = 354
            self.match(PostgreSqlGrammarParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSqlGrammarParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(PostgreSqlGrammarParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_nameContext,0)


        def alter_table_action(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Alter_table_actionContext,0)


        def IF(self):
            return self.getToken(PostgreSqlGrammarParser.IF, 0)

        def EXISTS(self):
            return self.getToken(PostgreSqlGrammarParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_alter_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_stmt" ):
                listener.enterAlter_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_stmt" ):
                listener.exitAlter_table_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_table_stmt" ):
                return visitor.visitAlter_table_stmt(self)
            else:
                return visitor.visitChildren(self)




    def alter_table_stmt(self):

        localctx = PostgreSqlGrammarParser.Alter_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_alter_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 356
            self.match(PostgreSqlGrammarParser.ALTER)
            self.state = 357
            self.match(PostgreSqlGrammarParser.TABLE)
            self.state = 360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93:
                self.state = 358
                self.match(PostgreSqlGrammarParser.IF)
                self.state = 359
                self.match(PostgreSqlGrammarParser.EXISTS)


            self.state = 362
            self.table_name()
            self.state = 363
            self.alter_table_action()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(PostgreSqlGrammarParser.ADD, 0)

        def COLUMN(self):
            return self.getToken(PostgreSqlGrammarParser.COLUMN, 0)

        def column_def(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Column_defContext,0)


        def DROP(self):
            return self.getToken(PostgreSqlGrammarParser.DROP, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.ID)
            else:
                return self.getToken(PostgreSqlGrammarParser.ID, i)

        def IF(self):
            return self.getToken(PostgreSqlGrammarParser.IF, 0)

        def EXISTS(self):
            return self.getToken(PostgreSqlGrammarParser.EXISTS, 0)

        def RENAME(self):
            return self.getToken(PostgreSqlGrammarParser.RENAME, 0)

        def TO(self):
            return self.getToken(PostgreSqlGrammarParser.TO, 0)

        def CONSTRAINT(self):
            return self.getToken(PostgreSqlGrammarParser.CONSTRAINT, 0)

        def table_constraint(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_constraintContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_alter_table_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_action" ):
                listener.enterAlter_table_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_action" ):
                listener.exitAlter_table_action(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_table_action" ):
                return visitor.visitAlter_table_action(self)
            else:
                return visitor.visitChildren(self)




    def alter_table_action(self):

        localctx = PostgreSqlGrammarParser.Alter_table_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_alter_table_action)
        self._la = 0 # Token type
        try:
            self.state = 383
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 365
                self.match(PostgreSqlGrammarParser.ADD)
                self.state = 366
                self.match(PostgreSqlGrammarParser.COLUMN)
                self.state = 367
                self.column_def()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 368
                self.match(PostgreSqlGrammarParser.DROP)
                self.state = 369
                self.match(PostgreSqlGrammarParser.COLUMN)
                self.state = 372
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==93:
                    self.state = 370
                    self.match(PostgreSqlGrammarParser.IF)
                    self.state = 371
                    self.match(PostgreSqlGrammarParser.EXISTS)


                self.state = 374
                self.match(PostgreSqlGrammarParser.ID)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 375
                self.match(PostgreSqlGrammarParser.RENAME)
                self.state = 376
                self.match(PostgreSqlGrammarParser.COLUMN)
                self.state = 377
                self.match(PostgreSqlGrammarParser.ID)
                self.state = 378
                self.match(PostgreSqlGrammarParser.TO)
                self.state = 379
                self.match(PostgreSqlGrammarParser.ID)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 380
                self.match(PostgreSqlGrammarParser.ADD)
                self.state = 381
                self.match(PostgreSqlGrammarParser.CONSTRAINT)
                self.state = 382
                self.table_constraint()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(PostgreSqlGrammarParser.INSERT, 0)

        def INTO(self):
            return self.getToken(PostgreSqlGrammarParser.INTO, 0)

        def table_name(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_nameContext,0)


        def VALUES(self):
            return self.getToken(PostgreSqlGrammarParser.VALUES, 0)

        def insert_values(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Insert_valuesContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Insert_valuesContext,i)


        def LPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.LPAREN, 0)

        def column_list(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Column_listContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.COMMA)
            else:
                return self.getToken(PostgreSqlGrammarParser.COMMA, i)

        def select_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_insert_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_stmt" ):
                listener.enterInsert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_stmt" ):
                listener.exitInsert_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_stmt" ):
                return visitor.visitInsert_stmt(self)
            else:
                return visitor.visitChildren(self)




    def insert_stmt(self):

        localctx = PostgreSqlGrammarParser.Insert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_insert_stmt)
        self._la = 0 # Token type
        try:
            self.state = 414
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 385
                self.match(PostgreSqlGrammarParser.INSERT)
                self.state = 386
                self.match(PostgreSqlGrammarParser.INTO)
                self.state = 387
                self.table_name()
                self.state = 392
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==101:
                    self.state = 388
                    self.match(PostgreSqlGrammarParser.LPAREN)
                    self.state = 389
                    self.column_list()
                    self.state = 390
                    self.match(PostgreSqlGrammarParser.RPAREN)


                self.state = 394
                self.match(PostgreSqlGrammarParser.VALUES)
                self.state = 395
                self.insert_values()
                self.state = 400
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==98:
                    self.state = 396
                    self.match(PostgreSqlGrammarParser.COMMA)
                    self.state = 397
                    self.insert_values()
                    self.state = 402
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 403
                self.match(PostgreSqlGrammarParser.INSERT)
                self.state = 404
                self.match(PostgreSqlGrammarParser.INTO)
                self.state = 405
                self.table_name()
                self.state = 410
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==101:
                    self.state = 406
                    self.match(PostgreSqlGrammarParser.LPAREN)
                    self.state = 407
                    self.column_list()
                    self.state = 408
                    self.match(PostgreSqlGrammarParser.RPAREN)


                self.state = 412
                self.select_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_valuesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.LPAREN, 0)

        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.ValueContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.ValueContext,i)


        def RPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.COMMA)
            else:
                return self.getToken(PostgreSqlGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_insert_values

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_values" ):
                listener.enterInsert_values(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_values" ):
                listener.exitInsert_values(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_values" ):
                return visitor.visitInsert_values(self)
            else:
                return visitor.visitChildren(self)




    def insert_values(self):

        localctx = PostgreSqlGrammarParser.Insert_valuesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_insert_values)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 416
            self.match(PostgreSqlGrammarParser.LPAREN)
            self.state = 417
            self.value()
            self.state = 422
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==98:
                self.state = 418
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 419
                self.value()
                self.state = 424
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 425
            self.match(PostgreSqlGrammarParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(PostgreSqlGrammarParser.UPDATE, 0)

        def table_name(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_nameContext,0)


        def SET(self):
            return self.getToken(PostgreSqlGrammarParser.SET, 0)

        def update_assignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Update_assignmentContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Update_assignmentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.COMMA)
            else:
                return self.getToken(PostgreSqlGrammarParser.COMMA, i)

        def WHERE(self):
            return self.getToken(PostgreSqlGrammarParser.WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_update_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_stmt" ):
                listener.enterUpdate_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_stmt" ):
                listener.exitUpdate_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_stmt" ):
                return visitor.visitUpdate_stmt(self)
            else:
                return visitor.visitChildren(self)




    def update_stmt(self):

        localctx = PostgreSqlGrammarParser.Update_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_update_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 427
            self.match(PostgreSqlGrammarParser.UPDATE)
            self.state = 428
            self.table_name()
            self.state = 429
            self.match(PostgreSqlGrammarParser.SET)
            self.state = 430
            self.update_assignment()
            self.state = 435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==98:
                self.state = 431
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 432
                self.update_assignment()
                self.state = 437
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 440
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28:
                self.state = 438
                self.match(PostgreSqlGrammarParser.WHERE)
                self.state = 439
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_assignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def EQ(self):
            return self.getToken(PostgreSqlGrammarParser.EQ, 0)

        def value(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.ValueContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_update_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_assignment" ):
                listener.enterUpdate_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_assignment" ):
                listener.exitUpdate_assignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_assignment" ):
                return visitor.visitUpdate_assignment(self)
            else:
                return visitor.visitChildren(self)




    def update_assignment(self):

        localctx = PostgreSqlGrammarParser.Update_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_update_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 442
            self.match(PostgreSqlGrammarParser.ID)
            self.state = 443
            self.match(PostgreSqlGrammarParser.EQ)
            self.state = 444
            self.value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(PostgreSqlGrammarParser.DELETE, 0)

        def FROM(self):
            return self.getToken(PostgreSqlGrammarParser.FROM, 0)

        def table_name(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_nameContext,0)


        def WHERE(self):
            return self.getToken(PostgreSqlGrammarParser.WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_delete_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_stmt" ):
                listener.enterDelete_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_stmt" ):
                listener.exitDelete_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelete_stmt" ):
                return visitor.visitDelete_stmt(self)
            else:
                return visitor.visitChildren(self)




    def delete_stmt(self):

        localctx = PostgreSqlGrammarParser.Delete_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_delete_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self.match(PostgreSqlGrammarParser.DELETE)
            self.state = 447
            self.match(PostgreSqlGrammarParser.FROM)
            self.state = 448
            self.table_name()
            self.state = 451
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28:
                self.state = 449
                self.match(PostgreSqlGrammarParser.WHERE)
                self.state = 450
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(PostgreSqlGrammarParser.STRING, 0)

        def NUMBER(self):
            return self.getToken(PostgreSqlGrammarParser.NUMBER, 0)

        def NULL(self):
            return self.getToken(PostgreSqlGrammarParser.NULL, 0)

        def expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue" ):
                listener.enterValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue" ):
                listener.exitValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValue" ):
                return visitor.visitValue(self)
            else:
                return visitor.visitChildren(self)




    def value(self):

        localctx = PostgreSqlGrammarParser.ValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_value)
        try:
            self.state = 457
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 453
                self.match(PostgreSqlGrammarParser.STRING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 454
                self.match(PostgreSqlGrammarParser.NUMBER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 455
                self.match(PostgreSqlGrammarParser.NULL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 456
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Limit_offset_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OFFSET(self):
            return self.getToken(PostgreSqlGrammarParser.OFFSET, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.ExprContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,i)


        def ROWS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.ROWS)
            else:
                return self.getToken(PostgreSqlGrammarParser.ROWS, i)

        def FETCH(self):
            return self.getToken(PostgreSqlGrammarParser.FETCH, 0)

        def FIRST(self):
            return self.getToken(PostgreSqlGrammarParser.FIRST, 0)

        def ONLY(self):
            return self.getToken(PostgreSqlGrammarParser.ONLY, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_limit_offset_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit_offset_clause" ):
                listener.enterLimit_offset_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit_offset_clause" ):
                listener.exitLimit_offset_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimit_offset_clause" ):
                return visitor.visitLimit_offset_clause(self)
            else:
                return visitor.visitChildren(self)




    def limit_offset_clause(self):

        localctx = PostgreSqlGrammarParser.Limit_offset_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_limit_offset_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 459
                self.match(PostgreSqlGrammarParser.OFFSET)
                self.state = 460
                self.expr(0)
                self.state = 461
                self.match(PostgreSqlGrammarParser.ROWS)


            self.state = 471
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==72:
                self.state = 465
                self.match(PostgreSqlGrammarParser.FETCH)
                self.state = 466
                self.match(PostgreSqlGrammarParser.FIRST)
                self.state = 467
                self.expr(0)
                self.state = 468
                self.match(PostgreSqlGrammarParser.ROWS)
                self.state = 469
                self.match(PostgreSqlGrammarParser.ONLY)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PostgreSqlGrammarParser.WITH, 0)

        def cte(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.CteContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.CteContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.COMMA)
            else:
                return self.getToken(PostgreSqlGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_with_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause" ):
                listener.enterWith_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause" ):
                listener.exitWith_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_clause" ):
                return visitor.visitWith_clause(self)
            else:
                return visitor.visitChildren(self)




    def with_clause(self):

        localctx = PostgreSqlGrammarParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_with_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 473
            self.match(PostgreSqlGrammarParser.WITH)
            self.state = 474
            self.cte()
            self.state = 479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==98:
                self.state = 475
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 476
                self.cte()
                self.state = 481
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def AS(self):
            return self.getToken(PostgreSqlGrammarParser.AS, 0)

        def LPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.LPAREN, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Select_stmtContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_cte

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCte" ):
                listener.enterCte(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCte" ):
                listener.exitCte(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCte" ):
                return visitor.visitCte(self)
            else:
                return visitor.visitChildren(self)




    def cte(self):

        localctx = PostgreSqlGrammarParser.CteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_cte)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 482
            self.match(PostgreSqlGrammarParser.ID)
            self.state = 483
            self.match(PostgreSqlGrammarParser.AS)
            self.state = 484
            self.match(PostgreSqlGrammarParser.LPAREN)
            self.state = 485
            self.select_stmt()
            self.state = 486
            self.match(PostgreSqlGrammarParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Result_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_reference(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_referenceContext,0)


        def DOT(self):
            return self.getToken(PostgreSqlGrammarParser.DOT, 0)

        def STAR(self):
            return self.getToken(PostgreSqlGrammarParser.STAR, 0)

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def agg_func(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Agg_funcContext,0)


        def LPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_result_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResult_column" ):
                listener.enterResult_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResult_column" ):
                listener.exitResult_column(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResult_column" ):
                return visitor.visitResult_column(self)
            else:
                return visitor.visitChildren(self)




    def result_column(self):

        localctx = PostgreSqlGrammarParser.Result_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_result_column)
        try:
            self.state = 502
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 488
                self.table_reference()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 489
                self.table_reference()
                self.state = 490
                self.match(PostgreSqlGrammarParser.DOT)
                self.state = 491
                self.match(PostgreSqlGrammarParser.STAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 493
                self.table_reference()
                self.state = 494
                self.match(PostgreSqlGrammarParser.DOT)
                self.state = 495
                self.match(PostgreSqlGrammarParser.ID)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 497
                self.match(PostgreSqlGrammarParser.ID)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 498
                self.agg_func()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 499
                self.match(PostgreSqlGrammarParser.ID)
                self.state = 500
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 501
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def standard_join(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Standard_joinContext,0)


        def natural_join(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Natural_joinContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_clause" ):
                listener.enterJoin_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_clause" ):
                listener.exitJoin_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_clause" ):
                return visitor.visitJoin_clause(self)
            else:
                return visitor.visitChildren(self)




    def join_clause(self):

        localctx = PostgreSqlGrammarParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_join_clause)
        try:
            self.state = 506
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53, 54, 55, 56, 57]:
                self.enterOuterAlt(localctx, 1)
                self.state = 504
                self.standard_join()
                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 2)
                self.state = 505
                self.natural_join()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Standard_joinContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def join_type(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Join_typeContext,0)


        def table_reference(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_referenceContext,0)


        def ON(self):
            return self.getToken(PostgreSqlGrammarParser.ON, 0)

        def expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_standard_join

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandard_join" ):
                listener.enterStandard_join(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandard_join" ):
                listener.exitStandard_join(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandard_join" ):
                return visitor.visitStandard_join(self)
            else:
                return visitor.visitChildren(self)




    def standard_join(self):

        localctx = PostgreSqlGrammarParser.Standard_joinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_standard_join)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 508
            self.join_type()
            self.state = 509
            self.table_reference()
            self.state = 510
            self.match(PostgreSqlGrammarParser.ON)
            self.state = 511
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Natural_joinContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def natural_join_type(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Natural_join_typeContext,0)


        def table_reference(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_referenceContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_natural_join

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNatural_join" ):
                listener.enterNatural_join(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNatural_join" ):
                listener.exitNatural_join(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNatural_join" ):
                return visitor.visitNatural_join(self)
            else:
                return visitor.visitChildren(self)




    def natural_join(self):

        localctx = PostgreSqlGrammarParser.Natural_joinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_natural_join)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 513
            self.natural_join_type()
            self.state = 514
            self.table_reference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INNER(self):
            return self.getToken(PostgreSqlGrammarParser.INNER, 0)

        def JOIN(self):
            return self.getToken(PostgreSqlGrammarParser.JOIN, 0)

        def LEFT(self):
            return self.getToken(PostgreSqlGrammarParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(PostgreSqlGrammarParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(PostgreSqlGrammarParser.FULL, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_join_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_type" ):
                listener.enterJoin_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_type" ):
                listener.exitJoin_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_type" ):
                return visitor.visitJoin_type(self)
            else:
                return visitor.visitChildren(self)




    def join_type(self):

        localctx = PostgreSqlGrammarParser.Join_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_join_type)
        try:
            self.state = 525
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.enterOuterAlt(localctx, 1)
                self.state = 516
                self.match(PostgreSqlGrammarParser.INNER)
                self.state = 517
                self.match(PostgreSqlGrammarParser.JOIN)
                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 2)
                self.state = 518
                self.match(PostgreSqlGrammarParser.LEFT)
                self.state = 519
                self.match(PostgreSqlGrammarParser.JOIN)
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 3)
                self.state = 520
                self.match(PostgreSqlGrammarParser.RIGHT)
                self.state = 521
                self.match(PostgreSqlGrammarParser.JOIN)
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 4)
                self.state = 522
                self.match(PostgreSqlGrammarParser.FULL)
                self.state = 523
                self.match(PostgreSqlGrammarParser.JOIN)
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 5)
                self.state = 524
                self.match(PostgreSqlGrammarParser.JOIN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Natural_join_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NATURAL(self):
            return self.getToken(PostgreSqlGrammarParser.NATURAL, 0)

        def JOIN(self):
            return self.getToken(PostgreSqlGrammarParser.JOIN, 0)

        def INNER(self):
            return self.getToken(PostgreSqlGrammarParser.INNER, 0)

        def LEFT(self):
            return self.getToken(PostgreSqlGrammarParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(PostgreSqlGrammarParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(PostgreSqlGrammarParser.FULL, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_natural_join_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNatural_join_type" ):
                listener.enterNatural_join_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNatural_join_type" ):
                listener.exitNatural_join_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNatural_join_type" ):
                return visitor.visitNatural_join_type(self)
            else:
                return visitor.visitChildren(self)




    def natural_join_type(self):

        localctx = PostgreSqlGrammarParser.Natural_join_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_natural_join_type)
        try:
            self.state = 541
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 527
                self.match(PostgreSqlGrammarParser.NATURAL)
                self.state = 528
                self.match(PostgreSqlGrammarParser.JOIN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 529
                self.match(PostgreSqlGrammarParser.NATURAL)
                self.state = 530
                self.match(PostgreSqlGrammarParser.INNER)
                self.state = 531
                self.match(PostgreSqlGrammarParser.JOIN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 532
                self.match(PostgreSqlGrammarParser.NATURAL)
                self.state = 533
                self.match(PostgreSqlGrammarParser.LEFT)
                self.state = 534
                self.match(PostgreSqlGrammarParser.JOIN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 535
                self.match(PostgreSqlGrammarParser.NATURAL)
                self.state = 536
                self.match(PostgreSqlGrammarParser.RIGHT)
                self.state = 537
                self.match(PostgreSqlGrammarParser.JOIN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 538
                self.match(PostgreSqlGrammarParser.NATURAL)
                self.state = 539
                self.match(PostgreSqlGrammarParser.FULL)
                self.state = 540
                self.match(PostgreSqlGrammarParser.JOIN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_nameContext,0)


        def alias(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.AliasContext,0)


        def LPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.LPAREN, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Select_stmtContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_table_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_reference" ):
                listener.enterTable_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_reference" ):
                listener.exitTable_reference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_reference" ):
                return visitor.visitTable_reference(self)
            else:
                return visitor.visitChildren(self)




    def table_reference(self):

        localctx = PostgreSqlGrammarParser.Table_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_table_reference)
        self._la = 0 # Token type
        try:
            self.state = 553
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [121]:
                self.enterOuterAlt(localctx, 1)
                self.state = 543
                self.table_name()
                self.state = 545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==38 or _la==121:
                    self.state = 544
                    self.alias()


                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 2)
                self.state = 547
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 548
                self.select_stmt()
                self.state = 549
                self.match(PostgreSqlGrammarParser.RPAREN)
                self.state = 551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==38 or _la==121:
                    self.state = 550
                    self.alias()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_name" ):
                return visitor.visitTable_name(self)
            else:
                return visitor.visitChildren(self)




    def table_name(self):

        localctx = PostgreSqlGrammarParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 555
            self.match(PostgreSqlGrammarParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(PostgreSqlGrammarParser.AS, 0)

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias" ):
                listener.enterAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias" ):
                listener.exitAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlias" ):
                return visitor.visitAlias(self)
            else:
                return visitor.visitChildren(self)




    def alias(self):

        localctx = PostgreSqlGrammarParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_alias)
        try:
            self.state = 560
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38]:
                self.enterOuterAlt(localctx, 1)
                self.state = 557
                self.match(PostgreSqlGrammarParser.AS)
                self.state = 558
                self.match(PostgreSqlGrammarParser.ID)
                pass
            elif token in [121]:
                self.enterOuterAlt(localctx, 2)
                self.state = 559
                self.match(PostgreSqlGrammarParser.ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(PostgreSqlGrammarParser.GROUP, 0)

        def BY(self):
            return self.getToken(PostgreSqlGrammarParser.BY, 0)

        def group_by_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Group_by_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Group_by_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.COMMA)
            else:
                return self.getToken(PostgreSqlGrammarParser.COMMA, i)

        def HAVING(self):
            return self.getToken(PostgreSqlGrammarParser.HAVING, 0)

        def expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_group_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_clause" ):
                listener.enterGroup_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_clause" ):
                listener.exitGroup_by_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_by_clause" ):
                return visitor.visitGroup_by_clause(self)
            else:
                return visitor.visitChildren(self)




    def group_by_clause(self):

        localctx = PostgreSqlGrammarParser.Group_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_group_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 562
            self.match(PostgreSqlGrammarParser.GROUP)
            self.state = 563
            self.match(PostgreSqlGrammarParser.BY)
            self.state = 564
            self.group_by_item()
            self.state = 569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==98:
                self.state = 565
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 566
                self.group_by_item()
                self.state = 571
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==31:
                self.state = 572
                self.match(PostgreSqlGrammarParser.HAVING)
                self.state = 573
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def table_reference(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_referenceContext,0)


        def DOT(self):
            return self.getToken(PostgreSqlGrammarParser.DOT, 0)

        def agg_func(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Agg_funcContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_group_by_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_item" ):
                listener.enterGroup_by_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_item" ):
                listener.exitGroup_by_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_by_item" ):
                return visitor.visitGroup_by_item(self)
            else:
                return visitor.visitChildren(self)




    def group_by_item(self):

        localctx = PostgreSqlGrammarParser.Group_by_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_group_by_item)
        try:
            self.state = 582
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 576
                self.match(PostgreSqlGrammarParser.ID)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 577
                self.table_reference()
                self.state = 578
                self.match(PostgreSqlGrammarParser.DOT)
                self.state = 579
                self.match(PostgreSqlGrammarParser.ID)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 581
                self.agg_func()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(PostgreSqlGrammarParser.ORDER, 0)

        def BY(self):
            return self.getToken(PostgreSqlGrammarParser.BY, 0)

        def order_by_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Order_by_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Order_by_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.COMMA)
            else:
                return self.getToken(PostgreSqlGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_order_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_clause" ):
                listener.enterOrder_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_clause" ):
                listener.exitOrder_by_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrder_by_clause" ):
                return visitor.visitOrder_by_clause(self)
            else:
                return visitor.visitChildren(self)




    def order_by_clause(self):

        localctx = PostgreSqlGrammarParser.Order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_order_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            self.match(PostgreSqlGrammarParser.ORDER)
            self.state = 585
            self.match(PostgreSqlGrammarParser.BY)
            self.state = 586
            self.order_by_item()
            self.state = 591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==98:
                self.state = 587
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 588
                self.order_by_item()
                self.state = 593
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def ASC(self):
            return self.getToken(PostgreSqlGrammarParser.ASC, 0)

        def DESC(self):
            return self.getToken(PostgreSqlGrammarParser.DESC, 0)

        def table_reference(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_referenceContext,0)


        def DOT(self):
            return self.getToken(PostgreSqlGrammarParser.DOT, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_order_by_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_item" ):
                listener.enterOrder_by_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_item" ):
                listener.exitOrder_by_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrder_by_item" ):
                return visitor.visitOrder_by_item(self)
            else:
                return visitor.visitChildren(self)




    def order_by_item(self):

        localctx = PostgreSqlGrammarParser.Order_by_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_order_by_item)
        self._la = 0 # Token type
        try:
            self.state = 604
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 594
                self.match(PostgreSqlGrammarParser.ID)
                self.state = 596
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==33 or _la==34:
                    self.state = 595
                    _la = self._input.LA(1)
                    if not(_la==33 or _la==34):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 598
                self.table_reference()
                self.state = 599
                self.match(PostgreSqlGrammarParser.DOT)
                self.state = 600
                self.match(PostgreSqlGrammarParser.ID)
                self.state = 602
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==33 or _la==34:
                    self.state = 601
                    _la = self._input.LA(1)
                    if not(_la==33 or _la==34):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Agg_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COUNT(self):
            return self.getToken(PostgreSqlGrammarParser.COUNT, 0)

        def LPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.RPAREN, 0)

        def STAR(self):
            return self.getToken(PostgreSqlGrammarParser.STAR, 0)

        def expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,0)


        def SUM(self):
            return self.getToken(PostgreSqlGrammarParser.SUM, 0)

        def AVG(self):
            return self.getToken(PostgreSqlGrammarParser.AVG, 0)

        def MIN(self):
            return self.getToken(PostgreSqlGrammarParser.MIN, 0)

        def MAX(self):
            return self.getToken(PostgreSqlGrammarParser.MAX, 0)

        def ARRAY_AGG(self):
            return self.getToken(PostgreSqlGrammarParser.ARRAY_AGG, 0)

        def STRING_AGG(self):
            return self.getToken(PostgreSqlGrammarParser.STRING_AGG, 0)

        def COMMA(self):
            return self.getToken(PostgreSqlGrammarParser.COMMA, 0)

        def STRING(self):
            return self.getToken(PostgreSqlGrammarParser.STRING, 0)

        def BOOL_AND(self):
            return self.getToken(PostgreSqlGrammarParser.BOOL_AND, 0)

        def BOOL_OR(self):
            return self.getToken(PostgreSqlGrammarParser.BOOL_OR, 0)

        def VAR_POP(self):
            return self.getToken(PostgreSqlGrammarParser.VAR_POP, 0)

        def VAR_SAMP(self):
            return self.getToken(PostgreSqlGrammarParser.VAR_SAMP, 0)

        def STDDEV_POP(self):
            return self.getToken(PostgreSqlGrammarParser.STDDEV_POP, 0)

        def STDDEV_SAMP(self):
            return self.getToken(PostgreSqlGrammarParser.STDDEV_SAMP, 0)

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_agg_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAgg_func" ):
                listener.enterAgg_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAgg_func" ):
                listener.exitAgg_func(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAgg_func" ):
                return visitor.visitAgg_func(self)
            else:
                return visitor.visitChildren(self)




    def agg_func(self):

        localctx = PostgreSqlGrammarParser.Agg_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_agg_func)
        try:
            self.state = 678
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [58]:
                self.enterOuterAlt(localctx, 1)
                self.state = 606
                self.match(PostgreSqlGrammarParser.COUNT)
                self.state = 607
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 610
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [97]:
                    self.state = 608
                    self.match(PostgreSqlGrammarParser.STAR)
                    pass
                elif token in [37, 45, 95, 96, 101, 121]:
                    self.state = 609
                    self.expr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 612
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [59]:
                self.enterOuterAlt(localctx, 2)
                self.state = 613
                self.match(PostgreSqlGrammarParser.SUM)
                self.state = 614
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 615
                self.expr(0)
                self.state = 616
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 3)
                self.state = 618
                self.match(PostgreSqlGrammarParser.AVG)
                self.state = 619
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 620
                self.expr(0)
                self.state = 621
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 4)
                self.state = 623
                self.match(PostgreSqlGrammarParser.MIN)
                self.state = 624
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 625
                self.expr(0)
                self.state = 626
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 5)
                self.state = 628
                self.match(PostgreSqlGrammarParser.MAX)
                self.state = 629
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 630
                self.expr(0)
                self.state = 631
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 6)
                self.state = 633
                self.match(PostgreSqlGrammarParser.ARRAY_AGG)
                self.state = 634
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 635
                self.expr(0)
                self.state = 636
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 7)
                self.state = 638
                self.match(PostgreSqlGrammarParser.STRING_AGG)
                self.state = 639
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 640
                self.expr(0)
                self.state = 641
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 642
                self.match(PostgreSqlGrammarParser.STRING)
                self.state = 643
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 8)
                self.state = 645
                self.match(PostgreSqlGrammarParser.BOOL_AND)
                self.state = 646
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 647
                self.expr(0)
                self.state = 648
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 9)
                self.state = 650
                self.match(PostgreSqlGrammarParser.BOOL_OR)
                self.state = 651
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 652
                self.expr(0)
                self.state = 653
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 10)
                self.state = 655
                self.match(PostgreSqlGrammarParser.VAR_POP)
                self.state = 656
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 657
                self.expr(0)
                self.state = 658
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 11)
                self.state = 660
                self.match(PostgreSqlGrammarParser.VAR_SAMP)
                self.state = 661
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 662
                self.expr(0)
                self.state = 663
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 12)
                self.state = 665
                self.match(PostgreSqlGrammarParser.STDDEV_POP)
                self.state = 666
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 667
                self.expr(0)
                self.state = 668
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 13)
                self.state = 670
                self.match(PostgreSqlGrammarParser.STDDEV_SAMP)
                self.state = 671
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 672
                self.expr(0)
                self.state = 673
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [121]:
                self.enterOuterAlt(localctx, 14)
                self.state = 675
                self.match(PostgreSqlGrammarParser.ID)
                self.state = 676
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 677
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(PostgreSqlGrammarParser.NOT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.ExprContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,i)


        def arith_expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Arith_exprContext,0)


        def EQ(self):
            return self.getToken(PostgreSqlGrammarParser.EQ, 0)

        def NEQ(self):
            return self.getToken(PostgreSqlGrammarParser.NEQ, 0)

        def LT(self):
            return self.getToken(PostgreSqlGrammarParser.LT, 0)

        def LTE(self):
            return self.getToken(PostgreSqlGrammarParser.LTE, 0)

        def GT(self):
            return self.getToken(PostgreSqlGrammarParser.GT, 0)

        def GTE(self):
            return self.getToken(PostgreSqlGrammarParser.GTE, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.STRING)
            else:
                return self.getToken(PostgreSqlGrammarParser.STRING, i)

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.NUMBER)
            else:
                return self.getToken(PostgreSqlGrammarParser.NUMBER, i)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.ID)
            else:
                return self.getToken(PostgreSqlGrammarParser.ID, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.DOT)
            else:
                return self.getToken(PostgreSqlGrammarParser.DOT, i)

        def IS(self):
            return self.getToken(PostgreSqlGrammarParser.IS, 0)

        def NULL(self):
            return self.getToken(PostgreSqlGrammarParser.NULL, 0)

        def LIKE(self):
            return self.getToken(PostgreSqlGrammarParser.LIKE, 0)

        def BETWEEN(self):
            return self.getToken(PostgreSqlGrammarParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(PostgreSqlGrammarParser.AND, 0)

        def LPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.LPAREN, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Select_stmtContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.RPAREN, 0)

        def case_expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Case_exprContext,0)


        def function_call(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Function_callContext,0)


        def OR(self):
            return self.getToken(PostgreSqlGrammarParser.OR, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PostgreSqlGrammarParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 80
        self.enterRecursionRule(localctx, 80, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 681
                self.match(PostgreSqlGrammarParser.NOT)
                self.state = 682
                self.expr(9)
                pass

            elif la_ == 2:
                self.state = 683
                self.arith_expr(0)
                pass

            elif la_ == 3:
                self.state = 691
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [95]:
                    self.state = 684
                    self.match(PostgreSqlGrammarParser.STRING)
                    pass
                elif token in [96]:
                    self.state = 685
                    self.match(PostgreSqlGrammarParser.NUMBER)
                    pass
                elif token in [121]:
                    self.state = 686
                    self.match(PostgreSqlGrammarParser.ID)
                    self.state = 689
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==100:
                        self.state = 687
                        self.match(PostgreSqlGrammarParser.DOT)
                        self.state = 688
                        self.match(PostgreSqlGrammarParser.ID)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 693
                _la = self._input.LA(1)
                if not(((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & 63) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 701
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [95]:
                    self.state = 694
                    self.match(PostgreSqlGrammarParser.STRING)
                    pass
                elif token in [96]:
                    self.state = 695
                    self.match(PostgreSqlGrammarParser.NUMBER)
                    pass
                elif token in [121]:
                    self.state = 696
                    self.match(PostgreSqlGrammarParser.ID)
                    self.state = 699
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                    if la_ == 1:
                        self.state = 697
                        self.match(PostgreSqlGrammarParser.DOT)
                        self.state = 698
                        self.match(PostgreSqlGrammarParser.ID)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                self.state = 703
                self.match(PostgreSqlGrammarParser.ID)
                self.state = 704
                self.match(PostgreSqlGrammarParser.IS)
                self.state = 706
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==37:
                    self.state = 705
                    self.match(PostgreSqlGrammarParser.NOT)


                self.state = 708
                self.match(PostgreSqlGrammarParser.NULL)
                pass

            elif la_ == 5:
                self.state = 709
                self.match(PostgreSqlGrammarParser.ID)
                self.state = 710
                self.match(PostgreSqlGrammarParser.LIKE)
                self.state = 711
                self.match(PostgreSqlGrammarParser.STRING)
                pass

            elif la_ == 6:
                self.state = 712
                self.match(PostgreSqlGrammarParser.ID)
                self.state = 713
                self.match(PostgreSqlGrammarParser.BETWEEN)
                self.state = 714
                self.expr(0)
                self.state = 715
                self.match(PostgreSqlGrammarParser.AND)
                self.state = 716
                self.expr(4)
                pass

            elif la_ == 7:
                self.state = 718
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 719
                self.select_stmt()
                self.state = 720
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass

            elif la_ == 8:
                self.state = 722
                self.case_expr()
                pass

            elif la_ == 9:
                self.state = 723
                self.function_call()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 734
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 732
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                    if la_ == 1:
                        localctx = PostgreSqlGrammarParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 726
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 727
                        self.match(PostgreSqlGrammarParser.AND)
                        self.state = 728
                        self.expr(12)
                        pass

                    elif la_ == 2:
                        localctx = PostgreSqlGrammarParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 729
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 730
                        self.match(PostgreSqlGrammarParser.OR)
                        self.state = 731
                        self.expr(11)
                        pass

             
                self.state = 736
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Arith_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.AtomContext,0)


        def arith_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Arith_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Arith_exprContext,i)


        def PLUS(self):
            return self.getToken(PostgreSqlGrammarParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(PostgreSqlGrammarParser.MINUS, 0)

        def STAR(self):
            return self.getToken(PostgreSqlGrammarParser.STAR, 0)

        def SLASH(self):
            return self.getToken(PostgreSqlGrammarParser.SLASH, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_arith_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArith_expr" ):
                listener.enterArith_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArith_expr" ):
                listener.exitArith_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArith_expr" ):
                return visitor.visitArith_expr(self)
            else:
                return visitor.visitChildren(self)



    def arith_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PostgreSqlGrammarParser.Arith_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 82
        self.enterRecursionRule(localctx, 82, self.RULE_arith_expr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 738
            self.atom()
            self._ctx.stop = self._input.LT(-1)
            self.state = 754
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 752
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                    if la_ == 1:
                        localctx = PostgreSqlGrammarParser.Arith_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_arith_expr)
                        self.state = 740
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 741
                        self.match(PostgreSqlGrammarParser.PLUS)
                        self.state = 742
                        self.arith_expr(6)
                        pass

                    elif la_ == 2:
                        localctx = PostgreSqlGrammarParser.Arith_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_arith_expr)
                        self.state = 743
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 744
                        self.match(PostgreSqlGrammarParser.MINUS)
                        self.state = 745
                        self.arith_expr(5)
                        pass

                    elif la_ == 3:
                        localctx = PostgreSqlGrammarParser.Arith_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_arith_expr)
                        self.state = 746
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 747
                        self.match(PostgreSqlGrammarParser.STAR)
                        self.state = 748
                        self.arith_expr(4)
                        pass

                    elif la_ == 4:
                        localctx = PostgreSqlGrammarParser.Arith_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_arith_expr)
                        self.state = 749
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 750
                        self.match(PostgreSqlGrammarParser.SLASH)
                        self.state = 751
                        self.arith_expr(3)
                        pass

             
                self.state = 756
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def NUMBER(self):
            return self.getToken(PostgreSqlGrammarParser.NUMBER, 0)

        def LPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.LPAREN, 0)

        def arith_expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Arith_exprContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom" ):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = PostgreSqlGrammarParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_atom)
        try:
            self.state = 763
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [121]:
                self.enterOuterAlt(localctx, 1)
                self.state = 757
                self.match(PostgreSqlGrammarParser.ID)
                pass
            elif token in [96]:
                self.enterOuterAlt(localctx, 2)
                self.state = 758
                self.match(PostgreSqlGrammarParser.NUMBER)
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 3)
                self.state = 759
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 760
                self.arith_expr(0)
                self.state = 761
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(PostgreSqlGrammarParser.CASE, 0)

        def END(self):
            return self.getToken(PostgreSqlGrammarParser.END, 0)

        def when_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.When_clauseContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.When_clauseContext,i)


        def ELSE(self):
            return self.getToken(PostgreSqlGrammarParser.ELSE, 0)

        def expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,0)


        def NULL(self):
            return self.getToken(PostgreSqlGrammarParser.NULL, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_case_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_expr" ):
                listener.enterCase_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_expr" ):
                listener.exitCase_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase_expr" ):
                return visitor.visitCase_expr(self)
            else:
                return visitor.visitChildren(self)




    def case_expr(self):

        localctx = PostgreSqlGrammarParser.Case_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_case_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 765
            self.match(PostgreSqlGrammarParser.CASE)
            self.state = 767 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 766
                self.when_clause()
                self.state = 769 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==46):
                    break

            self.state = 776
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 771
                self.match(PostgreSqlGrammarParser.ELSE)
                self.state = 774
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [37, 45, 95, 96, 101, 121]:
                    self.state = 772
                    self.expr(0)
                    pass
                elif token in [41]:
                    self.state = 773
                    self.match(PostgreSqlGrammarParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 778
            self.match(PostgreSqlGrammarParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class When_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(PostgreSqlGrammarParser.WHEN, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.ExprContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,i)


        def THEN(self):
            return self.getToken(PostgreSqlGrammarParser.THEN, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_when_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhen_clause" ):
                listener.enterWhen_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhen_clause" ):
                listener.exitWhen_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhen_clause" ):
                return visitor.visitWhen_clause(self)
            else:
                return visitor.visitChildren(self)




    def when_clause(self):

        localctx = PostgreSqlGrammarParser.When_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_when_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 780
            self.match(PostgreSqlGrammarParser.WHEN)
            self.state = 781
            self.expr(0)
            self.state = 782
            self.match(PostgreSqlGrammarParser.THEN)
            self.state = 783
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def LPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.RPAREN, 0)

        def function_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Function_argContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Function_argContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.COMMA)
            else:
                return self.getToken(PostgreSqlGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_function_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call" ):
                listener.enterFunction_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call" ):
                listener.exitFunction_call(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_call" ):
                return visitor.visitFunction_call(self)
            else:
                return visitor.visitChildren(self)




    def function_call(self):

        localctx = PostgreSqlGrammarParser.Function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_function_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 785
            self.match(PostgreSqlGrammarParser.ID)
            self.state = 786
            self.match(PostgreSqlGrammarParser.LPAREN)
            self.state = 795
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==37 or _la==45 or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 67108931) != 0):
                self.state = 787
                self.function_arg()
                self.state = 792
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==98:
                    self.state = 788
                    self.match(PostgreSqlGrammarParser.COMMA)
                    self.state = 789
                    self.function_arg()
                    self.state = 794
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 797
            self.match(PostgreSqlGrammarParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_function_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_arg" ):
                listener.enterFunction_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_arg" ):
                listener.exitFunction_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_arg" ):
                return visitor.visitFunction_arg(self)
            else:
                return visitor.visitChildren(self)




    def function_arg(self):

        localctx = PostgreSqlGrammarParser.Function_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_function_arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[40] = self.expr_sempred
        self._predicates[41] = self.arith_expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 10)
         

    def arith_expr_sempred(self, localctx:Arith_exprContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 2)
         




