# Generated from antlr/PostgreSql/PostgreSqlGrammar.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,138,959,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,1,0,1,0,5,0,97,8,0,10,0,12,0,100,9,0,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,132,8,1,1,2,1,2,1,2,1,2,
        1,2,1,2,3,2,140,8,2,1,2,1,2,3,2,144,8,2,1,2,1,2,1,2,1,2,5,2,150,
        8,2,10,2,12,2,153,9,2,3,2,155,8,2,1,2,1,2,1,2,1,2,5,2,161,8,2,10,
        2,12,2,164,9,2,1,2,5,2,167,8,2,10,2,12,2,170,9,2,1,2,1,2,3,2,174,
        8,2,1,2,3,2,177,8,2,1,2,3,2,180,8,2,1,2,1,2,3,2,184,8,2,1,3,1,3,
        1,3,3,3,189,8,3,1,3,1,3,3,3,193,8,3,3,3,195,8,3,1,3,1,3,1,3,3,3,
        200,8,3,3,3,202,8,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,210,8,3,3,3,212,
        8,3,1,4,1,4,1,4,1,4,1,4,3,4,219,8,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,270,8,5,1,6,1,6,1,6,
        1,6,1,6,5,6,277,8,6,10,6,12,6,280,9,6,1,7,1,7,1,8,1,8,1,8,1,8,3,
        8,288,8,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,296,8,8,10,8,12,8,299,9,8,
        1,8,1,8,5,8,303,8,8,10,8,12,8,306,9,8,1,8,1,8,1,9,1,9,1,9,5,9,313,
        8,9,10,9,12,9,316,9,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,325,
        8,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,349,8,11,
        1,12,1,12,1,12,5,12,354,8,12,10,12,12,12,357,9,12,1,13,1,13,3,13,
        361,8,13,1,13,1,13,1,13,1,13,3,13,367,8,13,1,13,1,13,1,13,1,13,1,
        13,1,13,1,13,1,14,1,14,1,14,1,14,3,14,380,8,14,1,14,1,14,1,14,1,
        15,1,15,1,15,1,15,3,15,389,8,15,1,15,1,15,1,16,1,16,1,16,1,16,3,
        16,397,8,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,
        17,409,8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,420,
        8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,429,8,18,1,18,1,18,
        1,18,1,18,5,18,435,8,18,10,18,12,18,438,9,18,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,3,18,447,8,18,1,18,1,18,3,18,451,8,18,1,19,1,19,1,
        19,1,19,5,19,457,8,19,10,19,12,19,460,9,19,1,19,1,19,1,20,1,20,1,
        20,1,20,1,20,1,20,5,20,470,8,20,10,20,12,20,473,9,20,1,20,1,20,3,
        20,477,8,20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,3,22,488,
        8,22,1,23,1,23,1,23,1,23,3,23,494,8,23,1,24,1,24,1,24,1,24,5,24,
        500,8,24,10,24,12,24,503,9,24,1,25,1,25,1,25,1,25,1,25,1,25,1,26,
        1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
        3,26,525,8,26,1,27,1,27,3,27,529,8,27,1,28,1,28,1,28,1,28,1,28,1,
        29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,548,
        8,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
        1,31,1,31,3,31,564,8,31,1,32,1,32,3,32,568,8,32,1,32,1,32,1,32,1,
        32,3,32,574,8,32,3,32,576,8,32,1,33,1,33,1,34,1,34,1,34,3,34,583,
        8,34,1,35,1,35,1,35,1,35,1,35,5,35,590,8,35,10,35,12,35,593,9,35,
        1,35,1,35,3,35,597,8,35,1,36,1,36,1,36,1,36,1,36,1,36,3,36,605,8,
        36,1,37,1,37,1,37,1,37,1,37,5,37,612,8,37,10,37,12,37,615,9,37,1,
        38,1,38,3,38,619,8,38,1,38,1,38,1,38,1,38,3,38,625,8,38,3,38,627,
        8,38,1,39,1,39,1,39,1,39,3,39,633,8,39,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,701,8,39,1,40,
        1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,712,8,40,3,40,714,8,
        40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,722,8,40,3,40,724,8,40,1,40,
        1,40,1,40,3,40,729,8,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,
        1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,
        1,40,1,40,3,40,754,8,40,3,40,756,8,40,3,40,758,8,40,3,40,760,8,40,
        1,40,1,40,1,40,1,40,1,40,1,40,5,40,768,8,40,10,40,12,40,771,9,40,
        1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
        1,41,1,41,5,41,788,8,41,10,41,12,41,791,9,41,1,42,1,42,1,42,1,42,
        1,42,1,42,3,42,799,8,42,1,43,1,43,4,43,803,8,43,11,43,12,43,804,
        1,43,1,43,1,43,3,43,810,8,43,3,43,812,8,43,1,43,1,43,1,44,1,44,1,
        44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,5,45,826,8,45,10,45,12,45,
        829,9,45,3,45,831,8,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,
        45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,
        45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,
        45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,
        45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,
        45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,
        45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,
        45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,
        45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,
        45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,955,8,45,1,
        46,1,46,1,46,0,2,80,82,47,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
        30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
        74,76,78,80,82,84,86,88,90,92,0,3,4,0,51,51,77,77,84,84,92,92,1,
        0,33,34,1,0,120,125,1089,0,94,1,0,0,0,2,131,1,0,0,0,4,183,1,0,0,
        0,6,211,1,0,0,0,8,213,1,0,0,0,10,269,1,0,0,0,12,271,1,0,0,0,14,281,
        1,0,0,0,16,283,1,0,0,0,18,309,1,0,0,0,20,324,1,0,0,0,22,348,1,0,
        0,0,24,350,1,0,0,0,26,358,1,0,0,0,28,375,1,0,0,0,30,384,1,0,0,0,
        32,392,1,0,0,0,34,419,1,0,0,0,36,450,1,0,0,0,38,452,1,0,0,0,40,463,
        1,0,0,0,42,478,1,0,0,0,44,482,1,0,0,0,46,493,1,0,0,0,48,495,1,0,
        0,0,50,504,1,0,0,0,52,524,1,0,0,0,54,528,1,0,0,0,56,530,1,0,0,0,
        58,535,1,0,0,0,60,547,1,0,0,0,62,563,1,0,0,0,64,575,1,0,0,0,66,577,
        1,0,0,0,68,582,1,0,0,0,70,584,1,0,0,0,72,604,1,0,0,0,74,606,1,0,
        0,0,76,626,1,0,0,0,78,700,1,0,0,0,80,759,1,0,0,0,82,772,1,0,0,0,
        84,798,1,0,0,0,86,800,1,0,0,0,88,815,1,0,0,0,90,954,1,0,0,0,92,956,
        1,0,0,0,94,98,3,2,1,0,95,97,3,2,1,0,96,95,1,0,0,0,97,100,1,0,0,0,
        98,96,1,0,0,0,98,99,1,0,0,0,99,1,1,0,0,0,100,98,1,0,0,0,101,102,
        3,4,2,0,102,103,5,116,0,0,103,132,1,0,0,0,104,105,3,8,4,0,105,106,
        5,116,0,0,106,132,1,0,0,0,107,108,3,16,8,0,108,109,5,116,0,0,109,
        132,1,0,0,0,110,111,3,26,13,0,111,112,5,116,0,0,112,132,1,0,0,0,
        113,114,3,28,14,0,114,115,5,116,0,0,115,132,1,0,0,0,116,117,3,30,
        15,0,117,118,5,116,0,0,118,132,1,0,0,0,119,120,3,32,16,0,120,121,
        5,116,0,0,121,132,1,0,0,0,122,123,3,36,18,0,123,124,5,116,0,0,124,
        132,1,0,0,0,125,126,3,40,20,0,126,127,5,116,0,0,127,132,1,0,0,0,
        128,129,3,44,22,0,129,130,5,116,0,0,130,132,1,0,0,0,131,101,1,0,
        0,0,131,104,1,0,0,0,131,107,1,0,0,0,131,110,1,0,0,0,131,113,1,0,
        0,0,131,116,1,0,0,0,131,119,1,0,0,0,131,122,1,0,0,0,131,125,1,0,
        0,0,131,128,1,0,0,0,132,3,1,0,0,0,133,134,5,118,0,0,134,135,3,4,
        2,0,135,136,5,119,0,0,136,184,1,0,0,0,137,138,5,26,0,0,138,140,3,
        48,24,0,139,137,1,0,0,0,139,140,1,0,0,0,140,141,1,0,0,0,141,143,
        5,25,0,0,142,144,5,76,0,0,143,142,1,0,0,0,143,144,1,0,0,0,144,154,
        1,0,0,0,145,155,5,114,0,0,146,151,3,52,26,0,147,148,5,115,0,0,148,
        150,3,52,26,0,149,147,1,0,0,0,150,153,1,0,0,0,151,149,1,0,0,0,151,
        152,1,0,0,0,152,155,1,0,0,0,153,151,1,0,0,0,154,145,1,0,0,0,154,
        146,1,0,0,0,155,156,1,0,0,0,156,157,5,27,0,0,157,162,3,64,32,0,158,
        159,5,115,0,0,159,161,3,64,32,0,160,158,1,0,0,0,161,164,1,0,0,0,
        162,160,1,0,0,0,162,163,1,0,0,0,163,168,1,0,0,0,164,162,1,0,0,0,
        165,167,3,54,27,0,166,165,1,0,0,0,167,170,1,0,0,0,168,166,1,0,0,
        0,168,169,1,0,0,0,169,173,1,0,0,0,170,168,1,0,0,0,171,172,5,28,0,
        0,172,174,3,80,40,0,173,171,1,0,0,0,173,174,1,0,0,0,174,176,1,0,
        0,0,175,177,3,70,35,0,176,175,1,0,0,0,176,177,1,0,0,0,177,179,1,
        0,0,0,178,180,3,74,37,0,179,178,1,0,0,0,179,180,1,0,0,0,180,181,
        1,0,0,0,181,182,3,6,3,0,182,184,1,0,0,0,183,133,1,0,0,0,183,139,
        1,0,0,0,184,5,1,0,0,0,185,188,5,93,0,0,186,189,3,80,40,0,187,189,
        5,113,0,0,188,186,1,0,0,0,188,187,1,0,0,0,189,192,1,0,0,0,190,191,
        5,71,0,0,191,193,3,80,40,0,192,190,1,0,0,0,192,193,1,0,0,0,193,195,
        1,0,0,0,194,185,1,0,0,0,194,195,1,0,0,0,195,212,1,0,0,0,196,199,
        5,71,0,0,197,200,3,80,40,0,198,200,5,113,0,0,199,197,1,0,0,0,199,
        198,1,0,0,0,200,202,1,0,0,0,201,196,1,0,0,0,201,202,1,0,0,0,202,
        212,1,0,0,0,203,204,5,72,0,0,204,205,5,73,0,0,205,206,3,80,40,0,
        206,207,5,74,0,0,207,208,5,75,0,0,208,210,1,0,0,0,209,203,1,0,0,
        0,209,210,1,0,0,0,210,212,1,0,0,0,211,194,1,0,0,0,211,201,1,0,0,
        0,211,209,1,0,0,0,212,7,1,0,0,0,213,214,5,50,0,0,214,215,5,51,0,
        0,215,216,5,138,0,0,216,218,5,118,0,0,217,219,3,12,6,0,218,217,1,
        0,0,0,218,219,1,0,0,0,219,220,1,0,0,0,220,221,5,119,0,0,221,222,
        5,52,0,0,222,223,5,138,0,0,223,224,5,38,0,0,224,225,3,14,7,0,225,
        9,1,0,0,0,226,227,5,1,0,0,227,228,5,118,0,0,228,229,5,113,0,0,229,
        270,5,119,0,0,230,270,5,2,0,0,231,232,5,3,0,0,232,233,5,118,0,0,
        233,234,5,113,0,0,234,235,5,115,0,0,235,236,5,113,0,0,236,270,5,
        119,0,0,237,270,5,4,0,0,238,270,5,5,0,0,239,270,5,6,0,0,240,270,
        5,7,0,0,241,270,5,8,0,0,242,270,5,9,0,0,243,270,5,10,0,0,244,270,
        5,11,0,0,245,270,5,12,0,0,246,270,5,13,0,0,247,270,5,14,0,0,248,
        270,5,15,0,0,249,270,5,16,0,0,250,251,5,17,0,0,251,252,5,118,0,0,
        252,253,5,113,0,0,253,254,5,115,0,0,254,255,5,113,0,0,255,270,5,
        119,0,0,256,270,5,18,0,0,257,270,5,19,0,0,258,270,5,20,0,0,259,260,
        5,21,0,0,260,261,5,118,0,0,261,262,5,113,0,0,262,270,5,119,0,0,263,
        264,5,22,0,0,264,265,5,118,0,0,265,266,5,113,0,0,266,270,5,119,0,
        0,267,270,5,23,0,0,268,270,5,24,0,0,269,226,1,0,0,0,269,230,1,0,
        0,0,269,231,1,0,0,0,269,237,1,0,0,0,269,238,1,0,0,0,269,239,1,0,
        0,0,269,240,1,0,0,0,269,241,1,0,0,0,269,242,1,0,0,0,269,243,1,0,
        0,0,269,244,1,0,0,0,269,245,1,0,0,0,269,246,1,0,0,0,269,247,1,0,
        0,0,269,248,1,0,0,0,269,249,1,0,0,0,269,250,1,0,0,0,269,256,1,0,
        0,0,269,257,1,0,0,0,269,258,1,0,0,0,269,259,1,0,0,0,269,263,1,0,
        0,0,269,267,1,0,0,0,269,268,1,0,0,0,270,11,1,0,0,0,271,272,5,138,
        0,0,272,278,3,10,5,0,273,274,5,115,0,0,274,275,5,138,0,0,275,277,
        3,10,5,0,276,273,1,0,0,0,277,280,1,0,0,0,278,276,1,0,0,0,278,279,
        1,0,0,0,279,13,1,0,0,0,280,278,1,0,0,0,281,282,3,80,40,0,282,15,
        1,0,0,0,283,287,5,50,0,0,284,285,5,110,0,0,285,286,5,37,0,0,286,
        288,5,111,0,0,287,284,1,0,0,0,287,288,1,0,0,0,288,289,1,0,0,0,289,
        290,5,77,0,0,290,291,3,66,33,0,291,292,5,118,0,0,292,297,3,18,9,
        0,293,294,5,115,0,0,294,296,3,18,9,0,295,293,1,0,0,0,296,299,1,0,
        0,0,297,295,1,0,0,0,297,298,1,0,0,0,298,304,1,0,0,0,299,297,1,0,
        0,0,300,301,5,115,0,0,301,303,3,22,11,0,302,300,1,0,0,0,303,306,
        1,0,0,0,304,302,1,0,0,0,304,305,1,0,0,0,305,307,1,0,0,0,306,304,
        1,0,0,0,307,308,5,119,0,0,308,17,1,0,0,0,309,310,5,138,0,0,310,314,
        3,10,5,0,311,313,3,20,10,0,312,311,1,0,0,0,313,316,1,0,0,0,314,312,
        1,0,0,0,314,315,1,0,0,0,315,19,1,0,0,0,316,314,1,0,0,0,317,318,5,
        37,0,0,318,325,5,41,0,0,319,325,5,78,0,0,320,321,5,79,0,0,321,325,
        5,80,0,0,322,323,5,81,0,0,323,325,3,80,40,0,324,317,1,0,0,0,324,
        319,1,0,0,0,324,320,1,0,0,0,324,322,1,0,0,0,325,21,1,0,0,0,326,327,
        5,79,0,0,327,328,5,80,0,0,328,329,5,118,0,0,329,330,3,24,12,0,330,
        331,5,119,0,0,331,349,1,0,0,0,332,333,5,78,0,0,333,334,5,118,0,0,
        334,335,3,24,12,0,335,336,5,119,0,0,336,349,1,0,0,0,337,338,5,82,
        0,0,338,339,5,80,0,0,339,340,5,118,0,0,340,341,3,24,12,0,341,342,
        5,119,0,0,342,343,5,83,0,0,343,344,3,66,33,0,344,345,5,118,0,0,345,
        346,3,24,12,0,346,347,5,119,0,0,347,349,1,0,0,0,348,326,1,0,0,0,
        348,332,1,0,0,0,348,337,1,0,0,0,349,23,1,0,0,0,350,355,5,138,0,0,
        351,352,5,115,0,0,352,354,5,138,0,0,353,351,1,0,0,0,354,357,1,0,
        0,0,355,353,1,0,0,0,355,356,1,0,0,0,356,25,1,0,0,0,357,355,1,0,0,
        0,358,360,5,50,0,0,359,361,5,78,0,0,360,359,1,0,0,0,360,361,1,0,
        0,0,361,362,1,0,0,0,362,366,5,84,0,0,363,364,5,110,0,0,364,365,5,
        37,0,0,365,367,5,111,0,0,366,363,1,0,0,0,366,367,1,0,0,0,367,368,
        1,0,0,0,368,369,5,138,0,0,369,370,5,39,0,0,370,371,3,66,33,0,371,
        372,5,118,0,0,372,373,3,24,12,0,373,374,5,119,0,0,374,27,1,0,0,0,
        375,379,5,50,0,0,376,377,5,110,0,0,377,378,5,37,0,0,378,380,5,111,
        0,0,379,376,1,0,0,0,379,380,1,0,0,0,380,381,1,0,0,0,381,382,5,92,
        0,0,382,383,5,138,0,0,383,29,1,0,0,0,384,385,5,85,0,0,385,388,7,
        0,0,0,386,387,5,110,0,0,387,389,5,111,0,0,388,386,1,0,0,0,388,389,
        1,0,0,0,389,390,1,0,0,0,390,391,5,138,0,0,391,31,1,0,0,0,392,393,
        5,86,0,0,393,396,5,77,0,0,394,395,5,110,0,0,395,397,5,111,0,0,396,
        394,1,0,0,0,396,397,1,0,0,0,397,398,1,0,0,0,398,399,3,66,33,0,399,
        400,3,34,17,0,400,33,1,0,0,0,401,402,5,90,0,0,402,403,5,91,0,0,403,
        420,3,18,9,0,404,405,5,85,0,0,405,408,5,91,0,0,406,407,5,110,0,0,
        407,409,5,111,0,0,408,406,1,0,0,0,408,409,1,0,0,0,409,410,1,0,0,
        0,410,420,5,138,0,0,411,412,5,87,0,0,412,413,5,91,0,0,413,414,5,
        138,0,0,414,415,5,89,0,0,415,420,5,138,0,0,416,417,5,90,0,0,417,
        418,5,88,0,0,418,420,3,22,11,0,419,401,1,0,0,0,419,404,1,0,0,0,419,
        411,1,0,0,0,419,416,1,0,0,0,420,35,1,0,0,0,421,422,5,129,0,0,422,
        423,5,130,0,0,423,428,3,66,33,0,424,425,5,118,0,0,425,426,3,24,12,
        0,426,427,5,119,0,0,427,429,1,0,0,0,428,424,1,0,0,0,428,429,1,0,
        0,0,429,430,1,0,0,0,430,431,5,131,0,0,431,436,3,38,19,0,432,433,
        5,115,0,0,433,435,3,38,19,0,434,432,1,0,0,0,435,438,1,0,0,0,436,
        434,1,0,0,0,436,437,1,0,0,0,437,451,1,0,0,0,438,436,1,0,0,0,439,
        440,5,129,0,0,440,441,5,130,0,0,441,446,3,66,33,0,442,443,5,118,
        0,0,443,444,3,24,12,0,444,445,5,119,0,0,445,447,1,0,0,0,446,442,
        1,0,0,0,446,447,1,0,0,0,447,448,1,0,0,0,448,449,3,4,2,0,449,451,
        1,0,0,0,450,421,1,0,0,0,450,439,1,0,0,0,451,37,1,0,0,0,452,453,5,
        118,0,0,453,458,3,46,23,0,454,455,5,115,0,0,455,457,3,46,23,0,456,
        454,1,0,0,0,457,460,1,0,0,0,458,456,1,0,0,0,458,459,1,0,0,0,459,
        461,1,0,0,0,460,458,1,0,0,0,461,462,5,119,0,0,462,39,1,0,0,0,463,
        464,5,132,0,0,464,465,3,66,33,0,465,466,5,133,0,0,466,471,3,42,21,
        0,467,468,5,115,0,0,468,470,3,42,21,0,469,467,1,0,0,0,470,473,1,
        0,0,0,471,469,1,0,0,0,471,472,1,0,0,0,472,476,1,0,0,0,473,471,1,
        0,0,0,474,475,5,28,0,0,475,477,3,80,40,0,476,474,1,0,0,0,476,477,
        1,0,0,0,477,41,1,0,0,0,478,479,5,138,0,0,479,480,5,120,0,0,480,481,
        3,46,23,0,481,43,1,0,0,0,482,483,5,134,0,0,483,484,5,27,0,0,484,
        487,3,66,33,0,485,486,5,28,0,0,486,488,3,80,40,0,487,485,1,0,0,0,
        487,488,1,0,0,0,488,45,1,0,0,0,489,494,5,112,0,0,490,494,5,113,0,
        0,491,494,5,41,0,0,492,494,3,80,40,0,493,489,1,0,0,0,493,490,1,0,
        0,0,493,491,1,0,0,0,493,492,1,0,0,0,494,47,1,0,0,0,495,496,5,26,
        0,0,496,501,3,50,25,0,497,498,5,115,0,0,498,500,3,50,25,0,499,497,
        1,0,0,0,500,503,1,0,0,0,501,499,1,0,0,0,501,502,1,0,0,0,502,49,1,
        0,0,0,503,501,1,0,0,0,504,505,5,138,0,0,505,506,5,38,0,0,506,507,
        5,118,0,0,507,508,3,4,2,0,508,509,5,119,0,0,509,51,1,0,0,0,510,525,
        3,64,32,0,511,512,3,64,32,0,512,513,5,117,0,0,513,514,5,114,0,0,
        514,525,1,0,0,0,515,516,3,64,32,0,516,517,5,117,0,0,517,518,5,138,
        0,0,518,525,1,0,0,0,519,525,5,138,0,0,520,525,3,78,39,0,521,522,
        5,138,0,0,522,523,5,118,0,0,523,525,5,119,0,0,524,510,1,0,0,0,524,
        511,1,0,0,0,524,515,1,0,0,0,524,519,1,0,0,0,524,520,1,0,0,0,524,
        521,1,0,0,0,525,53,1,0,0,0,526,529,3,56,28,0,527,529,3,58,29,0,528,
        526,1,0,0,0,528,527,1,0,0,0,529,55,1,0,0,0,530,531,3,60,30,0,531,
        532,3,64,32,0,532,533,5,39,0,0,533,534,3,80,40,0,534,57,1,0,0,0,
        535,536,3,62,31,0,536,537,3,64,32,0,537,59,1,0,0,0,538,539,5,53,
        0,0,539,548,5,57,0,0,540,541,5,54,0,0,541,548,5,57,0,0,542,543,5,
        55,0,0,543,548,5,57,0,0,544,545,5,56,0,0,545,548,5,57,0,0,546,548,
        5,57,0,0,547,538,1,0,0,0,547,540,1,0,0,0,547,542,1,0,0,0,547,544,
        1,0,0,0,547,546,1,0,0,0,548,61,1,0,0,0,549,550,5,44,0,0,550,564,
        5,57,0,0,551,552,5,44,0,0,552,553,5,53,0,0,553,564,5,57,0,0,554,
        555,5,44,0,0,555,556,5,54,0,0,556,564,5,57,0,0,557,558,5,44,0,0,
        558,559,5,55,0,0,559,564,5,57,0,0,560,561,5,44,0,0,561,562,5,56,
        0,0,562,564,5,57,0,0,563,549,1,0,0,0,563,551,1,0,0,0,563,554,1,0,
        0,0,563,557,1,0,0,0,563,560,1,0,0,0,564,63,1,0,0,0,565,567,3,66,
        33,0,566,568,3,68,34,0,567,566,1,0,0,0,567,568,1,0,0,0,568,576,1,
        0,0,0,569,570,5,118,0,0,570,571,3,4,2,0,571,573,5,119,0,0,572,574,
        3,68,34,0,573,572,1,0,0,0,573,574,1,0,0,0,574,576,1,0,0,0,575,565,
        1,0,0,0,575,569,1,0,0,0,576,65,1,0,0,0,577,578,5,138,0,0,578,67,
        1,0,0,0,579,580,5,38,0,0,580,583,5,138,0,0,581,583,5,138,0,0,582,
        579,1,0,0,0,582,581,1,0,0,0,583,69,1,0,0,0,584,585,5,29,0,0,585,
        586,5,30,0,0,586,591,3,72,36,0,587,588,5,115,0,0,588,590,3,72,36,
        0,589,587,1,0,0,0,590,593,1,0,0,0,591,589,1,0,0,0,591,592,1,0,0,
        0,592,596,1,0,0,0,593,591,1,0,0,0,594,595,5,31,0,0,595,597,3,80,
        40,0,596,594,1,0,0,0,596,597,1,0,0,0,597,71,1,0,0,0,598,605,5,138,
        0,0,599,600,3,64,32,0,600,601,5,117,0,0,601,602,5,138,0,0,602,605,
        1,0,0,0,603,605,3,78,39,0,604,598,1,0,0,0,604,599,1,0,0,0,604,603,
        1,0,0,0,605,73,1,0,0,0,606,607,5,32,0,0,607,608,5,30,0,0,608,613,
        3,76,38,0,609,610,5,115,0,0,610,612,3,76,38,0,611,609,1,0,0,0,612,
        615,1,0,0,0,613,611,1,0,0,0,613,614,1,0,0,0,614,75,1,0,0,0,615,613,
        1,0,0,0,616,618,5,138,0,0,617,619,7,1,0,0,618,617,1,0,0,0,618,619,
        1,0,0,0,619,627,1,0,0,0,620,621,3,64,32,0,621,622,5,117,0,0,622,
        624,5,138,0,0,623,625,7,1,0,0,624,623,1,0,0,0,624,625,1,0,0,0,625,
        627,1,0,0,0,626,616,1,0,0,0,626,620,1,0,0,0,627,77,1,0,0,0,628,629,
        5,58,0,0,629,632,5,118,0,0,630,633,5,114,0,0,631,633,3,80,40,0,632,
        630,1,0,0,0,632,631,1,0,0,0,633,634,1,0,0,0,634,701,5,119,0,0,635,
        636,5,59,0,0,636,637,5,118,0,0,637,638,3,80,40,0,638,639,5,119,0,
        0,639,701,1,0,0,0,640,641,5,60,0,0,641,642,5,118,0,0,642,643,3,80,
        40,0,643,644,5,119,0,0,644,701,1,0,0,0,645,646,5,61,0,0,646,647,
        5,118,0,0,647,648,3,80,40,0,648,649,5,119,0,0,649,701,1,0,0,0,650,
        651,5,62,0,0,651,652,5,118,0,0,652,653,3,80,40,0,653,654,5,119,0,
        0,654,701,1,0,0,0,655,656,5,63,0,0,656,657,5,118,0,0,657,658,3,80,
        40,0,658,659,5,119,0,0,659,701,1,0,0,0,660,661,5,64,0,0,661,662,
        5,118,0,0,662,663,3,80,40,0,663,664,5,115,0,0,664,665,5,112,0,0,
        665,666,5,119,0,0,666,701,1,0,0,0,667,668,5,65,0,0,668,669,5,118,
        0,0,669,670,3,80,40,0,670,671,5,119,0,0,671,701,1,0,0,0,672,673,
        5,66,0,0,673,674,5,118,0,0,674,675,3,80,40,0,675,676,5,119,0,0,676,
        701,1,0,0,0,677,678,5,67,0,0,678,679,5,118,0,0,679,680,3,80,40,0,
        680,681,5,119,0,0,681,701,1,0,0,0,682,683,5,68,0,0,683,684,5,118,
        0,0,684,685,3,80,40,0,685,686,5,119,0,0,686,701,1,0,0,0,687,688,
        5,69,0,0,688,689,5,118,0,0,689,690,3,80,40,0,690,691,5,119,0,0,691,
        701,1,0,0,0,692,693,5,70,0,0,693,694,5,118,0,0,694,695,3,80,40,0,
        695,696,5,119,0,0,696,701,1,0,0,0,697,698,5,138,0,0,698,699,5,118,
        0,0,699,701,5,119,0,0,700,628,1,0,0,0,700,635,1,0,0,0,700,640,1,
        0,0,0,700,645,1,0,0,0,700,650,1,0,0,0,700,655,1,0,0,0,700,660,1,
        0,0,0,700,667,1,0,0,0,700,672,1,0,0,0,700,677,1,0,0,0,700,682,1,
        0,0,0,700,687,1,0,0,0,700,692,1,0,0,0,700,697,1,0,0,0,701,79,1,0,
        0,0,702,703,6,40,-1,0,703,704,5,37,0,0,704,760,3,80,40,9,705,760,
        3,82,41,0,706,714,5,112,0,0,707,714,5,113,0,0,708,711,5,138,0,0,
        709,710,5,117,0,0,710,712,5,138,0,0,711,709,1,0,0,0,711,712,1,0,
        0,0,712,714,1,0,0,0,713,706,1,0,0,0,713,707,1,0,0,0,713,708,1,0,
        0,0,714,715,1,0,0,0,715,723,7,2,0,0,716,724,5,112,0,0,717,724,5,
        113,0,0,718,721,5,138,0,0,719,720,5,117,0,0,720,722,5,138,0,0,721,
        719,1,0,0,0,721,722,1,0,0,0,722,724,1,0,0,0,723,716,1,0,0,0,723,
        717,1,0,0,0,723,718,1,0,0,0,724,760,1,0,0,0,725,726,5,138,0,0,726,
        728,5,40,0,0,727,729,5,37,0,0,728,727,1,0,0,0,728,729,1,0,0,0,729,
        730,1,0,0,0,730,760,5,41,0,0,731,732,5,138,0,0,732,733,5,42,0,0,
        733,760,5,112,0,0,734,735,5,138,0,0,735,736,5,43,0,0,736,737,3,80,
        40,0,737,738,5,35,0,0,738,739,3,80,40,4,739,760,1,0,0,0,740,741,
        5,118,0,0,741,742,3,4,2,0,742,743,5,119,0,0,743,760,1,0,0,0,744,
        760,3,86,43,0,745,757,3,90,45,0,746,755,7,2,0,0,747,756,3,80,40,
        0,748,756,5,112,0,0,749,756,5,113,0,0,750,753,5,138,0,0,751,752,
        5,117,0,0,752,754,5,138,0,0,753,751,1,0,0,0,753,754,1,0,0,0,754,
        756,1,0,0,0,755,747,1,0,0,0,755,748,1,0,0,0,755,749,1,0,0,0,755,
        750,1,0,0,0,756,758,1,0,0,0,757,746,1,0,0,0,757,758,1,0,0,0,758,
        760,1,0,0,0,759,702,1,0,0,0,759,705,1,0,0,0,759,713,1,0,0,0,759,
        725,1,0,0,0,759,731,1,0,0,0,759,734,1,0,0,0,759,740,1,0,0,0,759,
        744,1,0,0,0,759,745,1,0,0,0,760,769,1,0,0,0,761,762,10,11,0,0,762,
        763,5,35,0,0,763,768,3,80,40,12,764,765,10,10,0,0,765,766,5,36,0,
        0,766,768,3,80,40,11,767,761,1,0,0,0,767,764,1,0,0,0,768,771,1,0,
        0,0,769,767,1,0,0,0,769,770,1,0,0,0,770,81,1,0,0,0,771,769,1,0,0,
        0,772,773,6,41,-1,0,773,774,3,84,42,0,774,789,1,0,0,0,775,776,10,
        5,0,0,776,777,5,126,0,0,777,788,3,82,41,6,778,779,10,4,0,0,779,780,
        5,127,0,0,780,788,3,82,41,5,781,782,10,3,0,0,782,783,5,114,0,0,783,
        788,3,82,41,4,784,785,10,2,0,0,785,786,5,128,0,0,786,788,3,82,41,
        3,787,775,1,0,0,0,787,778,1,0,0,0,787,781,1,0,0,0,787,784,1,0,0,
        0,788,791,1,0,0,0,789,787,1,0,0,0,789,790,1,0,0,0,790,83,1,0,0,0,
        791,789,1,0,0,0,792,799,5,138,0,0,793,799,5,113,0,0,794,795,5,118,
        0,0,795,796,3,82,41,0,796,797,5,119,0,0,797,799,1,0,0,0,798,792,
        1,0,0,0,798,793,1,0,0,0,798,794,1,0,0,0,799,85,1,0,0,0,800,802,5,
        45,0,0,801,803,3,88,44,0,802,801,1,0,0,0,803,804,1,0,0,0,804,802,
        1,0,0,0,804,805,1,0,0,0,805,811,1,0,0,0,806,809,5,48,0,0,807,810,
        3,80,40,0,808,810,5,41,0,0,809,807,1,0,0,0,809,808,1,0,0,0,810,812,
        1,0,0,0,811,806,1,0,0,0,811,812,1,0,0,0,812,813,1,0,0,0,813,814,
        5,49,0,0,814,87,1,0,0,0,815,816,5,46,0,0,816,817,3,80,40,0,817,818,
        5,47,0,0,818,819,3,80,40,0,819,89,1,0,0,0,820,821,5,138,0,0,821,
        830,5,118,0,0,822,827,3,92,46,0,823,824,5,115,0,0,824,826,3,92,46,
        0,825,823,1,0,0,0,826,829,1,0,0,0,827,825,1,0,0,0,827,828,1,0,0,
        0,828,831,1,0,0,0,829,827,1,0,0,0,830,822,1,0,0,0,830,831,1,0,0,
        0,831,832,1,0,0,0,832,955,5,119,0,0,833,834,5,94,0,0,834,835,5,118,
        0,0,835,836,3,80,40,0,836,837,5,119,0,0,837,955,1,0,0,0,838,839,
        5,95,0,0,839,840,5,118,0,0,840,841,3,80,40,0,841,842,5,119,0,0,842,
        955,1,0,0,0,843,844,5,96,0,0,844,845,5,118,0,0,845,846,3,80,40,0,
        846,847,5,119,0,0,847,955,1,0,0,0,848,849,5,97,0,0,849,850,5,118,
        0,0,850,851,3,80,40,0,851,852,5,115,0,0,852,853,5,2,0,0,853,854,
        5,115,0,0,854,855,5,2,0,0,855,856,5,119,0,0,856,955,1,0,0,0,857,
        858,5,98,0,0,858,859,5,118,0,0,859,860,3,80,40,0,860,861,5,119,0,
        0,861,955,1,0,0,0,862,863,5,99,0,0,863,864,5,118,0,0,864,865,3,80,
        40,0,865,866,5,119,0,0,866,955,1,0,0,0,867,868,5,100,0,0,868,869,
        5,118,0,0,869,870,3,80,40,0,870,871,5,119,0,0,871,955,1,0,0,0,872,
        873,5,101,0,0,873,874,5,118,0,0,874,875,3,80,40,0,875,876,5,115,
        0,0,876,877,5,2,0,0,877,878,5,119,0,0,878,955,1,0,0,0,879,880,5,
        102,0,0,880,881,5,118,0,0,881,882,3,80,40,0,882,883,5,119,0,0,883,
        955,1,0,0,0,884,885,5,103,0,0,885,886,5,118,0,0,886,887,3,80,40,
        0,887,888,5,119,0,0,888,955,1,0,0,0,889,890,5,104,0,0,890,891,5,
        118,0,0,891,892,3,80,40,0,892,893,5,119,0,0,893,955,1,0,0,0,894,
        895,5,105,0,0,895,896,5,118,0,0,896,955,5,119,0,0,897,898,5,106,
        0,0,898,899,5,118,0,0,899,900,3,80,40,0,900,901,5,115,0,0,901,902,
        5,2,0,0,902,903,5,115,0,0,903,904,3,80,40,0,904,905,5,119,0,0,905,
        955,1,0,0,0,906,907,5,107,0,0,907,908,5,118,0,0,908,909,3,80,40,
        0,909,910,5,115,0,0,910,911,3,80,40,0,911,912,5,115,0,0,912,913,
        3,80,40,0,913,914,5,119,0,0,914,955,1,0,0,0,915,916,5,108,0,0,916,
        917,5,118,0,0,917,918,3,80,40,0,918,919,5,38,0,0,919,920,3,10,5,
        0,920,921,5,119,0,0,921,955,1,0,0,0,922,923,5,109,0,0,923,924,5,
        118,0,0,924,925,3,10,5,0,925,926,5,115,0,0,926,927,3,80,40,0,927,
        928,5,119,0,0,928,955,1,0,0,0,929,930,5,59,0,0,930,931,5,118,0,0,
        931,932,3,80,40,0,932,933,5,119,0,0,933,955,1,0,0,0,934,935,5,60,
        0,0,935,936,5,118,0,0,936,937,3,80,40,0,937,938,5,119,0,0,938,955,
        1,0,0,0,939,940,5,58,0,0,940,941,5,118,0,0,941,942,3,80,40,0,942,
        943,5,119,0,0,943,955,1,0,0,0,944,945,5,61,0,0,945,946,5,118,0,0,
        946,947,3,80,40,0,947,948,5,119,0,0,948,955,1,0,0,0,949,950,5,62,
        0,0,950,951,5,118,0,0,951,952,3,80,40,0,952,953,5,119,0,0,953,955,
        1,0,0,0,954,820,1,0,0,0,954,833,1,0,0,0,954,838,1,0,0,0,954,843,
        1,0,0,0,954,848,1,0,0,0,954,857,1,0,0,0,954,862,1,0,0,0,954,867,
        1,0,0,0,954,872,1,0,0,0,954,879,1,0,0,0,954,884,1,0,0,0,954,889,
        1,0,0,0,954,894,1,0,0,0,954,897,1,0,0,0,954,906,1,0,0,0,954,915,
        1,0,0,0,954,922,1,0,0,0,954,929,1,0,0,0,954,934,1,0,0,0,954,939,
        1,0,0,0,954,944,1,0,0,0,954,949,1,0,0,0,955,91,1,0,0,0,956,957,3,
        80,40,0,957,93,1,0,0,0,83,98,131,139,143,151,154,162,168,173,176,
        179,183,188,192,194,199,201,209,211,218,269,278,287,297,304,314,
        324,348,355,360,366,379,388,396,408,419,428,436,446,450,458,471,
        476,487,493,501,524,528,547,563,567,573,575,582,591,596,604,613,
        618,624,626,632,700,711,713,721,723,728,753,755,757,759,767,769,
        787,789,798,804,809,811,827,830,954
    ]

class PostgreSqlGrammarParser ( Parser ):

    grammarFileName = "PostgreSqlGrammar.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'*'", "','", "';'", "'.'", 
                     "'('", "')'", "'='", "'!='", "'<'", "'<='", "'>'", 
                     "'>='", "'+'", "'-'", "'/'" ]

    symbolicNames = [ "<INVALID>", "VARCHAR", "INT", "NUMERIC", "TEXT", 
                      "DATE", "TIMESTAMP", "BOOL", "SERIAL", "BIGSERIAL", 
                      "UUID", "JSON", "JSONB", "BYTEA", "FLOAT", "REAL", 
                      "DOUBLE", "DECIMAL", "MONEY", "SMALLINT", "BIGINT", 
                      "CHAR", "BIT", "INTERVAL", "AUTOINCREMENT", "SELECT", 
                      "WITH", "FROM", "WHERE", "GROUP", "BY", "HAVING", 
                      "ORDER", "ASC", "DESC", "AND", "OR", "NOT", "AS", 
                      "ON", "IS", "NULL", "LIKE", "BETWEEN", "NATURAL", 
                      "CASE", "WHEN", "THEN", "ELSE", "END", "CREATE", "FUNCTION", 
                      "RETURNS", "INNER", "LEFT", "RIGHT", "FULL", "JOIN", 
                      "COUNT", "SUM", "AVG", "MIN", "MAX", "ARRAY_AGG", 
                      "STRING_AGG", "BOOL_AND", "BOOL_OR", "VAR_POP", "VAR_SAMP", 
                      "STDDEV_POP", "STDDEV_SAMP", "OFFSET", "FETCH", "FIRST", 
                      "ROWS", "ONLY", "DISTINCT", "TABLE", "UNIQUE", "PRIMARY", 
                      "KEY", "DEFAULT", "FOREIGN", "REFERENCES", "INDEX", 
                      "DROP", "ALTER", "RENAME", "CONSTRAINT", "TO", "ADD", 
                      "COLUMN", "DATABASE", "LIMIT", "LEN", "UPPER", "LOWER", 
                      "SUBSTRING", "ABS", "CEILING", "FLOOR", "ROUND", "YEAR", 
                      "MONTH", "DAY", "GETDATE", "DATEADD", "DATEDIFF", 
                      "CAST", "CONVERT", "IF", "EXISTS", "STRING", "NUMBER", 
                      "STAR", "COMMA", "SEMI", "DOT", "LPAREN", "RPAREN", 
                      "EQ", "NEQ", "LT", "LTE", "GT", "GTE", "PLUS", "MINUS", 
                      "SLASH", "INSERT", "INTO", "VALUES", "UPDATE", "SET", 
                      "DELETE", "LINE_COMMENT", "BLOCK_COMMENT", "WS", "ID" ]

    RULE_initial = 0
    RULE_sql_stmt = 1
    RULE_select_stmt = 2
    RULE_limit_offset_clause = 3
    RULE_function_stmt = 4
    RULE_data_type = 5
    RULE_function_params = 6
    RULE_func_body = 7
    RULE_create_table_stmt = 8
    RULE_column_def = 9
    RULE_column_constraint = 10
    RULE_table_constraint = 11
    RULE_column_list = 12
    RULE_create_index_stmt = 13
    RULE_create_database_stmt = 14
    RULE_drop_stmt = 15
    RULE_alter_table_stmt = 16
    RULE_alter_table_action = 17
    RULE_insert_stmt = 18
    RULE_insert_values = 19
    RULE_update_stmt = 20
    RULE_update_assignment = 21
    RULE_delete_stmt = 22
    RULE_value = 23
    RULE_with_clause = 24
    RULE_cte = 25
    RULE_result_column = 26
    RULE_join_clause = 27
    RULE_standard_join = 28
    RULE_natural_join = 29
    RULE_join_type = 30
    RULE_natural_join_type = 31
    RULE_table_reference = 32
    RULE_table_name = 33
    RULE_alias = 34
    RULE_group_by_clause = 35
    RULE_group_by_item = 36
    RULE_order_by_clause = 37
    RULE_order_by_item = 38
    RULE_agg_func = 39
    RULE_expr = 40
    RULE_arith_expr = 41
    RULE_atom = 42
    RULE_case_expr = 43
    RULE_when_clause = 44
    RULE_function_call = 45
    RULE_function_arg = 46

    ruleNames =  [ "initial", "sql_stmt", "select_stmt", "limit_offset_clause", 
                   "function_stmt", "data_type", "function_params", "func_body", 
                   "create_table_stmt", "column_def", "column_constraint", 
                   "table_constraint", "column_list", "create_index_stmt", 
                   "create_database_stmt", "drop_stmt", "alter_table_stmt", 
                   "alter_table_action", "insert_stmt", "insert_values", 
                   "update_stmt", "update_assignment", "delete_stmt", "value", 
                   "with_clause", "cte", "result_column", "join_clause", 
                   "standard_join", "natural_join", "join_type", "natural_join_type", 
                   "table_reference", "table_name", "alias", "group_by_clause", 
                   "group_by_item", "order_by_clause", "order_by_item", 
                   "agg_func", "expr", "arith_expr", "atom", "case_expr", 
                   "when_clause", "function_call", "function_arg" ]

    EOF = Token.EOF
    VARCHAR=1
    INT=2
    NUMERIC=3
    TEXT=4
    DATE=5
    TIMESTAMP=6
    BOOL=7
    SERIAL=8
    BIGSERIAL=9
    UUID=10
    JSON=11
    JSONB=12
    BYTEA=13
    FLOAT=14
    REAL=15
    DOUBLE=16
    DECIMAL=17
    MONEY=18
    SMALLINT=19
    BIGINT=20
    CHAR=21
    BIT=22
    INTERVAL=23
    AUTOINCREMENT=24
    SELECT=25
    WITH=26
    FROM=27
    WHERE=28
    GROUP=29
    BY=30
    HAVING=31
    ORDER=32
    ASC=33
    DESC=34
    AND=35
    OR=36
    NOT=37
    AS=38
    ON=39
    IS=40
    NULL=41
    LIKE=42
    BETWEEN=43
    NATURAL=44
    CASE=45
    WHEN=46
    THEN=47
    ELSE=48
    END=49
    CREATE=50
    FUNCTION=51
    RETURNS=52
    INNER=53
    LEFT=54
    RIGHT=55
    FULL=56
    JOIN=57
    COUNT=58
    SUM=59
    AVG=60
    MIN=61
    MAX=62
    ARRAY_AGG=63
    STRING_AGG=64
    BOOL_AND=65
    BOOL_OR=66
    VAR_POP=67
    VAR_SAMP=68
    STDDEV_POP=69
    STDDEV_SAMP=70
    OFFSET=71
    FETCH=72
    FIRST=73
    ROWS=74
    ONLY=75
    DISTINCT=76
    TABLE=77
    UNIQUE=78
    PRIMARY=79
    KEY=80
    DEFAULT=81
    FOREIGN=82
    REFERENCES=83
    INDEX=84
    DROP=85
    ALTER=86
    RENAME=87
    CONSTRAINT=88
    TO=89
    ADD=90
    COLUMN=91
    DATABASE=92
    LIMIT=93
    LEN=94
    UPPER=95
    LOWER=96
    SUBSTRING=97
    ABS=98
    CEILING=99
    FLOOR=100
    ROUND=101
    YEAR=102
    MONTH=103
    DAY=104
    GETDATE=105
    DATEADD=106
    DATEDIFF=107
    CAST=108
    CONVERT=109
    IF=110
    EXISTS=111
    STRING=112
    NUMBER=113
    STAR=114
    COMMA=115
    SEMI=116
    DOT=117
    LPAREN=118
    RPAREN=119
    EQ=120
    NEQ=121
    LT=122
    LTE=123
    GT=124
    GTE=125
    PLUS=126
    MINUS=127
    SLASH=128
    INSERT=129
    INTO=130
    VALUES=131
    UPDATE=132
    SET=133
    DELETE=134
    LINE_COMMENT=135
    BLOCK_COMMENT=136
    WS=137
    ID=138

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class InitialContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Sql_stmtContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Sql_stmtContext,i)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_initial

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitial" ):
                listener.enterInitial(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitial" ):
                listener.exitInitial(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitial" ):
                return visitor.visitInitial(self)
            else:
                return visitor.visitChildren(self)




    def initial(self):

        localctx = PostgreSqlGrammarParser.InitialContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_initial)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 94
            self.sql_stmt()
            self.state = 98
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1125900007505920) != 0) or ((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & 721288217755651) != 0):
                self.state = 95
                self.sql_stmt()
                self.state = 100
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Select_stmtContext,0)


        def SEMI(self):
            return self.getToken(PostgreSqlGrammarParser.SEMI, 0)

        def function_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Function_stmtContext,0)


        def create_table_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Create_table_stmtContext,0)


        def create_index_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Create_index_stmtContext,0)


        def create_database_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Create_database_stmtContext,0)


        def drop_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Drop_stmtContext,0)


        def alter_table_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Alter_table_stmtContext,0)


        def insert_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Insert_stmtContext,0)


        def update_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Update_stmtContext,0)


        def delete_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Delete_stmtContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_sql_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_stmt" ):
                listener.enterSql_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_stmt" ):
                listener.exitSql_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql_stmt" ):
                return visitor.visitSql_stmt(self)
            else:
                return visitor.visitChildren(self)




    def sql_stmt(self):

        localctx = PostgreSqlGrammarParser.Sql_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_sql_stmt)
        try:
            self.state = 131
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 101
                self.select_stmt()
                self.state = 102
                self.match(PostgreSqlGrammarParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 104
                self.function_stmt()
                self.state = 105
                self.match(PostgreSqlGrammarParser.SEMI)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 107
                self.create_table_stmt()
                self.state = 108
                self.match(PostgreSqlGrammarParser.SEMI)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 110
                self.create_index_stmt()
                self.state = 111
                self.match(PostgreSqlGrammarParser.SEMI)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 113
                self.create_database_stmt()
                self.state = 114
                self.match(PostgreSqlGrammarParser.SEMI)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 116
                self.drop_stmt()
                self.state = 117
                self.match(PostgreSqlGrammarParser.SEMI)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 119
                self.alter_table_stmt()
                self.state = 120
                self.match(PostgreSqlGrammarParser.SEMI)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 122
                self.insert_stmt()
                self.state = 123
                self.match(PostgreSqlGrammarParser.SEMI)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 125
                self.update_stmt()
                self.state = 126
                self.match(PostgreSqlGrammarParser.SEMI)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 128
                self.delete_stmt()
                self.state = 129
                self.match(PostgreSqlGrammarParser.SEMI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.LPAREN, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Select_stmtContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.RPAREN, 0)

        def SELECT(self):
            return self.getToken(PostgreSqlGrammarParser.SELECT, 0)

        def FROM(self):
            return self.getToken(PostgreSqlGrammarParser.FROM, 0)

        def table_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Table_referenceContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_referenceContext,i)


        def limit_offset_clause(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Limit_offset_clauseContext,0)


        def STAR(self):
            return self.getToken(PostgreSqlGrammarParser.STAR, 0)

        def WITH(self):
            return self.getToken(PostgreSqlGrammarParser.WITH, 0)

        def with_clause(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.With_clauseContext,0)


        def DISTINCT(self):
            return self.getToken(PostgreSqlGrammarParser.DISTINCT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.COMMA)
            else:
                return self.getToken(PostgreSqlGrammarParser.COMMA, i)

        def join_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Join_clauseContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Join_clauseContext,i)


        def WHERE(self):
            return self.getToken(PostgreSqlGrammarParser.WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,0)


        def group_by_clause(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Group_by_clauseContext,0)


        def order_by_clause(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Order_by_clauseContext,0)


        def result_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Result_columnContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Result_columnContext,i)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_stmt" ):
                listener.enterSelect_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_stmt" ):
                listener.exitSelect_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_stmt" ):
                return visitor.visitSelect_stmt(self)
            else:
                return visitor.visitChildren(self)




    def select_stmt(self):

        localctx = PostgreSqlGrammarParser.Select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_select_stmt)
        self._la = 0 # Token type
        try:
            self.state = 183
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [118]:
                self.enterOuterAlt(localctx, 1)
                self.state = 133
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 134
                self.select_stmt()
                self.state = 135
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [25, 26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 139
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==26:
                    self.state = 137
                    self.match(PostgreSqlGrammarParser.WITH)
                    self.state = 138
                    self.with_clause()


                self.state = 141
                self.match(PostgreSqlGrammarParser.SELECT)
                self.state = 143
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==76:
                    self.state = 142
                    self.match(PostgreSqlGrammarParser.DISTINCT)


                self.state = 154
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [114]:
                    self.state = 145
                    self.match(PostgreSqlGrammarParser.STAR)
                    pass
                elif token in [58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 118, 138]:
                    self.state = 146
                    self.result_column()
                    self.state = 151
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==115:
                        self.state = 147
                        self.match(PostgreSqlGrammarParser.COMMA)
                        self.state = 148
                        self.result_column()
                        self.state = 153
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 156
                self.match(PostgreSqlGrammarParser.FROM)
                self.state = 157
                self.table_reference()
                self.state = 162
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==115:
                    self.state = 158
                    self.match(PostgreSqlGrammarParser.COMMA)
                    self.state = 159
                    self.table_reference()
                    self.state = 164
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 279240769083015168) != 0):
                    self.state = 165
                    self.join_clause()
                    self.state = 170
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 173
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==28:
                    self.state = 171
                    self.match(PostgreSqlGrammarParser.WHERE)
                    self.state = 172
                    self.expr(0)


                self.state = 176
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==29:
                    self.state = 175
                    self.group_by_clause()


                self.state = 179
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==32:
                    self.state = 178
                    self.order_by_clause()


                self.state = 181
                self.limit_offset_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Limit_offset_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(PostgreSqlGrammarParser.LIMIT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.ExprContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,i)


        def NUMBER(self):
            return self.getToken(PostgreSqlGrammarParser.NUMBER, 0)

        def OFFSET(self):
            return self.getToken(PostgreSqlGrammarParser.OFFSET, 0)

        def FETCH(self):
            return self.getToken(PostgreSqlGrammarParser.FETCH, 0)

        def FIRST(self):
            return self.getToken(PostgreSqlGrammarParser.FIRST, 0)

        def ROWS(self):
            return self.getToken(PostgreSqlGrammarParser.ROWS, 0)

        def ONLY(self):
            return self.getToken(PostgreSqlGrammarParser.ONLY, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_limit_offset_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit_offset_clause" ):
                listener.enterLimit_offset_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit_offset_clause" ):
                listener.exitLimit_offset_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimit_offset_clause" ):
                return visitor.visitLimit_offset_clause(self)
            else:
                return visitor.visitChildren(self)




    def limit_offset_clause(self):

        localctx = PostgreSqlGrammarParser.Limit_offset_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_limit_offset_clause)
        self._la = 0 # Token type
        try:
            self.state = 211
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 194
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==93:
                    self.state = 185
                    self.match(PostgreSqlGrammarParser.LIMIT)
                    self.state = 188
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                    if la_ == 1:
                        self.state = 186
                        self.expr(0)
                        pass

                    elif la_ == 2:
                        self.state = 187
                        self.match(PostgreSqlGrammarParser.NUMBER)
                        pass


                    self.state = 192
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==71:
                        self.state = 190
                        self.match(PostgreSqlGrammarParser.OFFSET)
                        self.state = 191
                        self.expr(0)




                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 201
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==71:
                    self.state = 196
                    self.match(PostgreSqlGrammarParser.OFFSET)
                    self.state = 199
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                    if la_ == 1:
                        self.state = 197
                        self.expr(0)
                        pass

                    elif la_ == 2:
                        self.state = 198
                        self.match(PostgreSqlGrammarParser.NUMBER)
                        pass




                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 209
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==72:
                    self.state = 203
                    self.match(PostgreSqlGrammarParser.FETCH)
                    self.state = 204
                    self.match(PostgreSqlGrammarParser.FIRST)
                    self.state = 205
                    self.expr(0)
                    self.state = 206
                    self.match(PostgreSqlGrammarParser.ROWS)
                    self.state = 207
                    self.match(PostgreSqlGrammarParser.ONLY)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSqlGrammarParser.CREATE, 0)

        def FUNCTION(self):
            return self.getToken(PostgreSqlGrammarParser.FUNCTION, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.ID)
            else:
                return self.getToken(PostgreSqlGrammarParser.ID, i)

        def LPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.RPAREN, 0)

        def RETURNS(self):
            return self.getToken(PostgreSqlGrammarParser.RETURNS, 0)

        def AS(self):
            return self.getToken(PostgreSqlGrammarParser.AS, 0)

        def func_body(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Func_bodyContext,0)


        def function_params(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Function_paramsContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_function_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_stmt" ):
                listener.enterFunction_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_stmt" ):
                listener.exitFunction_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_stmt" ):
                return visitor.visitFunction_stmt(self)
            else:
                return visitor.visitChildren(self)




    def function_stmt(self):

        localctx = PostgreSqlGrammarParser.Function_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_function_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 213
            self.match(PostgreSqlGrammarParser.CREATE)
            self.state = 214
            self.match(PostgreSqlGrammarParser.FUNCTION)
            self.state = 215
            self.match(PostgreSqlGrammarParser.ID)
            self.state = 216
            self.match(PostgreSqlGrammarParser.LPAREN)
            self.state = 218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 217
                self.function_params()


            self.state = 220
            self.match(PostgreSqlGrammarParser.RPAREN)
            self.state = 221
            self.match(PostgreSqlGrammarParser.RETURNS)
            self.state = 222
            self.match(PostgreSqlGrammarParser.ID)
            self.state = 223
            self.match(PostgreSqlGrammarParser.AS)
            self.state = 224
            self.func_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARCHAR(self):
            return self.getToken(PostgreSqlGrammarParser.VARCHAR, 0)

        def LPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.LPAREN, 0)

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.NUMBER)
            else:
                return self.getToken(PostgreSqlGrammarParser.NUMBER, i)

        def RPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.RPAREN, 0)

        def INT(self):
            return self.getToken(PostgreSqlGrammarParser.INT, 0)

        def NUMERIC(self):
            return self.getToken(PostgreSqlGrammarParser.NUMERIC, 0)

        def COMMA(self):
            return self.getToken(PostgreSqlGrammarParser.COMMA, 0)

        def TEXT(self):
            return self.getToken(PostgreSqlGrammarParser.TEXT, 0)

        def DATE(self):
            return self.getToken(PostgreSqlGrammarParser.DATE, 0)

        def TIMESTAMP(self):
            return self.getToken(PostgreSqlGrammarParser.TIMESTAMP, 0)

        def BOOL(self):
            return self.getToken(PostgreSqlGrammarParser.BOOL, 0)

        def SERIAL(self):
            return self.getToken(PostgreSqlGrammarParser.SERIAL, 0)

        def BIGSERIAL(self):
            return self.getToken(PostgreSqlGrammarParser.BIGSERIAL, 0)

        def UUID(self):
            return self.getToken(PostgreSqlGrammarParser.UUID, 0)

        def JSON(self):
            return self.getToken(PostgreSqlGrammarParser.JSON, 0)

        def JSONB(self):
            return self.getToken(PostgreSqlGrammarParser.JSONB, 0)

        def BYTEA(self):
            return self.getToken(PostgreSqlGrammarParser.BYTEA, 0)

        def FLOAT(self):
            return self.getToken(PostgreSqlGrammarParser.FLOAT, 0)

        def REAL(self):
            return self.getToken(PostgreSqlGrammarParser.REAL, 0)

        def DOUBLE(self):
            return self.getToken(PostgreSqlGrammarParser.DOUBLE, 0)

        def DECIMAL(self):
            return self.getToken(PostgreSqlGrammarParser.DECIMAL, 0)

        def MONEY(self):
            return self.getToken(PostgreSqlGrammarParser.MONEY, 0)

        def SMALLINT(self):
            return self.getToken(PostgreSqlGrammarParser.SMALLINT, 0)

        def BIGINT(self):
            return self.getToken(PostgreSqlGrammarParser.BIGINT, 0)

        def CHAR(self):
            return self.getToken(PostgreSqlGrammarParser.CHAR, 0)

        def BIT(self):
            return self.getToken(PostgreSqlGrammarParser.BIT, 0)

        def INTERVAL(self):
            return self.getToken(PostgreSqlGrammarParser.INTERVAL, 0)

        def AUTOINCREMENT(self):
            return self.getToken(PostgreSqlGrammarParser.AUTOINCREMENT, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_type" ):
                listener.enterData_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_type" ):
                listener.exitData_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitData_type" ):
                return visitor.visitData_type(self)
            else:
                return visitor.visitChildren(self)




    def data_type(self):

        localctx = PostgreSqlGrammarParser.Data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_data_type)
        try:
            self.state = 269
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1]:
                self.enterOuterAlt(localctx, 1)
                self.state = 226
                self.match(PostgreSqlGrammarParser.VARCHAR)
                self.state = 227
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 228
                self.match(PostgreSqlGrammarParser.NUMBER)
                self.state = 229
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 230
                self.match(PostgreSqlGrammarParser.INT)
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 3)
                self.state = 231
                self.match(PostgreSqlGrammarParser.NUMERIC)
                self.state = 232
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 233
                self.match(PostgreSqlGrammarParser.NUMBER)
                self.state = 234
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 235
                self.match(PostgreSqlGrammarParser.NUMBER)
                self.state = 236
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [4]:
                self.enterOuterAlt(localctx, 4)
                self.state = 237
                self.match(PostgreSqlGrammarParser.TEXT)
                pass
            elif token in [5]:
                self.enterOuterAlt(localctx, 5)
                self.state = 238
                self.match(PostgreSqlGrammarParser.DATE)
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 6)
                self.state = 239
                self.match(PostgreSqlGrammarParser.TIMESTAMP)
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 7)
                self.state = 240
                self.match(PostgreSqlGrammarParser.BOOL)
                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 8)
                self.state = 241
                self.match(PostgreSqlGrammarParser.SERIAL)
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 9)
                self.state = 242
                self.match(PostgreSqlGrammarParser.BIGSERIAL)
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 10)
                self.state = 243
                self.match(PostgreSqlGrammarParser.UUID)
                pass
            elif token in [11]:
                self.enterOuterAlt(localctx, 11)
                self.state = 244
                self.match(PostgreSqlGrammarParser.JSON)
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 12)
                self.state = 245
                self.match(PostgreSqlGrammarParser.JSONB)
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 13)
                self.state = 246
                self.match(PostgreSqlGrammarParser.BYTEA)
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 14)
                self.state = 247
                self.match(PostgreSqlGrammarParser.FLOAT)
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 15)
                self.state = 248
                self.match(PostgreSqlGrammarParser.REAL)
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 16)
                self.state = 249
                self.match(PostgreSqlGrammarParser.DOUBLE)
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 17)
                self.state = 250
                self.match(PostgreSqlGrammarParser.DECIMAL)
                self.state = 251
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 252
                self.match(PostgreSqlGrammarParser.NUMBER)
                self.state = 253
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 254
                self.match(PostgreSqlGrammarParser.NUMBER)
                self.state = 255
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 18)
                self.state = 256
                self.match(PostgreSqlGrammarParser.MONEY)
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 19)
                self.state = 257
                self.match(PostgreSqlGrammarParser.SMALLINT)
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 20)
                self.state = 258
                self.match(PostgreSqlGrammarParser.BIGINT)
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 21)
                self.state = 259
                self.match(PostgreSqlGrammarParser.CHAR)
                self.state = 260
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 261
                self.match(PostgreSqlGrammarParser.NUMBER)
                self.state = 262
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 22)
                self.state = 263
                self.match(PostgreSqlGrammarParser.BIT)
                self.state = 264
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 265
                self.match(PostgreSqlGrammarParser.NUMBER)
                self.state = 266
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 23)
                self.state = 267
                self.match(PostgreSqlGrammarParser.INTERVAL)
                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 24)
                self.state = 268
                self.match(PostgreSqlGrammarParser.AUTOINCREMENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_paramsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.ID)
            else:
                return self.getToken(PostgreSqlGrammarParser.ID, i)

        def data_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Data_typeContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Data_typeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.COMMA)
            else:
                return self.getToken(PostgreSqlGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_function_params

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_params" ):
                listener.enterFunction_params(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_params" ):
                listener.exitFunction_params(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_params" ):
                return visitor.visitFunction_params(self)
            else:
                return visitor.visitChildren(self)




    def function_params(self):

        localctx = PostgreSqlGrammarParser.Function_paramsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_function_params)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 271
            self.match(PostgreSqlGrammarParser.ID)
            self.state = 272
            self.data_type()
            self.state = 278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==115:
                self.state = 273
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 274
                self.match(PostgreSqlGrammarParser.ID)
                self.state = 275
                self.data_type()
                self.state = 280
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_func_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_body" ):
                listener.enterFunc_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_body" ):
                listener.exitFunc_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_body" ):
                return visitor.visitFunc_body(self)
            else:
                return visitor.visitChildren(self)




    def func_body(self):

        localctx = PostgreSqlGrammarParser.Func_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_func_body)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 281
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_table_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSqlGrammarParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(PostgreSqlGrammarParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_nameContext,0)


        def LPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.LPAREN, 0)

        def column_def(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Column_defContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Column_defContext,i)


        def RPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.RPAREN, 0)

        def IF(self):
            return self.getToken(PostgreSqlGrammarParser.IF, 0)

        def NOT(self):
            return self.getToken(PostgreSqlGrammarParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(PostgreSqlGrammarParser.EXISTS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.COMMA)
            else:
                return self.getToken(PostgreSqlGrammarParser.COMMA, i)

        def table_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Table_constraintContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_constraintContext,i)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_create_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table_stmt" ):
                listener.enterCreate_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table_stmt" ):
                listener.exitCreate_table_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_table_stmt" ):
                return visitor.visitCreate_table_stmt(self)
            else:
                return visitor.visitChildren(self)




    def create_table_stmt(self):

        localctx = PostgreSqlGrammarParser.Create_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_create_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            self.match(PostgreSqlGrammarParser.CREATE)
            self.state = 287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==110:
                self.state = 284
                self.match(PostgreSqlGrammarParser.IF)
                self.state = 285
                self.match(PostgreSqlGrammarParser.NOT)
                self.state = 286
                self.match(PostgreSqlGrammarParser.EXISTS)


            self.state = 289
            self.match(PostgreSqlGrammarParser.TABLE)
            self.state = 290
            self.table_name()
            self.state = 291
            self.match(PostgreSqlGrammarParser.LPAREN)
            self.state = 292
            self.column_def()
            self.state = 297
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 293
                    self.match(PostgreSqlGrammarParser.COMMA)
                    self.state = 294
                    self.column_def() 
                self.state = 299
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

            self.state = 304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==115:
                self.state = 300
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 301
                self.table_constraint()
                self.state = 306
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 307
            self.match(PostgreSqlGrammarParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def data_type(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Data_typeContext,0)


        def column_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Column_constraintContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Column_constraintContext,i)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_column_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_def" ):
                listener.enterColumn_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_def" ):
                listener.exitColumn_def(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_def" ):
                return visitor.visitColumn_def(self)
            else:
                return visitor.visitChildren(self)




    def column_def(self):

        localctx = PostgreSqlGrammarParser.Column_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_column_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 309
            self.match(PostgreSqlGrammarParser.ID)
            self.state = 310
            self.data_type()
            self.state = 314
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & 24189255811073) != 0):
                self.state = 311
                self.column_constraint()
                self.state = 316
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(PostgreSqlGrammarParser.NOT, 0)

        def NULL(self):
            return self.getToken(PostgreSqlGrammarParser.NULL, 0)

        def UNIQUE(self):
            return self.getToken(PostgreSqlGrammarParser.UNIQUE, 0)

        def PRIMARY(self):
            return self.getToken(PostgreSqlGrammarParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(PostgreSqlGrammarParser.KEY, 0)

        def DEFAULT(self):
            return self.getToken(PostgreSqlGrammarParser.DEFAULT, 0)

        def expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_column_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_constraint" ):
                listener.enterColumn_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_constraint" ):
                listener.exitColumn_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_constraint" ):
                return visitor.visitColumn_constraint(self)
            else:
                return visitor.visitChildren(self)




    def column_constraint(self):

        localctx = PostgreSqlGrammarParser.Column_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_column_constraint)
        try:
            self.state = 324
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [37]:
                self.enterOuterAlt(localctx, 1)
                self.state = 317
                self.match(PostgreSqlGrammarParser.NOT)
                self.state = 318
                self.match(PostgreSqlGrammarParser.NULL)
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 2)
                self.state = 319
                self.match(PostgreSqlGrammarParser.UNIQUE)
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 3)
                self.state = 320
                self.match(PostgreSqlGrammarParser.PRIMARY)
                self.state = 321
                self.match(PostgreSqlGrammarParser.KEY)
                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 4)
                self.state = 322
                self.match(PostgreSqlGrammarParser.DEFAULT)
                self.state = 323
                self.expr(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIMARY(self):
            return self.getToken(PostgreSqlGrammarParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(PostgreSqlGrammarParser.KEY, 0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.LPAREN)
            else:
                return self.getToken(PostgreSqlGrammarParser.LPAREN, i)

        def column_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Column_listContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Column_listContext,i)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.RPAREN)
            else:
                return self.getToken(PostgreSqlGrammarParser.RPAREN, i)

        def UNIQUE(self):
            return self.getToken(PostgreSqlGrammarParser.UNIQUE, 0)

        def FOREIGN(self):
            return self.getToken(PostgreSqlGrammarParser.FOREIGN, 0)

        def REFERENCES(self):
            return self.getToken(PostgreSqlGrammarParser.REFERENCES, 0)

        def table_name(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_nameContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_table_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_constraint" ):
                listener.enterTable_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_constraint" ):
                listener.exitTable_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_constraint" ):
                return visitor.visitTable_constraint(self)
            else:
                return visitor.visitChildren(self)




    def table_constraint(self):

        localctx = PostgreSqlGrammarParser.Table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_table_constraint)
        try:
            self.state = 348
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [79]:
                self.enterOuterAlt(localctx, 1)
                self.state = 326
                self.match(PostgreSqlGrammarParser.PRIMARY)
                self.state = 327
                self.match(PostgreSqlGrammarParser.KEY)
                self.state = 328
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 329
                self.column_list()
                self.state = 330
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 2)
                self.state = 332
                self.match(PostgreSqlGrammarParser.UNIQUE)
                self.state = 333
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 334
                self.column_list()
                self.state = 335
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 3)
                self.state = 337
                self.match(PostgreSqlGrammarParser.FOREIGN)
                self.state = 338
                self.match(PostgreSqlGrammarParser.KEY)
                self.state = 339
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 340
                self.column_list()
                self.state = 341
                self.match(PostgreSqlGrammarParser.RPAREN)
                self.state = 342
                self.match(PostgreSqlGrammarParser.REFERENCES)
                self.state = 343
                self.table_name()
                self.state = 344
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 345
                self.column_list()
                self.state = 346
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.ID)
            else:
                return self.getToken(PostgreSqlGrammarParser.ID, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.COMMA)
            else:
                return self.getToken(PostgreSqlGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_list" ):
                listener.enterColumn_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_list" ):
                listener.exitColumn_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_list" ):
                return visitor.visitColumn_list(self)
            else:
                return visitor.visitChildren(self)




    def column_list(self):

        localctx = PostgreSqlGrammarParser.Column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_column_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 350
            self.match(PostgreSqlGrammarParser.ID)
            self.state = 355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==115:
                self.state = 351
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 352
                self.match(PostgreSqlGrammarParser.ID)
                self.state = 357
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_index_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSqlGrammarParser.CREATE, 0)

        def INDEX(self):
            return self.getToken(PostgreSqlGrammarParser.INDEX, 0)

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def ON(self):
            return self.getToken(PostgreSqlGrammarParser.ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_nameContext,0)


        def LPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.LPAREN, 0)

        def column_list(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Column_listContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.RPAREN, 0)

        def UNIQUE(self):
            return self.getToken(PostgreSqlGrammarParser.UNIQUE, 0)

        def IF(self):
            return self.getToken(PostgreSqlGrammarParser.IF, 0)

        def NOT(self):
            return self.getToken(PostgreSqlGrammarParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(PostgreSqlGrammarParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_create_index_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_index_stmt" ):
                listener.enterCreate_index_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_index_stmt" ):
                listener.exitCreate_index_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_index_stmt" ):
                return visitor.visitCreate_index_stmt(self)
            else:
                return visitor.visitChildren(self)




    def create_index_stmt(self):

        localctx = PostgreSqlGrammarParser.Create_index_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_create_index_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 358
            self.match(PostgreSqlGrammarParser.CREATE)
            self.state = 360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 359
                self.match(PostgreSqlGrammarParser.UNIQUE)


            self.state = 362
            self.match(PostgreSqlGrammarParser.INDEX)
            self.state = 366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==110:
                self.state = 363
                self.match(PostgreSqlGrammarParser.IF)
                self.state = 364
                self.match(PostgreSqlGrammarParser.NOT)
                self.state = 365
                self.match(PostgreSqlGrammarParser.EXISTS)


            self.state = 368
            self.match(PostgreSqlGrammarParser.ID)
            self.state = 369
            self.match(PostgreSqlGrammarParser.ON)
            self.state = 370
            self.table_name()
            self.state = 371
            self.match(PostgreSqlGrammarParser.LPAREN)
            self.state = 372
            self.column_list()
            self.state = 373
            self.match(PostgreSqlGrammarParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_database_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSqlGrammarParser.CREATE, 0)

        def DATABASE(self):
            return self.getToken(PostgreSqlGrammarParser.DATABASE, 0)

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def IF(self):
            return self.getToken(PostgreSqlGrammarParser.IF, 0)

        def NOT(self):
            return self.getToken(PostgreSqlGrammarParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(PostgreSqlGrammarParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_create_database_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_database_stmt" ):
                listener.enterCreate_database_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_database_stmt" ):
                listener.exitCreate_database_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_database_stmt" ):
                return visitor.visitCreate_database_stmt(self)
            else:
                return visitor.visitChildren(self)




    def create_database_stmt(self):

        localctx = PostgreSqlGrammarParser.Create_database_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_create_database_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 375
            self.match(PostgreSqlGrammarParser.CREATE)
            self.state = 379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==110:
                self.state = 376
                self.match(PostgreSqlGrammarParser.IF)
                self.state = 377
                self.match(PostgreSqlGrammarParser.NOT)
                self.state = 378
                self.match(PostgreSqlGrammarParser.EXISTS)


            self.state = 381
            self.match(PostgreSqlGrammarParser.DATABASE)
            self.state = 382
            self.match(PostgreSqlGrammarParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PostgreSqlGrammarParser.DROP, 0)

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def TABLE(self):
            return self.getToken(PostgreSqlGrammarParser.TABLE, 0)

        def INDEX(self):
            return self.getToken(PostgreSqlGrammarParser.INDEX, 0)

        def DATABASE(self):
            return self.getToken(PostgreSqlGrammarParser.DATABASE, 0)

        def FUNCTION(self):
            return self.getToken(PostgreSqlGrammarParser.FUNCTION, 0)

        def IF(self):
            return self.getToken(PostgreSqlGrammarParser.IF, 0)

        def EXISTS(self):
            return self.getToken(PostgreSqlGrammarParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_drop_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_stmt" ):
                listener.enterDrop_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_stmt" ):
                listener.exitDrop_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_stmt" ):
                return visitor.visitDrop_stmt(self)
            else:
                return visitor.visitChildren(self)




    def drop_stmt(self):

        localctx = PostgreSqlGrammarParser.Drop_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_drop_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self.match(PostgreSqlGrammarParser.DROP)
            self.state = 385
            _la = self._input.LA(1)
            if not(((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 2207680299009) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==110:
                self.state = 386
                self.match(PostgreSqlGrammarParser.IF)
                self.state = 387
                self.match(PostgreSqlGrammarParser.EXISTS)


            self.state = 390
            self.match(PostgreSqlGrammarParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSqlGrammarParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(PostgreSqlGrammarParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_nameContext,0)


        def alter_table_action(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Alter_table_actionContext,0)


        def IF(self):
            return self.getToken(PostgreSqlGrammarParser.IF, 0)

        def EXISTS(self):
            return self.getToken(PostgreSqlGrammarParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_alter_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_stmt" ):
                listener.enterAlter_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_stmt" ):
                listener.exitAlter_table_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_table_stmt" ):
                return visitor.visitAlter_table_stmt(self)
            else:
                return visitor.visitChildren(self)




    def alter_table_stmt(self):

        localctx = PostgreSqlGrammarParser.Alter_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_alter_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 392
            self.match(PostgreSqlGrammarParser.ALTER)
            self.state = 393
            self.match(PostgreSqlGrammarParser.TABLE)
            self.state = 396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==110:
                self.state = 394
                self.match(PostgreSqlGrammarParser.IF)
                self.state = 395
                self.match(PostgreSqlGrammarParser.EXISTS)


            self.state = 398
            self.table_name()
            self.state = 399
            self.alter_table_action()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(PostgreSqlGrammarParser.ADD, 0)

        def COLUMN(self):
            return self.getToken(PostgreSqlGrammarParser.COLUMN, 0)

        def column_def(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Column_defContext,0)


        def DROP(self):
            return self.getToken(PostgreSqlGrammarParser.DROP, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.ID)
            else:
                return self.getToken(PostgreSqlGrammarParser.ID, i)

        def IF(self):
            return self.getToken(PostgreSqlGrammarParser.IF, 0)

        def EXISTS(self):
            return self.getToken(PostgreSqlGrammarParser.EXISTS, 0)

        def RENAME(self):
            return self.getToken(PostgreSqlGrammarParser.RENAME, 0)

        def TO(self):
            return self.getToken(PostgreSqlGrammarParser.TO, 0)

        def CONSTRAINT(self):
            return self.getToken(PostgreSqlGrammarParser.CONSTRAINT, 0)

        def table_constraint(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_constraintContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_alter_table_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_action" ):
                listener.enterAlter_table_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_action" ):
                listener.exitAlter_table_action(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_table_action" ):
                return visitor.visitAlter_table_action(self)
            else:
                return visitor.visitChildren(self)




    def alter_table_action(self):

        localctx = PostgreSqlGrammarParser.Alter_table_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_alter_table_action)
        self._la = 0 # Token type
        try:
            self.state = 419
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 401
                self.match(PostgreSqlGrammarParser.ADD)
                self.state = 402
                self.match(PostgreSqlGrammarParser.COLUMN)
                self.state = 403
                self.column_def()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 404
                self.match(PostgreSqlGrammarParser.DROP)
                self.state = 405
                self.match(PostgreSqlGrammarParser.COLUMN)
                self.state = 408
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==110:
                    self.state = 406
                    self.match(PostgreSqlGrammarParser.IF)
                    self.state = 407
                    self.match(PostgreSqlGrammarParser.EXISTS)


                self.state = 410
                self.match(PostgreSqlGrammarParser.ID)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 411
                self.match(PostgreSqlGrammarParser.RENAME)
                self.state = 412
                self.match(PostgreSqlGrammarParser.COLUMN)
                self.state = 413
                self.match(PostgreSqlGrammarParser.ID)
                self.state = 414
                self.match(PostgreSqlGrammarParser.TO)
                self.state = 415
                self.match(PostgreSqlGrammarParser.ID)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 416
                self.match(PostgreSqlGrammarParser.ADD)
                self.state = 417
                self.match(PostgreSqlGrammarParser.CONSTRAINT)
                self.state = 418
                self.table_constraint()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(PostgreSqlGrammarParser.INSERT, 0)

        def INTO(self):
            return self.getToken(PostgreSqlGrammarParser.INTO, 0)

        def table_name(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_nameContext,0)


        def VALUES(self):
            return self.getToken(PostgreSqlGrammarParser.VALUES, 0)

        def insert_values(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Insert_valuesContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Insert_valuesContext,i)


        def LPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.LPAREN, 0)

        def column_list(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Column_listContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.COMMA)
            else:
                return self.getToken(PostgreSqlGrammarParser.COMMA, i)

        def select_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_insert_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_stmt" ):
                listener.enterInsert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_stmt" ):
                listener.exitInsert_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_stmt" ):
                return visitor.visitInsert_stmt(self)
            else:
                return visitor.visitChildren(self)




    def insert_stmt(self):

        localctx = PostgreSqlGrammarParser.Insert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_insert_stmt)
        self._la = 0 # Token type
        try:
            self.state = 450
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 421
                self.match(PostgreSqlGrammarParser.INSERT)
                self.state = 422
                self.match(PostgreSqlGrammarParser.INTO)
                self.state = 423
                self.table_name()
                self.state = 428
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 424
                    self.match(PostgreSqlGrammarParser.LPAREN)
                    self.state = 425
                    self.column_list()
                    self.state = 426
                    self.match(PostgreSqlGrammarParser.RPAREN)


                self.state = 430
                self.match(PostgreSqlGrammarParser.VALUES)
                self.state = 431
                self.insert_values()
                self.state = 436
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==115:
                    self.state = 432
                    self.match(PostgreSqlGrammarParser.COMMA)
                    self.state = 433
                    self.insert_values()
                    self.state = 438
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 439
                self.match(PostgreSqlGrammarParser.INSERT)
                self.state = 440
                self.match(PostgreSqlGrammarParser.INTO)
                self.state = 441
                self.table_name()
                self.state = 446
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                if la_ == 1:
                    self.state = 442
                    self.match(PostgreSqlGrammarParser.LPAREN)
                    self.state = 443
                    self.column_list()
                    self.state = 444
                    self.match(PostgreSqlGrammarParser.RPAREN)


                self.state = 448
                self.select_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_valuesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.LPAREN, 0)

        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.ValueContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.ValueContext,i)


        def RPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.COMMA)
            else:
                return self.getToken(PostgreSqlGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_insert_values

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_values" ):
                listener.enterInsert_values(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_values" ):
                listener.exitInsert_values(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_values" ):
                return visitor.visitInsert_values(self)
            else:
                return visitor.visitChildren(self)




    def insert_values(self):

        localctx = PostgreSqlGrammarParser.Insert_valuesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_insert_values)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 452
            self.match(PostgreSqlGrammarParser.LPAREN)
            self.state = 453
            self.value()
            self.state = 458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==115:
                self.state = 454
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 455
                self.value()
                self.state = 460
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 461
            self.match(PostgreSqlGrammarParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(PostgreSqlGrammarParser.UPDATE, 0)

        def table_name(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_nameContext,0)


        def SET(self):
            return self.getToken(PostgreSqlGrammarParser.SET, 0)

        def update_assignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Update_assignmentContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Update_assignmentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.COMMA)
            else:
                return self.getToken(PostgreSqlGrammarParser.COMMA, i)

        def WHERE(self):
            return self.getToken(PostgreSqlGrammarParser.WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_update_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_stmt" ):
                listener.enterUpdate_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_stmt" ):
                listener.exitUpdate_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_stmt" ):
                return visitor.visitUpdate_stmt(self)
            else:
                return visitor.visitChildren(self)




    def update_stmt(self):

        localctx = PostgreSqlGrammarParser.Update_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_update_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 463
            self.match(PostgreSqlGrammarParser.UPDATE)
            self.state = 464
            self.table_name()
            self.state = 465
            self.match(PostgreSqlGrammarParser.SET)
            self.state = 466
            self.update_assignment()
            self.state = 471
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==115:
                self.state = 467
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 468
                self.update_assignment()
                self.state = 473
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28:
                self.state = 474
                self.match(PostgreSqlGrammarParser.WHERE)
                self.state = 475
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_assignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def EQ(self):
            return self.getToken(PostgreSqlGrammarParser.EQ, 0)

        def value(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.ValueContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_update_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_assignment" ):
                listener.enterUpdate_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_assignment" ):
                listener.exitUpdate_assignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_assignment" ):
                return visitor.visitUpdate_assignment(self)
            else:
                return visitor.visitChildren(self)




    def update_assignment(self):

        localctx = PostgreSqlGrammarParser.Update_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_update_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478
            self.match(PostgreSqlGrammarParser.ID)
            self.state = 479
            self.match(PostgreSqlGrammarParser.EQ)
            self.state = 480
            self.value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(PostgreSqlGrammarParser.DELETE, 0)

        def FROM(self):
            return self.getToken(PostgreSqlGrammarParser.FROM, 0)

        def table_name(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_nameContext,0)


        def WHERE(self):
            return self.getToken(PostgreSqlGrammarParser.WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_delete_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_stmt" ):
                listener.enterDelete_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_stmt" ):
                listener.exitDelete_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelete_stmt" ):
                return visitor.visitDelete_stmt(self)
            else:
                return visitor.visitChildren(self)




    def delete_stmt(self):

        localctx = PostgreSqlGrammarParser.Delete_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_delete_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 482
            self.match(PostgreSqlGrammarParser.DELETE)
            self.state = 483
            self.match(PostgreSqlGrammarParser.FROM)
            self.state = 484
            self.table_name()
            self.state = 487
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28:
                self.state = 485
                self.match(PostgreSqlGrammarParser.WHERE)
                self.state = 486
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(PostgreSqlGrammarParser.STRING, 0)

        def NUMBER(self):
            return self.getToken(PostgreSqlGrammarParser.NUMBER, 0)

        def NULL(self):
            return self.getToken(PostgreSqlGrammarParser.NULL, 0)

        def expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue" ):
                listener.enterValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue" ):
                listener.exitValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValue" ):
                return visitor.visitValue(self)
            else:
                return visitor.visitChildren(self)




    def value(self):

        localctx = PostgreSqlGrammarParser.ValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_value)
        try:
            self.state = 493
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 489
                self.match(PostgreSqlGrammarParser.STRING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 490
                self.match(PostgreSqlGrammarParser.NUMBER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 491
                self.match(PostgreSqlGrammarParser.NULL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 492
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PostgreSqlGrammarParser.WITH, 0)

        def cte(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.CteContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.CteContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.COMMA)
            else:
                return self.getToken(PostgreSqlGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_with_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause" ):
                listener.enterWith_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause" ):
                listener.exitWith_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_clause" ):
                return visitor.visitWith_clause(self)
            else:
                return visitor.visitChildren(self)




    def with_clause(self):

        localctx = PostgreSqlGrammarParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_with_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 495
            self.match(PostgreSqlGrammarParser.WITH)
            self.state = 496
            self.cte()
            self.state = 501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==115:
                self.state = 497
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 498
                self.cte()
                self.state = 503
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def AS(self):
            return self.getToken(PostgreSqlGrammarParser.AS, 0)

        def LPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.LPAREN, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Select_stmtContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_cte

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCte" ):
                listener.enterCte(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCte" ):
                listener.exitCte(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCte" ):
                return visitor.visitCte(self)
            else:
                return visitor.visitChildren(self)




    def cte(self):

        localctx = PostgreSqlGrammarParser.CteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_cte)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 504
            self.match(PostgreSqlGrammarParser.ID)
            self.state = 505
            self.match(PostgreSqlGrammarParser.AS)
            self.state = 506
            self.match(PostgreSqlGrammarParser.LPAREN)
            self.state = 507
            self.select_stmt()
            self.state = 508
            self.match(PostgreSqlGrammarParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Result_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_reference(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_referenceContext,0)


        def DOT(self):
            return self.getToken(PostgreSqlGrammarParser.DOT, 0)

        def STAR(self):
            return self.getToken(PostgreSqlGrammarParser.STAR, 0)

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def agg_func(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Agg_funcContext,0)


        def LPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_result_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResult_column" ):
                listener.enterResult_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResult_column" ):
                listener.exitResult_column(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResult_column" ):
                return visitor.visitResult_column(self)
            else:
                return visitor.visitChildren(self)




    def result_column(self):

        localctx = PostgreSqlGrammarParser.Result_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_result_column)
        try:
            self.state = 524
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 510
                self.table_reference()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 511
                self.table_reference()
                self.state = 512
                self.match(PostgreSqlGrammarParser.DOT)
                self.state = 513
                self.match(PostgreSqlGrammarParser.STAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 515
                self.table_reference()
                self.state = 516
                self.match(PostgreSqlGrammarParser.DOT)
                self.state = 517
                self.match(PostgreSqlGrammarParser.ID)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 519
                self.match(PostgreSqlGrammarParser.ID)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 520
                self.agg_func()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 521
                self.match(PostgreSqlGrammarParser.ID)
                self.state = 522
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 523
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def standard_join(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Standard_joinContext,0)


        def natural_join(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Natural_joinContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_clause" ):
                listener.enterJoin_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_clause" ):
                listener.exitJoin_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_clause" ):
                return visitor.visitJoin_clause(self)
            else:
                return visitor.visitChildren(self)




    def join_clause(self):

        localctx = PostgreSqlGrammarParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_join_clause)
        try:
            self.state = 528
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53, 54, 55, 56, 57]:
                self.enterOuterAlt(localctx, 1)
                self.state = 526
                self.standard_join()
                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 2)
                self.state = 527
                self.natural_join()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Standard_joinContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def join_type(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Join_typeContext,0)


        def table_reference(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_referenceContext,0)


        def ON(self):
            return self.getToken(PostgreSqlGrammarParser.ON, 0)

        def expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_standard_join

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandard_join" ):
                listener.enterStandard_join(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandard_join" ):
                listener.exitStandard_join(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandard_join" ):
                return visitor.visitStandard_join(self)
            else:
                return visitor.visitChildren(self)




    def standard_join(self):

        localctx = PostgreSqlGrammarParser.Standard_joinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_standard_join)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 530
            self.join_type()
            self.state = 531
            self.table_reference()
            self.state = 532
            self.match(PostgreSqlGrammarParser.ON)
            self.state = 533
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Natural_joinContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def natural_join_type(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Natural_join_typeContext,0)


        def table_reference(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_referenceContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_natural_join

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNatural_join" ):
                listener.enterNatural_join(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNatural_join" ):
                listener.exitNatural_join(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNatural_join" ):
                return visitor.visitNatural_join(self)
            else:
                return visitor.visitChildren(self)




    def natural_join(self):

        localctx = PostgreSqlGrammarParser.Natural_joinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_natural_join)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 535
            self.natural_join_type()
            self.state = 536
            self.table_reference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INNER(self):
            return self.getToken(PostgreSqlGrammarParser.INNER, 0)

        def JOIN(self):
            return self.getToken(PostgreSqlGrammarParser.JOIN, 0)

        def LEFT(self):
            return self.getToken(PostgreSqlGrammarParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(PostgreSqlGrammarParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(PostgreSqlGrammarParser.FULL, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_join_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_type" ):
                listener.enterJoin_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_type" ):
                listener.exitJoin_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_type" ):
                return visitor.visitJoin_type(self)
            else:
                return visitor.visitChildren(self)




    def join_type(self):

        localctx = PostgreSqlGrammarParser.Join_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_join_type)
        try:
            self.state = 547
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.enterOuterAlt(localctx, 1)
                self.state = 538
                self.match(PostgreSqlGrammarParser.INNER)
                self.state = 539
                self.match(PostgreSqlGrammarParser.JOIN)
                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 2)
                self.state = 540
                self.match(PostgreSqlGrammarParser.LEFT)
                self.state = 541
                self.match(PostgreSqlGrammarParser.JOIN)
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 3)
                self.state = 542
                self.match(PostgreSqlGrammarParser.RIGHT)
                self.state = 543
                self.match(PostgreSqlGrammarParser.JOIN)
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 4)
                self.state = 544
                self.match(PostgreSqlGrammarParser.FULL)
                self.state = 545
                self.match(PostgreSqlGrammarParser.JOIN)
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 5)
                self.state = 546
                self.match(PostgreSqlGrammarParser.JOIN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Natural_join_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NATURAL(self):
            return self.getToken(PostgreSqlGrammarParser.NATURAL, 0)

        def JOIN(self):
            return self.getToken(PostgreSqlGrammarParser.JOIN, 0)

        def INNER(self):
            return self.getToken(PostgreSqlGrammarParser.INNER, 0)

        def LEFT(self):
            return self.getToken(PostgreSqlGrammarParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(PostgreSqlGrammarParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(PostgreSqlGrammarParser.FULL, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_natural_join_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNatural_join_type" ):
                listener.enterNatural_join_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNatural_join_type" ):
                listener.exitNatural_join_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNatural_join_type" ):
                return visitor.visitNatural_join_type(self)
            else:
                return visitor.visitChildren(self)




    def natural_join_type(self):

        localctx = PostgreSqlGrammarParser.Natural_join_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_natural_join_type)
        try:
            self.state = 563
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 549
                self.match(PostgreSqlGrammarParser.NATURAL)
                self.state = 550
                self.match(PostgreSqlGrammarParser.JOIN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 551
                self.match(PostgreSqlGrammarParser.NATURAL)
                self.state = 552
                self.match(PostgreSqlGrammarParser.INNER)
                self.state = 553
                self.match(PostgreSqlGrammarParser.JOIN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 554
                self.match(PostgreSqlGrammarParser.NATURAL)
                self.state = 555
                self.match(PostgreSqlGrammarParser.LEFT)
                self.state = 556
                self.match(PostgreSqlGrammarParser.JOIN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 557
                self.match(PostgreSqlGrammarParser.NATURAL)
                self.state = 558
                self.match(PostgreSqlGrammarParser.RIGHT)
                self.state = 559
                self.match(PostgreSqlGrammarParser.JOIN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 560
                self.match(PostgreSqlGrammarParser.NATURAL)
                self.state = 561
                self.match(PostgreSqlGrammarParser.FULL)
                self.state = 562
                self.match(PostgreSqlGrammarParser.JOIN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_nameContext,0)


        def alias(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.AliasContext,0)


        def LPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.LPAREN, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Select_stmtContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_table_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_reference" ):
                listener.enterTable_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_reference" ):
                listener.exitTable_reference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_reference" ):
                return visitor.visitTable_reference(self)
            else:
                return visitor.visitChildren(self)




    def table_reference(self):

        localctx = PostgreSqlGrammarParser.Table_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_table_reference)
        self._la = 0 # Token type
        try:
            self.state = 575
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [138]:
                self.enterOuterAlt(localctx, 1)
                self.state = 565
                self.table_name()
                self.state = 567
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==38 or _la==138:
                    self.state = 566
                    self.alias()


                pass
            elif token in [118]:
                self.enterOuterAlt(localctx, 2)
                self.state = 569
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 570
                self.select_stmt()
                self.state = 571
                self.match(PostgreSqlGrammarParser.RPAREN)
                self.state = 573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==38 or _la==138:
                    self.state = 572
                    self.alias()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_name" ):
                return visitor.visitTable_name(self)
            else:
                return visitor.visitChildren(self)




    def table_name(self):

        localctx = PostgreSqlGrammarParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 577
            self.match(PostgreSqlGrammarParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(PostgreSqlGrammarParser.AS, 0)

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias" ):
                listener.enterAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias" ):
                listener.exitAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlias" ):
                return visitor.visitAlias(self)
            else:
                return visitor.visitChildren(self)




    def alias(self):

        localctx = PostgreSqlGrammarParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_alias)
        try:
            self.state = 582
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38]:
                self.enterOuterAlt(localctx, 1)
                self.state = 579
                self.match(PostgreSqlGrammarParser.AS)
                self.state = 580
                self.match(PostgreSqlGrammarParser.ID)
                pass
            elif token in [138]:
                self.enterOuterAlt(localctx, 2)
                self.state = 581
                self.match(PostgreSqlGrammarParser.ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(PostgreSqlGrammarParser.GROUP, 0)

        def BY(self):
            return self.getToken(PostgreSqlGrammarParser.BY, 0)

        def group_by_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Group_by_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Group_by_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.COMMA)
            else:
                return self.getToken(PostgreSqlGrammarParser.COMMA, i)

        def HAVING(self):
            return self.getToken(PostgreSqlGrammarParser.HAVING, 0)

        def expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_group_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_clause" ):
                listener.enterGroup_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_clause" ):
                listener.exitGroup_by_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_by_clause" ):
                return visitor.visitGroup_by_clause(self)
            else:
                return visitor.visitChildren(self)




    def group_by_clause(self):

        localctx = PostgreSqlGrammarParser.Group_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_group_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            self.match(PostgreSqlGrammarParser.GROUP)
            self.state = 585
            self.match(PostgreSqlGrammarParser.BY)
            self.state = 586
            self.group_by_item()
            self.state = 591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==115:
                self.state = 587
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 588
                self.group_by_item()
                self.state = 593
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==31:
                self.state = 594
                self.match(PostgreSqlGrammarParser.HAVING)
                self.state = 595
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def table_reference(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_referenceContext,0)


        def DOT(self):
            return self.getToken(PostgreSqlGrammarParser.DOT, 0)

        def agg_func(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Agg_funcContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_group_by_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_item" ):
                listener.enterGroup_by_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_item" ):
                listener.exitGroup_by_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_by_item" ):
                return visitor.visitGroup_by_item(self)
            else:
                return visitor.visitChildren(self)




    def group_by_item(self):

        localctx = PostgreSqlGrammarParser.Group_by_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_group_by_item)
        try:
            self.state = 604
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 598
                self.match(PostgreSqlGrammarParser.ID)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 599
                self.table_reference()
                self.state = 600
                self.match(PostgreSqlGrammarParser.DOT)
                self.state = 601
                self.match(PostgreSqlGrammarParser.ID)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 603
                self.agg_func()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(PostgreSqlGrammarParser.ORDER, 0)

        def BY(self):
            return self.getToken(PostgreSqlGrammarParser.BY, 0)

        def order_by_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Order_by_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Order_by_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.COMMA)
            else:
                return self.getToken(PostgreSqlGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_order_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_clause" ):
                listener.enterOrder_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_clause" ):
                listener.exitOrder_by_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrder_by_clause" ):
                return visitor.visitOrder_by_clause(self)
            else:
                return visitor.visitChildren(self)




    def order_by_clause(self):

        localctx = PostgreSqlGrammarParser.Order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_order_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 606
            self.match(PostgreSqlGrammarParser.ORDER)
            self.state = 607
            self.match(PostgreSqlGrammarParser.BY)
            self.state = 608
            self.order_by_item()
            self.state = 613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==115:
                self.state = 609
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 610
                self.order_by_item()
                self.state = 615
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def ASC(self):
            return self.getToken(PostgreSqlGrammarParser.ASC, 0)

        def DESC(self):
            return self.getToken(PostgreSqlGrammarParser.DESC, 0)

        def table_reference(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Table_referenceContext,0)


        def DOT(self):
            return self.getToken(PostgreSqlGrammarParser.DOT, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_order_by_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_item" ):
                listener.enterOrder_by_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_item" ):
                listener.exitOrder_by_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrder_by_item" ):
                return visitor.visitOrder_by_item(self)
            else:
                return visitor.visitChildren(self)




    def order_by_item(self):

        localctx = PostgreSqlGrammarParser.Order_by_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_order_by_item)
        self._la = 0 # Token type
        try:
            self.state = 626
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 616
                self.match(PostgreSqlGrammarParser.ID)
                self.state = 618
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==33 or _la==34:
                    self.state = 617
                    _la = self._input.LA(1)
                    if not(_la==33 or _la==34):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 620
                self.table_reference()
                self.state = 621
                self.match(PostgreSqlGrammarParser.DOT)
                self.state = 622
                self.match(PostgreSqlGrammarParser.ID)
                self.state = 624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==33 or _la==34:
                    self.state = 623
                    _la = self._input.LA(1)
                    if not(_la==33 or _la==34):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Agg_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COUNT(self):
            return self.getToken(PostgreSqlGrammarParser.COUNT, 0)

        def LPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.RPAREN, 0)

        def STAR(self):
            return self.getToken(PostgreSqlGrammarParser.STAR, 0)

        def expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,0)


        def SUM(self):
            return self.getToken(PostgreSqlGrammarParser.SUM, 0)

        def AVG(self):
            return self.getToken(PostgreSqlGrammarParser.AVG, 0)

        def MIN(self):
            return self.getToken(PostgreSqlGrammarParser.MIN, 0)

        def MAX(self):
            return self.getToken(PostgreSqlGrammarParser.MAX, 0)

        def ARRAY_AGG(self):
            return self.getToken(PostgreSqlGrammarParser.ARRAY_AGG, 0)

        def STRING_AGG(self):
            return self.getToken(PostgreSqlGrammarParser.STRING_AGG, 0)

        def COMMA(self):
            return self.getToken(PostgreSqlGrammarParser.COMMA, 0)

        def STRING(self):
            return self.getToken(PostgreSqlGrammarParser.STRING, 0)

        def BOOL_AND(self):
            return self.getToken(PostgreSqlGrammarParser.BOOL_AND, 0)

        def BOOL_OR(self):
            return self.getToken(PostgreSqlGrammarParser.BOOL_OR, 0)

        def VAR_POP(self):
            return self.getToken(PostgreSqlGrammarParser.VAR_POP, 0)

        def VAR_SAMP(self):
            return self.getToken(PostgreSqlGrammarParser.VAR_SAMP, 0)

        def STDDEV_POP(self):
            return self.getToken(PostgreSqlGrammarParser.STDDEV_POP, 0)

        def STDDEV_SAMP(self):
            return self.getToken(PostgreSqlGrammarParser.STDDEV_SAMP, 0)

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_agg_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAgg_func" ):
                listener.enterAgg_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAgg_func" ):
                listener.exitAgg_func(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAgg_func" ):
                return visitor.visitAgg_func(self)
            else:
                return visitor.visitChildren(self)




    def agg_func(self):

        localctx = PostgreSqlGrammarParser.Agg_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_agg_func)
        try:
            self.state = 700
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [58]:
                self.enterOuterAlt(localctx, 1)
                self.state = 628
                self.match(PostgreSqlGrammarParser.COUNT)
                self.state = 629
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 632
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [114]:
                    self.state = 630
                    self.match(PostgreSqlGrammarParser.STAR)
                    pass
                elif token in [37, 45, 58, 59, 60, 61, 62, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 118, 138]:
                    self.state = 631
                    self.expr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 634
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [59]:
                self.enterOuterAlt(localctx, 2)
                self.state = 635
                self.match(PostgreSqlGrammarParser.SUM)
                self.state = 636
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 637
                self.expr(0)
                self.state = 638
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 3)
                self.state = 640
                self.match(PostgreSqlGrammarParser.AVG)
                self.state = 641
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 642
                self.expr(0)
                self.state = 643
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 4)
                self.state = 645
                self.match(PostgreSqlGrammarParser.MIN)
                self.state = 646
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 647
                self.expr(0)
                self.state = 648
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 5)
                self.state = 650
                self.match(PostgreSqlGrammarParser.MAX)
                self.state = 651
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 652
                self.expr(0)
                self.state = 653
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 6)
                self.state = 655
                self.match(PostgreSqlGrammarParser.ARRAY_AGG)
                self.state = 656
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 657
                self.expr(0)
                self.state = 658
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 7)
                self.state = 660
                self.match(PostgreSqlGrammarParser.STRING_AGG)
                self.state = 661
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 662
                self.expr(0)
                self.state = 663
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 664
                self.match(PostgreSqlGrammarParser.STRING)
                self.state = 665
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 8)
                self.state = 667
                self.match(PostgreSqlGrammarParser.BOOL_AND)
                self.state = 668
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 669
                self.expr(0)
                self.state = 670
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 9)
                self.state = 672
                self.match(PostgreSqlGrammarParser.BOOL_OR)
                self.state = 673
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 674
                self.expr(0)
                self.state = 675
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 10)
                self.state = 677
                self.match(PostgreSqlGrammarParser.VAR_POP)
                self.state = 678
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 679
                self.expr(0)
                self.state = 680
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 11)
                self.state = 682
                self.match(PostgreSqlGrammarParser.VAR_SAMP)
                self.state = 683
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 684
                self.expr(0)
                self.state = 685
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 12)
                self.state = 687
                self.match(PostgreSqlGrammarParser.STDDEV_POP)
                self.state = 688
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 689
                self.expr(0)
                self.state = 690
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 13)
                self.state = 692
                self.match(PostgreSqlGrammarParser.STDDEV_SAMP)
                self.state = 693
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 694
                self.expr(0)
                self.state = 695
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [138]:
                self.enterOuterAlt(localctx, 14)
                self.state = 697
                self.match(PostgreSqlGrammarParser.ID)
                self.state = 698
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 699
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(PostgreSqlGrammarParser.NOT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.ExprContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,i)


        def arith_expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Arith_exprContext,0)


        def EQ(self):
            return self.getToken(PostgreSqlGrammarParser.EQ, 0)

        def NEQ(self):
            return self.getToken(PostgreSqlGrammarParser.NEQ, 0)

        def LT(self):
            return self.getToken(PostgreSqlGrammarParser.LT, 0)

        def LTE(self):
            return self.getToken(PostgreSqlGrammarParser.LTE, 0)

        def GT(self):
            return self.getToken(PostgreSqlGrammarParser.GT, 0)

        def GTE(self):
            return self.getToken(PostgreSqlGrammarParser.GTE, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.STRING)
            else:
                return self.getToken(PostgreSqlGrammarParser.STRING, i)

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.NUMBER)
            else:
                return self.getToken(PostgreSqlGrammarParser.NUMBER, i)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.ID)
            else:
                return self.getToken(PostgreSqlGrammarParser.ID, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.DOT)
            else:
                return self.getToken(PostgreSqlGrammarParser.DOT, i)

        def IS(self):
            return self.getToken(PostgreSqlGrammarParser.IS, 0)

        def NULL(self):
            return self.getToken(PostgreSqlGrammarParser.NULL, 0)

        def LIKE(self):
            return self.getToken(PostgreSqlGrammarParser.LIKE, 0)

        def BETWEEN(self):
            return self.getToken(PostgreSqlGrammarParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(PostgreSqlGrammarParser.AND, 0)

        def LPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.LPAREN, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Select_stmtContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.RPAREN, 0)

        def case_expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Case_exprContext,0)


        def function_call(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Function_callContext,0)


        def OR(self):
            return self.getToken(PostgreSqlGrammarParser.OR, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PostgreSqlGrammarParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 80
        self.enterRecursionRule(localctx, 80, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 703
                self.match(PostgreSqlGrammarParser.NOT)
                self.state = 704
                self.expr(9)
                pass

            elif la_ == 2:
                self.state = 705
                self.arith_expr(0)
                pass

            elif la_ == 3:
                self.state = 713
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [112]:
                    self.state = 706
                    self.match(PostgreSqlGrammarParser.STRING)
                    pass
                elif token in [113]:
                    self.state = 707
                    self.match(PostgreSqlGrammarParser.NUMBER)
                    pass
                elif token in [138]:
                    self.state = 708
                    self.match(PostgreSqlGrammarParser.ID)
                    self.state = 711
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==117:
                        self.state = 709
                        self.match(PostgreSqlGrammarParser.DOT)
                        self.state = 710
                        self.match(PostgreSqlGrammarParser.ID)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 715
                _la = self._input.LA(1)
                if not(((((_la - 120)) & ~0x3f) == 0 and ((1 << (_la - 120)) & 63) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 723
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [112]:
                    self.state = 716
                    self.match(PostgreSqlGrammarParser.STRING)
                    pass
                elif token in [113]:
                    self.state = 717
                    self.match(PostgreSqlGrammarParser.NUMBER)
                    pass
                elif token in [138]:
                    self.state = 718
                    self.match(PostgreSqlGrammarParser.ID)
                    self.state = 721
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                    if la_ == 1:
                        self.state = 719
                        self.match(PostgreSqlGrammarParser.DOT)
                        self.state = 720
                        self.match(PostgreSqlGrammarParser.ID)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                self.state = 725
                self.match(PostgreSqlGrammarParser.ID)
                self.state = 726
                self.match(PostgreSqlGrammarParser.IS)
                self.state = 728
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==37:
                    self.state = 727
                    self.match(PostgreSqlGrammarParser.NOT)


                self.state = 730
                self.match(PostgreSqlGrammarParser.NULL)
                pass

            elif la_ == 5:
                self.state = 731
                self.match(PostgreSqlGrammarParser.ID)
                self.state = 732
                self.match(PostgreSqlGrammarParser.LIKE)
                self.state = 733
                self.match(PostgreSqlGrammarParser.STRING)
                pass

            elif la_ == 6:
                self.state = 734
                self.match(PostgreSqlGrammarParser.ID)
                self.state = 735
                self.match(PostgreSqlGrammarParser.BETWEEN)
                self.state = 736
                self.expr(0)
                self.state = 737
                self.match(PostgreSqlGrammarParser.AND)
                self.state = 738
                self.expr(4)
                pass

            elif la_ == 7:
                self.state = 740
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 741
                self.select_stmt()
                self.state = 742
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass

            elif la_ == 8:
                self.state = 744
                self.case_expr()
                pass

            elif la_ == 9:
                self.state = 745
                self.function_call()
                self.state = 757
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
                if la_ == 1:
                    self.state = 746
                    _la = self._input.LA(1)
                    if not(((((_la - 120)) & ~0x3f) == 0 and ((1 << (_la - 120)) & 63) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 755
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                    if la_ == 1:
                        self.state = 747
                        self.expr(0)
                        pass

                    elif la_ == 2:
                        self.state = 748
                        self.match(PostgreSqlGrammarParser.STRING)
                        pass

                    elif la_ == 3:
                        self.state = 749
                        self.match(PostgreSqlGrammarParser.NUMBER)
                        pass

                    elif la_ == 4:
                        self.state = 750
                        self.match(PostgreSqlGrammarParser.ID)
                        self.state = 753
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                        if la_ == 1:
                            self.state = 751
                            self.match(PostgreSqlGrammarParser.DOT)
                            self.state = 752
                            self.match(PostgreSqlGrammarParser.ID)


                        pass




                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 769
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,73,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 767
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
                    if la_ == 1:
                        localctx = PostgreSqlGrammarParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 761
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 762
                        self.match(PostgreSqlGrammarParser.AND)
                        self.state = 763
                        self.expr(12)
                        pass

                    elif la_ == 2:
                        localctx = PostgreSqlGrammarParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 764
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 765
                        self.match(PostgreSqlGrammarParser.OR)
                        self.state = 766
                        self.expr(11)
                        pass

             
                self.state = 771
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Arith_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.AtomContext,0)


        def arith_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Arith_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Arith_exprContext,i)


        def PLUS(self):
            return self.getToken(PostgreSqlGrammarParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(PostgreSqlGrammarParser.MINUS, 0)

        def STAR(self):
            return self.getToken(PostgreSqlGrammarParser.STAR, 0)

        def SLASH(self):
            return self.getToken(PostgreSqlGrammarParser.SLASH, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_arith_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArith_expr" ):
                listener.enterArith_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArith_expr" ):
                listener.exitArith_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArith_expr" ):
                return visitor.visitArith_expr(self)
            else:
                return visitor.visitChildren(self)



    def arith_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PostgreSqlGrammarParser.Arith_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 82
        self.enterRecursionRule(localctx, 82, self.RULE_arith_expr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 773
            self.atom()
            self._ctx.stop = self._input.LT(-1)
            self.state = 789
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 787
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                    if la_ == 1:
                        localctx = PostgreSqlGrammarParser.Arith_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_arith_expr)
                        self.state = 775
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 776
                        self.match(PostgreSqlGrammarParser.PLUS)
                        self.state = 777
                        self.arith_expr(6)
                        pass

                    elif la_ == 2:
                        localctx = PostgreSqlGrammarParser.Arith_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_arith_expr)
                        self.state = 778
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 779
                        self.match(PostgreSqlGrammarParser.MINUS)
                        self.state = 780
                        self.arith_expr(5)
                        pass

                    elif la_ == 3:
                        localctx = PostgreSqlGrammarParser.Arith_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_arith_expr)
                        self.state = 781
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 782
                        self.match(PostgreSqlGrammarParser.STAR)
                        self.state = 783
                        self.arith_expr(4)
                        pass

                    elif la_ == 4:
                        localctx = PostgreSqlGrammarParser.Arith_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_arith_expr)
                        self.state = 784
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 785
                        self.match(PostgreSqlGrammarParser.SLASH)
                        self.state = 786
                        self.arith_expr(3)
                        pass

             
                self.state = 791
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def NUMBER(self):
            return self.getToken(PostgreSqlGrammarParser.NUMBER, 0)

        def LPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.LPAREN, 0)

        def arith_expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Arith_exprContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom" ):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = PostgreSqlGrammarParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_atom)
        try:
            self.state = 798
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [138]:
                self.enterOuterAlt(localctx, 1)
                self.state = 792
                self.match(PostgreSqlGrammarParser.ID)
                pass
            elif token in [113]:
                self.enterOuterAlt(localctx, 2)
                self.state = 793
                self.match(PostgreSqlGrammarParser.NUMBER)
                pass
            elif token in [118]:
                self.enterOuterAlt(localctx, 3)
                self.state = 794
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 795
                self.arith_expr(0)
                self.state = 796
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(PostgreSqlGrammarParser.CASE, 0)

        def END(self):
            return self.getToken(PostgreSqlGrammarParser.END, 0)

        def when_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.When_clauseContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.When_clauseContext,i)


        def ELSE(self):
            return self.getToken(PostgreSqlGrammarParser.ELSE, 0)

        def expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,0)


        def NULL(self):
            return self.getToken(PostgreSqlGrammarParser.NULL, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_case_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_expr" ):
                listener.enterCase_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_expr" ):
                listener.exitCase_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase_expr" ):
                return visitor.visitCase_expr(self)
            else:
                return visitor.visitChildren(self)




    def case_expr(self):

        localctx = PostgreSqlGrammarParser.Case_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_case_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            self.match(PostgreSqlGrammarParser.CASE)
            self.state = 802 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 801
                self.when_clause()
                self.state = 804 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==46):
                    break

            self.state = 811
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 806
                self.match(PostgreSqlGrammarParser.ELSE)
                self.state = 809
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [37, 45, 58, 59, 60, 61, 62, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 118, 138]:
                    self.state = 807
                    self.expr(0)
                    pass
                elif token in [41]:
                    self.state = 808
                    self.match(PostgreSqlGrammarParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 813
            self.match(PostgreSqlGrammarParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class When_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(PostgreSqlGrammarParser.WHEN, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.ExprContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,i)


        def THEN(self):
            return self.getToken(PostgreSqlGrammarParser.THEN, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_when_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhen_clause" ):
                listener.enterWhen_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhen_clause" ):
                listener.exitWhen_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhen_clause" ):
                return visitor.visitWhen_clause(self)
            else:
                return visitor.visitChildren(self)




    def when_clause(self):

        localctx = PostgreSqlGrammarParser.When_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_when_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 815
            self.match(PostgreSqlGrammarParser.WHEN)
            self.state = 816
            self.expr(0)
            self.state = 817
            self.match(PostgreSqlGrammarParser.THEN)
            self.state = 818
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSqlGrammarParser.ID, 0)

        def LPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(PostgreSqlGrammarParser.RPAREN, 0)

        def function_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.Function_argContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.Function_argContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.COMMA)
            else:
                return self.getToken(PostgreSqlGrammarParser.COMMA, i)

        def LEN(self):
            return self.getToken(PostgreSqlGrammarParser.LEN, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSqlGrammarParser.ExprContext)
            else:
                return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,i)


        def UPPER(self):
            return self.getToken(PostgreSqlGrammarParser.UPPER, 0)

        def LOWER(self):
            return self.getToken(PostgreSqlGrammarParser.LOWER, 0)

        def SUBSTRING(self):
            return self.getToken(PostgreSqlGrammarParser.SUBSTRING, 0)

        def INT(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSqlGrammarParser.INT)
            else:
                return self.getToken(PostgreSqlGrammarParser.INT, i)

        def ABS(self):
            return self.getToken(PostgreSqlGrammarParser.ABS, 0)

        def CEILING(self):
            return self.getToken(PostgreSqlGrammarParser.CEILING, 0)

        def FLOOR(self):
            return self.getToken(PostgreSqlGrammarParser.FLOOR, 0)

        def ROUND(self):
            return self.getToken(PostgreSqlGrammarParser.ROUND, 0)

        def YEAR(self):
            return self.getToken(PostgreSqlGrammarParser.YEAR, 0)

        def MONTH(self):
            return self.getToken(PostgreSqlGrammarParser.MONTH, 0)

        def DAY(self):
            return self.getToken(PostgreSqlGrammarParser.DAY, 0)

        def GETDATE(self):
            return self.getToken(PostgreSqlGrammarParser.GETDATE, 0)

        def DATEADD(self):
            return self.getToken(PostgreSqlGrammarParser.DATEADD, 0)

        def DATEDIFF(self):
            return self.getToken(PostgreSqlGrammarParser.DATEDIFF, 0)

        def CAST(self):
            return self.getToken(PostgreSqlGrammarParser.CAST, 0)

        def AS(self):
            return self.getToken(PostgreSqlGrammarParser.AS, 0)

        def data_type(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.Data_typeContext,0)


        def CONVERT(self):
            return self.getToken(PostgreSqlGrammarParser.CONVERT, 0)

        def SUM(self):
            return self.getToken(PostgreSqlGrammarParser.SUM, 0)

        def AVG(self):
            return self.getToken(PostgreSqlGrammarParser.AVG, 0)

        def COUNT(self):
            return self.getToken(PostgreSqlGrammarParser.COUNT, 0)

        def MIN(self):
            return self.getToken(PostgreSqlGrammarParser.MIN, 0)

        def MAX(self):
            return self.getToken(PostgreSqlGrammarParser.MAX, 0)

        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_function_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call" ):
                listener.enterFunction_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call" ):
                listener.exitFunction_call(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_call" ):
                return visitor.visitFunction_call(self)
            else:
                return visitor.visitChildren(self)




    def function_call(self):

        localctx = PostgreSqlGrammarParser.Function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_function_call)
        self._la = 0 # Token type
        try:
            self.state = 954
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [138]:
                self.enterOuterAlt(localctx, 1)
                self.state = 820
                self.match(PostgreSqlGrammarParser.ID)
                self.state = 821
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 830
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8935176982514106368) != 0) or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & 17592203673599) != 0):
                    self.state = 822
                    self.function_arg()
                    self.state = 827
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==115:
                        self.state = 823
                        self.match(PostgreSqlGrammarParser.COMMA)
                        self.state = 824
                        self.function_arg()
                        self.state = 829
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 832
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [94]:
                self.enterOuterAlt(localctx, 2)
                self.state = 833
                self.match(PostgreSqlGrammarParser.LEN)
                self.state = 834
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 835
                self.expr(0)
                self.state = 836
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [95]:
                self.enterOuterAlt(localctx, 3)
                self.state = 838
                self.match(PostgreSqlGrammarParser.UPPER)
                self.state = 839
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 840
                self.expr(0)
                self.state = 841
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [96]:
                self.enterOuterAlt(localctx, 4)
                self.state = 843
                self.match(PostgreSqlGrammarParser.LOWER)
                self.state = 844
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 845
                self.expr(0)
                self.state = 846
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [97]:
                self.enterOuterAlt(localctx, 5)
                self.state = 848
                self.match(PostgreSqlGrammarParser.SUBSTRING)
                self.state = 849
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 850
                self.expr(0)
                self.state = 851
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 852
                self.match(PostgreSqlGrammarParser.INT)
                self.state = 853
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 854
                self.match(PostgreSqlGrammarParser.INT)
                self.state = 855
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [98]:
                self.enterOuterAlt(localctx, 6)
                self.state = 857
                self.match(PostgreSqlGrammarParser.ABS)
                self.state = 858
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 859
                self.expr(0)
                self.state = 860
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 7)
                self.state = 862
                self.match(PostgreSqlGrammarParser.CEILING)
                self.state = 863
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 864
                self.expr(0)
                self.state = 865
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 8)
                self.state = 867
                self.match(PostgreSqlGrammarParser.FLOOR)
                self.state = 868
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 869
                self.expr(0)
                self.state = 870
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 9)
                self.state = 872
                self.match(PostgreSqlGrammarParser.ROUND)
                self.state = 873
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 874
                self.expr(0)
                self.state = 875
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 876
                self.match(PostgreSqlGrammarParser.INT)
                self.state = 877
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 10)
                self.state = 879
                self.match(PostgreSqlGrammarParser.YEAR)
                self.state = 880
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 881
                self.expr(0)
                self.state = 882
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [103]:
                self.enterOuterAlt(localctx, 11)
                self.state = 884
                self.match(PostgreSqlGrammarParser.MONTH)
                self.state = 885
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 886
                self.expr(0)
                self.state = 887
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [104]:
                self.enterOuterAlt(localctx, 12)
                self.state = 889
                self.match(PostgreSqlGrammarParser.DAY)
                self.state = 890
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 891
                self.expr(0)
                self.state = 892
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [105]:
                self.enterOuterAlt(localctx, 13)
                self.state = 894
                self.match(PostgreSqlGrammarParser.GETDATE)
                self.state = 895
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 896
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 14)
                self.state = 897
                self.match(PostgreSqlGrammarParser.DATEADD)
                self.state = 898
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 899
                self.expr(0)
                self.state = 900
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 901
                self.match(PostgreSqlGrammarParser.INT)
                self.state = 902
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 903
                self.expr(0)
                self.state = 904
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [107]:
                self.enterOuterAlt(localctx, 15)
                self.state = 906
                self.match(PostgreSqlGrammarParser.DATEDIFF)
                self.state = 907
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 908
                self.expr(0)
                self.state = 909
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 910
                self.expr(0)
                self.state = 911
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 912
                self.expr(0)
                self.state = 913
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [108]:
                self.enterOuterAlt(localctx, 16)
                self.state = 915
                self.match(PostgreSqlGrammarParser.CAST)
                self.state = 916
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 917
                self.expr(0)
                self.state = 918
                self.match(PostgreSqlGrammarParser.AS)
                self.state = 919
                self.data_type()
                self.state = 920
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [109]:
                self.enterOuterAlt(localctx, 17)
                self.state = 922
                self.match(PostgreSqlGrammarParser.CONVERT)
                self.state = 923
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 924
                self.data_type()
                self.state = 925
                self.match(PostgreSqlGrammarParser.COMMA)
                self.state = 926
                self.expr(0)
                self.state = 927
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [59]:
                self.enterOuterAlt(localctx, 18)
                self.state = 929
                self.match(PostgreSqlGrammarParser.SUM)
                self.state = 930
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 931
                self.expr(0)
                self.state = 932
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 19)
                self.state = 934
                self.match(PostgreSqlGrammarParser.AVG)
                self.state = 935
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 936
                self.expr(0)
                self.state = 937
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [58]:
                self.enterOuterAlt(localctx, 20)
                self.state = 939
                self.match(PostgreSqlGrammarParser.COUNT)
                self.state = 940
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 941
                self.expr(0)
                self.state = 942
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 21)
                self.state = 944
                self.match(PostgreSqlGrammarParser.MIN)
                self.state = 945
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 946
                self.expr(0)
                self.state = 947
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 22)
                self.state = 949
                self.match(PostgreSqlGrammarParser.MAX)
                self.state = 950
                self.match(PostgreSqlGrammarParser.LPAREN)
                self.state = 951
                self.expr(0)
                self.state = 952
                self.match(PostgreSqlGrammarParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(PostgreSqlGrammarParser.ExprContext,0)


        def getRuleIndex(self):
            return PostgreSqlGrammarParser.RULE_function_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_arg" ):
                listener.enterFunction_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_arg" ):
                listener.exitFunction_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_arg" ):
                return visitor.visitFunction_arg(self)
            else:
                return visitor.visitChildren(self)




    def function_arg(self):

        localctx = PostgreSqlGrammarParser.Function_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_function_arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 956
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[40] = self.expr_sempred
        self._predicates[41] = self.arith_expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 10)
         

    def arith_expr_sempred(self, localctx:Arith_exprContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 2)
         




